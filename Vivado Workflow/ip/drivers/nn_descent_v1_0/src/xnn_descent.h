// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XNN_DESCENT_H
#define XNN_DESCENT_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xnn_descent_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Control_BaseAddress;
} XNn_descent_Config;
#endif

typedef struct {
    u32 Control_BaseAddress;
    u32 IsReady;
} XNn_descent;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XNn_descent_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XNn_descent_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XNn_descent_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XNn_descent_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XNn_descent_Initialize(XNn_descent *InstancePtr, u16 DeviceId);
XNn_descent_Config* XNn_descent_LookupConfig(u16 DeviceId);
int XNn_descent_CfgInitialize(XNn_descent *InstancePtr, XNn_descent_Config *ConfigPtr);
#else
int XNn_descent_Initialize(XNn_descent *InstancePtr, const char* InstanceName);
int XNn_descent_Release(XNn_descent *InstancePtr);
#endif

void XNn_descent_Start(XNn_descent *InstancePtr);
u32 XNn_descent_IsDone(XNn_descent *InstancePtr);
u32 XNn_descent_IsIdle(XNn_descent *InstancePtr);
u32 XNn_descent_IsReady(XNn_descent *InstancePtr);
void XNn_descent_EnableAutoRestart(XNn_descent *InstancePtr);
void XNn_descent_DisableAutoRestart(XNn_descent *InstancePtr);

void XNn_descent_Set_data_in(XNn_descent *InstancePtr, u32 Data);
u32 XNn_descent_Get_data_in(XNn_descent *InstancePtr);
void XNn_descent_Set_rng_state(XNn_descent *InstancePtr, u32 Data);
u32 XNn_descent_Get_rng_state(XNn_descent *InstancePtr);
void XNn_descent_Set_result_out_index(XNn_descent *InstancePtr, u32 Data);
u32 XNn_descent_Get_result_out_index(XNn_descent *InstancePtr);
void XNn_descent_Set_result_out_dist(XNn_descent *InstancePtr, u32 Data);
u32 XNn_descent_Get_result_out_dist(XNn_descent *InstancePtr);

void XNn_descent_InterruptGlobalEnable(XNn_descent *InstancePtr);
void XNn_descent_InterruptGlobalDisable(XNn_descent *InstancePtr);
void XNn_descent_InterruptEnable(XNn_descent *InstancePtr, u32 Mask);
void XNn_descent_InterruptDisable(XNn_descent *InstancePtr, u32 Mask);
void XNn_descent_InterruptClear(XNn_descent *InstancePtr, u32 Mask);
u32 XNn_descent_InterruptGetEnabled(XNn_descent *InstancePtr);
u32 XNn_descent_InterruptGetStatus(XNn_descent *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
