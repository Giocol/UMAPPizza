-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nn_descent is
generic (
    C_M_AXI_HOSTMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_HOSTMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_HOSTMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HOSTMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_HOSTMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HOSTMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HOSTMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HOSTMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_HOSTMEM_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_HOSTMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_HOSTMEM_PROT_VALUE : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_hostmem_AWVALID : OUT STD_LOGIC;
    m_axi_hostmem_AWREADY : IN STD_LOGIC;
    m_axi_hostmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_ADDR_WIDTH-1 downto 0);
    m_axi_hostmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_ID_WIDTH-1 downto 0);
    m_axi_hostmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_hostmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_hostmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hostmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hostmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hostmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_hostmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hostmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hostmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_hostmem_WVALID : OUT STD_LOGIC;
    m_axi_hostmem_WREADY : IN STD_LOGIC;
    m_axi_hostmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_DATA_WIDTH-1 downto 0);
    m_axi_hostmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_hostmem_WLAST : OUT STD_LOGIC;
    m_axi_hostmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_ID_WIDTH-1 downto 0);
    m_axi_hostmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_WUSER_WIDTH-1 downto 0);
    m_axi_hostmem_ARVALID : OUT STD_LOGIC;
    m_axi_hostmem_ARREADY : IN STD_LOGIC;
    m_axi_hostmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_ADDR_WIDTH-1 downto 0);
    m_axi_hostmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_ID_WIDTH-1 downto 0);
    m_axi_hostmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_hostmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_hostmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hostmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hostmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hostmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_hostmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hostmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hostmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_hostmem_RVALID : IN STD_LOGIC;
    m_axi_hostmem_RREADY : OUT STD_LOGIC;
    m_axi_hostmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_DATA_WIDTH-1 downto 0);
    m_axi_hostmem_RLAST : IN STD_LOGIC;
    m_axi_hostmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_ID_WIDTH-1 downto 0);
    m_axi_hostmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_RUSER_WIDTH-1 downto 0);
    m_axi_hostmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hostmem_BVALID : IN STD_LOGIC;
    m_axi_hostmem_BREADY : OUT STD_LOGIC;
    m_axi_hostmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hostmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_ID_WIDTH-1 downto 0);
    m_axi_hostmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_HOSTMEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of nn_descent is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "nn_descent,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=26,HLS_SYN_DSP=12,HLS_SYN_FF=10620,HLS_SYN_LUT=9207}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (50 downto 0) := "000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (50 downto 0) := "000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (50 downto 0) := "000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (50 downto 0) := "000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (50 downto 0) := "000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (50 downto 0) := "000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (50 downto 0) := "000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (50 downto 0) := "000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (50 downto 0) := "000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (50 downto 0) := "001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (50 downto 0) := "010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (50 downto 0) := "100000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_12C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3E8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111101000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_7FFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111111111111111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv9_12C : STD_LOGIC_VECTOR (8 downto 0) := "100101100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_3E8 : STD_LOGIC_VECTOR (9 downto 0) := "1111101000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal data_in : STD_LOGIC_VECTOR (31 downto 0);
    signal rng_state : STD_LOGIC_VECTOR (31 downto 0);
    signal result_out_index : STD_LOGIC_VECTOR (31 downto 0);
    signal result_out_dist : STD_LOGIC_VECTOR (31 downto 0);
    signal current_graph_index_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal current_graph_index_ce0 : STD_LOGIC;
    signal current_graph_index_we0 : STD_LOGIC;
    signal current_graph_index_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_graph_index_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_graph_index_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal current_graph_index_ce1 : STD_LOGIC;
    signal current_graph_index_we1 : STD_LOGIC;
    signal current_graph_index_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_graph_index_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_graph_dist_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal current_graph_dist_ce0 : STD_LOGIC;
    signal current_graph_dist_we0 : STD_LOGIC;
    signal current_graph_dist_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_graph_dist_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_graph_dist_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal current_graph_dist_ce1 : STD_LOGIC;
    signal current_graph_dist_we1 : STD_LOGIC;
    signal current_graph_dist_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_graph_dist_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_graph_flag_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal current_graph_flag_ce0 : STD_LOGIC;
    signal current_graph_flag_we0 : STD_LOGIC;
    signal current_graph_flag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_graph_flag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_graph_flag_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal current_graph_flag_ce1 : STD_LOGIC;
    signal current_graph_flag_we1 : STD_LOGIC;
    signal current_graph_flag_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_graph_flag_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal indices_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal indices_ce0 : STD_LOGIC;
    signal indices_we0 : STD_LOGIC;
    signal indices_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal candidate_neighbors_s_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal candidate_neighbors_s_ce0 : STD_LOGIC;
    signal candidate_neighbors_s_we0 : STD_LOGIC;
    signal candidate_neighbors_s_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal candidate_neighbors_s_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal candidate_neighbors_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal candidate_neighbors_1_ce0 : STD_LOGIC;
    signal candidate_neighbors_1_we0 : STD_LOGIC;
    signal candidate_neighbors_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal candidate_neighbors_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal candidate_neighbors_2_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal candidate_neighbors_2_ce0 : STD_LOGIC;
    signal candidate_neighbors_2_we0 : STD_LOGIC;
    signal candidate_neighbors_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal candidate_neighbors_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal hostmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal hostmem_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_flag00000000 : BOOLEAN;
    signal exitcond11_reg_1422 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter1_exitcond11_reg_1422 : STD_LOGIC_VECTOR (0 downto 0);
    signal hostmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_flag00000000 : BOOLEAN;
    signal exitcond10_reg_1403 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter1_exitcond10_reg_1403 : STD_LOGIC_VECTOR (0 downto 0);
    signal hostmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal hostmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal exitcond9_reg_1162 : STD_LOGIC_VECTOR (0 downto 0);
    signal hostmem_AWVALID : STD_LOGIC;
    signal hostmem_AWREADY : STD_LOGIC;
    signal hostmem_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal hostmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal hostmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal hostmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal hostmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal hostmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal hostmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal hostmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal hostmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal hostmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal hostmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal hostmem_WVALID : STD_LOGIC;
    signal hostmem_WREADY : STD_LOGIC;
    signal hostmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal hostmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal hostmem_WLAST : STD_LOGIC;
    signal hostmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal hostmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal hostmem_ARVALID : STD_LOGIC;
    signal hostmem_ARREADY : STD_LOGIC;
    signal hostmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal hostmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal hostmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal hostmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal hostmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal hostmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal hostmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal hostmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal hostmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal hostmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal hostmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal hostmem_RVALID : STD_LOGIC;
    signal hostmem_RREADY : STD_LOGIC;
    signal hostmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal hostmem_RLAST : STD_LOGIC;
    signal hostmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal hostmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal hostmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal hostmem_BVALID : STD_LOGIC;
    signal hostmem_BREADY : STD_LOGIC;
    signal hostmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal hostmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal hostmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_reg_409 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_reg_pp0_iter1_indvar_reg_409 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal indvar1_reg_544 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar2_reg_555 : STD_LOGIC_VECTOR (9 downto 0);
    signal result_out_dist7_reg_1124 : STD_LOGIC_VECTOR (29 downto 0);
    signal result_out_index5_reg_1129 : STD_LOGIC_VECTOR (29 downto 0);
    signal rng_state3_reg_1134 : STD_LOGIC_VECTOR (29 downto 0);
    signal data_in1_reg_1141 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_sig_ioackin_hostmem_ARREADY : STD_LOGIC;
    signal hostmem_addr_reg_1152 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal hostmem_addr_1_reg_1157 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond9_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_exitcond9_reg_1162 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_725_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_next_reg_1166 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal hostmem_addr_2_read_reg_1171 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_points_1_fu_742_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal n_points_1_reg_1179 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal p_shl_fu_748_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_reg_1184 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond8_fu_736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl9_fu_756_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl9_reg_1189 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_neighbor_1_fu_774_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal i_cast1_fu_801_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_cast1_reg_1202 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal i_2_fu_811_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_2_reg_1210 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_829_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_reg_1215 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_rejection_sample_fu_595_ap_done : STD_LOGIC;
    signal j_1_fu_840_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_1223 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal indices_addr_reg_1228 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond5_fu_834_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indices_load_reg_1233 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_26_fu_863_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_26_reg_1238 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_4_fu_875_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_1246 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal exitcond_i_fu_869_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_cast_cast1_fu_905_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_cast_cast1_reg_1261 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i_fu_910_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_reg_1266 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_916_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_126_i_reg_1272 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal result_1_fu_920_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal extLd_cast_fu_925_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal extLd_cast_reg_1282 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal i_cast_cast_fu_930_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_cast_cast_reg_1287 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_point_1_fu_941_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal n_point_1_reg_1295 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal p_shl3_fu_947_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_reg_1300 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond4_fu_935_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl4_fu_955_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl4_reg_1305 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_neighbor_2_fu_973_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal i_3_fu_1006_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_3_reg_1321 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal tmp_27_fu_1032_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_27_reg_1326 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond2_fu_1000_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_1048_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_2_reg_1335 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal tmp_32_fu_1059_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_reg_1340 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_fu_1042_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_637_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_1350 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_tau_rand_fu_604_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_reg_1354 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal grp_tau_rand_fu_604_ap_done : STD_LOGIC;
    signal ap_block_state33_on_subcall_done : BOOLEAN;
    signal candidate_neighbors_6_reg_1358 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_2_fu_1074_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_2_reg_1366 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal tmp_35_fu_1085_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_reg_1371 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_1068_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal q_reg_1381 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal tmp_17_reg_1386 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_reg_1390 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal tmp_37_reg_1399 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal exitcond10_fu_1090_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state42_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state43_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state44_pp1_stage0_iter2 : BOOLEAN;
    signal ap_sig_ioackin_hostmem_WREADY : STD_LOGIC;
    signal ap_block_state44_io : BOOLEAN;
    signal ap_block_pp1_stage0_flag00011001 : BOOLEAN;
    signal indvar_next1_fu_1096_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal result_index_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_index_load_reg_1417 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond11_fu_1107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state50_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state51_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state52_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state52_io : BOOLEAN;
    signal ap_block_pp2_stage0_flag00011001 : BOOLEAN;
    signal indvar_next2_fu_1113_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal result_dist_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_dist_load_reg_1436 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_sig_ioackin_hostmem_AWREADY : STD_LOGIC;
    signal grp_deheap_sort_fu_583_ap_done : STD_LOGIC;
    signal ap_block_pp1_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state42 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state50 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal data_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal data_ce0 : STD_LOGIC;
    signal data_we0 : STD_LOGIC;
    signal data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal data_ce1 : STD_LOGIC;
    signal data_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_index_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal result_index_ce0 : STD_LOGIC;
    signal result_index_we0 : STD_LOGIC;
    signal result_dist_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal result_dist_ce0 : STD_LOGIC;
    signal result_dist_we0 : STD_LOGIC;
    signal grp_build_candidates_fu_566_ap_start : STD_LOGIC;
    signal grp_build_candidates_fu_566_ap_done : STD_LOGIC;
    signal grp_build_candidates_fu_566_ap_idle : STD_LOGIC;
    signal grp_build_candidates_fu_566_ap_ready : STD_LOGIC;
    signal grp_build_candidates_fu_566_current_graph_index_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_build_candidates_fu_566_current_graph_index_ce0 : STD_LOGIC;
    signal grp_build_candidates_fu_566_current_graph_flag_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_build_candidates_fu_566_current_graph_flag_ce0 : STD_LOGIC;
    signal grp_build_candidates_fu_566_current_graph_flag_we0 : STD_LOGIC;
    signal grp_build_candidates_fu_566_current_graph_flag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_build_candidates_fu_566_m_axi_rng_state_AWVALID : STD_LOGIC;
    signal grp_build_candidates_fu_566_m_axi_rng_state_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_build_candidates_fu_566_m_axi_rng_state_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_build_candidates_fu_566_m_axi_rng_state_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_build_candidates_fu_566_m_axi_rng_state_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_build_candidates_fu_566_m_axi_rng_state_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_build_candidates_fu_566_m_axi_rng_state_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_build_candidates_fu_566_m_axi_rng_state_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_build_candidates_fu_566_m_axi_rng_state_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_build_candidates_fu_566_m_axi_rng_state_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_build_candidates_fu_566_m_axi_rng_state_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_build_candidates_fu_566_m_axi_rng_state_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_build_candidates_fu_566_m_axi_rng_state_WVALID : STD_LOGIC;
    signal grp_build_candidates_fu_566_m_axi_rng_state_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_build_candidates_fu_566_m_axi_rng_state_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_build_candidates_fu_566_m_axi_rng_state_WLAST : STD_LOGIC;
    signal grp_build_candidates_fu_566_m_axi_rng_state_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_build_candidates_fu_566_m_axi_rng_state_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_build_candidates_fu_566_m_axi_rng_state_ARVALID : STD_LOGIC;
    signal grp_build_candidates_fu_566_m_axi_rng_state_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_build_candidates_fu_566_m_axi_rng_state_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_build_candidates_fu_566_m_axi_rng_state_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_build_candidates_fu_566_m_axi_rng_state_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_build_candidates_fu_566_m_axi_rng_state_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_build_candidates_fu_566_m_axi_rng_state_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_build_candidates_fu_566_m_axi_rng_state_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_build_candidates_fu_566_m_axi_rng_state_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_build_candidates_fu_566_m_axi_rng_state_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_build_candidates_fu_566_m_axi_rng_state_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_build_candidates_fu_566_m_axi_rng_state_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_build_candidates_fu_566_m_axi_rng_state_RREADY : STD_LOGIC;
    signal grp_build_candidates_fu_566_m_axi_rng_state_BREADY : STD_LOGIC;
    signal grp_build_candidates_fu_566_candidate_neighbors_s_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_build_candidates_fu_566_candidate_neighbors_s_ce0 : STD_LOGIC;
    signal grp_build_candidates_fu_566_candidate_neighbors_s_we0 : STD_LOGIC;
    signal grp_build_candidates_fu_566_candidate_neighbors_s_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_build_candidates_fu_566_candidate_neighbors_13_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_build_candidates_fu_566_candidate_neighbors_13_ce0 : STD_LOGIC;
    signal grp_build_candidates_fu_566_candidate_neighbors_13_we0 : STD_LOGIC;
    signal grp_build_candidates_fu_566_candidate_neighbors_13_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_build_candidates_fu_566_candidate_neighbors_14_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_build_candidates_fu_566_candidate_neighbors_14_ce0 : STD_LOGIC;
    signal grp_build_candidates_fu_566_candidate_neighbors_14_we0 : STD_LOGIC;
    signal grp_build_candidates_fu_566_candidate_neighbors_14_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_deheap_sort_fu_583_ap_start : STD_LOGIC;
    signal grp_deheap_sort_fu_583_ap_idle : STD_LOGIC;
    signal grp_deheap_sort_fu_583_ap_ready : STD_LOGIC;
    signal grp_deheap_sort_fu_583_current_graph_index_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_deheap_sort_fu_583_current_graph_index_ce0 : STD_LOGIC;
    signal grp_deheap_sort_fu_583_current_graph_index_we0 : STD_LOGIC;
    signal grp_deheap_sort_fu_583_current_graph_index_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_deheap_sort_fu_583_current_graph_index_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_deheap_sort_fu_583_current_graph_index_ce1 : STD_LOGIC;
    signal grp_deheap_sort_fu_583_current_graph_index_we1 : STD_LOGIC;
    signal grp_deheap_sort_fu_583_current_graph_index_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_deheap_sort_fu_583_current_graph_dist_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_deheap_sort_fu_583_current_graph_dist_ce0 : STD_LOGIC;
    signal grp_deheap_sort_fu_583_current_graph_dist_we0 : STD_LOGIC;
    signal grp_deheap_sort_fu_583_current_graph_dist_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_deheap_sort_fu_583_current_graph_dist_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_deheap_sort_fu_583_current_graph_dist_ce1 : STD_LOGIC;
    signal grp_deheap_sort_fu_583_current_graph_dist_we1 : STD_LOGIC;
    signal grp_deheap_sort_fu_583_current_graph_dist_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_deheap_sort_fu_583_current_graph_flag_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_deheap_sort_fu_583_current_graph_flag_ce0 : STD_LOGIC;
    signal grp_deheap_sort_fu_583_current_graph_flag_we0 : STD_LOGIC;
    signal grp_deheap_sort_fu_583_current_graph_flag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_deheap_sort_fu_583_current_graph_flag_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_deheap_sort_fu_583_current_graph_flag_ce1 : STD_LOGIC;
    signal grp_deheap_sort_fu_583_current_graph_flag_we1 : STD_LOGIC;
    signal grp_deheap_sort_fu_583_current_graph_flag_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_deheap_sort_fu_583_result_index_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_deheap_sort_fu_583_result_index_ce0 : STD_LOGIC;
    signal grp_deheap_sort_fu_583_result_index_we0 : STD_LOGIC;
    signal grp_deheap_sort_fu_583_result_index_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_deheap_sort_fu_583_result_dist_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_deheap_sort_fu_583_result_dist_ce0 : STD_LOGIC;
    signal grp_deheap_sort_fu_583_result_dist_we0 : STD_LOGIC;
    signal grp_deheap_sort_fu_583_result_dist_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_rejection_sample_fu_595_ap_start : STD_LOGIC;
    signal grp_rejection_sample_fu_595_ap_idle : STD_LOGIC;
    signal grp_rejection_sample_fu_595_ap_ready : STD_LOGIC;
    signal grp_rejection_sample_fu_595_m_axi_rng_state_AWVALID : STD_LOGIC;
    signal grp_rejection_sample_fu_595_m_axi_rng_state_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_rejection_sample_fu_595_m_axi_rng_state_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_rejection_sample_fu_595_m_axi_rng_state_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_rejection_sample_fu_595_m_axi_rng_state_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_rejection_sample_fu_595_m_axi_rng_state_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_rejection_sample_fu_595_m_axi_rng_state_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_rejection_sample_fu_595_m_axi_rng_state_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_rejection_sample_fu_595_m_axi_rng_state_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_rejection_sample_fu_595_m_axi_rng_state_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_rejection_sample_fu_595_m_axi_rng_state_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_rejection_sample_fu_595_m_axi_rng_state_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_rejection_sample_fu_595_m_axi_rng_state_WVALID : STD_LOGIC;
    signal grp_rejection_sample_fu_595_m_axi_rng_state_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_rejection_sample_fu_595_m_axi_rng_state_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_rejection_sample_fu_595_m_axi_rng_state_WLAST : STD_LOGIC;
    signal grp_rejection_sample_fu_595_m_axi_rng_state_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_rejection_sample_fu_595_m_axi_rng_state_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_rejection_sample_fu_595_m_axi_rng_state_ARVALID : STD_LOGIC;
    signal grp_rejection_sample_fu_595_m_axi_rng_state_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_rejection_sample_fu_595_m_axi_rng_state_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_rejection_sample_fu_595_m_axi_rng_state_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_rejection_sample_fu_595_m_axi_rng_state_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_rejection_sample_fu_595_m_axi_rng_state_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_rejection_sample_fu_595_m_axi_rng_state_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_rejection_sample_fu_595_m_axi_rng_state_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_rejection_sample_fu_595_m_axi_rng_state_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_rejection_sample_fu_595_m_axi_rng_state_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_rejection_sample_fu_595_m_axi_rng_state_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_rejection_sample_fu_595_m_axi_rng_state_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_rejection_sample_fu_595_m_axi_rng_state_RREADY : STD_LOGIC;
    signal grp_rejection_sample_fu_595_m_axi_rng_state_BREADY : STD_LOGIC;
    signal grp_rejection_sample_fu_595_result_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_rejection_sample_fu_595_result_ce0 : STD_LOGIC;
    signal grp_rejection_sample_fu_595_result_we0 : STD_LOGIC;
    signal grp_rejection_sample_fu_595_result_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_tau_rand_fu_604_ap_start : STD_LOGIC;
    signal grp_tau_rand_fu_604_ap_idle : STD_LOGIC;
    signal grp_tau_rand_fu_604_ap_ready : STD_LOGIC;
    signal grp_tau_rand_fu_604_m_axi_state_AWVALID : STD_LOGIC;
    signal grp_tau_rand_fu_604_m_axi_state_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tau_rand_fu_604_m_axi_state_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_tau_rand_fu_604_m_axi_state_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tau_rand_fu_604_m_axi_state_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_tau_rand_fu_604_m_axi_state_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_tau_rand_fu_604_m_axi_state_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_tau_rand_fu_604_m_axi_state_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_tau_rand_fu_604_m_axi_state_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_tau_rand_fu_604_m_axi_state_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_tau_rand_fu_604_m_axi_state_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_tau_rand_fu_604_m_axi_state_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_tau_rand_fu_604_m_axi_state_WVALID : STD_LOGIC;
    signal grp_tau_rand_fu_604_m_axi_state_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tau_rand_fu_604_m_axi_state_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_tau_rand_fu_604_m_axi_state_WLAST : STD_LOGIC;
    signal grp_tau_rand_fu_604_m_axi_state_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_tau_rand_fu_604_m_axi_state_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_tau_rand_fu_604_m_axi_state_ARVALID : STD_LOGIC;
    signal grp_tau_rand_fu_604_m_axi_state_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tau_rand_fu_604_m_axi_state_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_tau_rand_fu_604_m_axi_state_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tau_rand_fu_604_m_axi_state_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_tau_rand_fu_604_m_axi_state_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_tau_rand_fu_604_m_axi_state_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_tau_rand_fu_604_m_axi_state_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_tau_rand_fu_604_m_axi_state_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_tau_rand_fu_604_m_axi_state_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_tau_rand_fu_604_m_axi_state_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_tau_rand_fu_604_m_axi_state_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_tau_rand_fu_604_m_axi_state_RREADY : STD_LOGIC;
    signal grp_tau_rand_fu_604_m_axi_state_BREADY : STD_LOGIC;
    signal grp_heap_push_opt_fu_611_ap_start : STD_LOGIC;
    signal grp_heap_push_opt_fu_611_ap_done : STD_LOGIC;
    signal grp_heap_push_opt_fu_611_ap_idle : STD_LOGIC;
    signal grp_heap_push_opt_fu_611_ap_ready : STD_LOGIC;
    signal grp_heap_push_opt_fu_611_current_graph_index_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_heap_push_opt_fu_611_current_graph_index_ce0 : STD_LOGIC;
    signal grp_heap_push_opt_fu_611_current_graph_index_we0 : STD_LOGIC;
    signal grp_heap_push_opt_fu_611_current_graph_index_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_heap_push_opt_fu_611_current_graph_index_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_heap_push_opt_fu_611_current_graph_index_ce1 : STD_LOGIC;
    signal grp_heap_push_opt_fu_611_current_graph_index_we1 : STD_LOGIC;
    signal grp_heap_push_opt_fu_611_current_graph_index_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_heap_push_opt_fu_611_current_graph_dist_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_heap_push_opt_fu_611_current_graph_dist_ce0 : STD_LOGIC;
    signal grp_heap_push_opt_fu_611_current_graph_dist_we0 : STD_LOGIC;
    signal grp_heap_push_opt_fu_611_current_graph_dist_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_heap_push_opt_fu_611_current_graph_dist_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_heap_push_opt_fu_611_current_graph_dist_ce1 : STD_LOGIC;
    signal grp_heap_push_opt_fu_611_current_graph_dist_we1 : STD_LOGIC;
    signal grp_heap_push_opt_fu_611_current_graph_dist_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_heap_push_opt_fu_611_current_graph_flag_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_heap_push_opt_fu_611_current_graph_flag_ce0 : STD_LOGIC;
    signal grp_heap_push_opt_fu_611_current_graph_flag_we0 : STD_LOGIC;
    signal grp_heap_push_opt_fu_611_current_graph_flag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_heap_push_opt_fu_611_current_graph_flag_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_heap_push_opt_fu_611_current_graph_flag_ce1 : STD_LOGIC;
    signal grp_heap_push_opt_fu_611_current_graph_flag_we1 : STD_LOGIC;
    signal grp_heap_push_opt_fu_611_current_graph_flag_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_heap_push_fu_622_ap_start : STD_LOGIC;
    signal grp_heap_push_fu_622_ap_done : STD_LOGIC;
    signal grp_heap_push_fu_622_ap_idle : STD_LOGIC;
    signal grp_heap_push_fu_622_ap_ready : STD_LOGIC;
    signal grp_heap_push_fu_622_current_graph_index_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_heap_push_fu_622_current_graph_index_ce0 : STD_LOGIC;
    signal grp_heap_push_fu_622_current_graph_index_we0 : STD_LOGIC;
    signal grp_heap_push_fu_622_current_graph_index_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_heap_push_fu_622_current_graph_dist_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_heap_push_fu_622_current_graph_dist_ce0 : STD_LOGIC;
    signal grp_heap_push_fu_622_current_graph_dist_we0 : STD_LOGIC;
    signal grp_heap_push_fu_622_current_graph_dist_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_heap_push_fu_622_current_graph_flag_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_heap_push_fu_622_current_graph_flag_ce0 : STD_LOGIC;
    signal grp_heap_push_fu_622_current_graph_flag_we0 : STD_LOGIC;
    signal grp_heap_push_fu_622_current_graph_flag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_heap_push_fu_622_row : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_heap_push_fu_622_index : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_phi_fu_413_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal n_points_reg_421 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond7_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_neighbor_reg_432 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_443 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_455 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal d_reg_466 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_reg_478 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_point_reg_489 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond3_fu_967_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond6_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_neighbor1_reg_500 : STD_LOGIC_VECTOR (4 downto 0);
    signal i2_reg_511 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal j3_reg_522 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_reg_533 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_predicate_op280_call_state40 : BOOLEAN;
    signal ap_block_state40_on_subcall_done : BOOLEAN;
    signal ap_reg_grp_build_candidates_fu_566_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_deheap_sort_fu_583_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_rejection_sample_fu_595_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_tau_rand_fu_604_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_heap_push_opt_fu_611_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_reg_grp_heap_push_fu_622_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal tmp_fu_731_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_794_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_fu_846_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_i_cast_fu_890_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum3_i_cast_fu_900_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_fu_993_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_fu_1102_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_fu_1119_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_691_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_701_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_710_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_hostmem_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_hostmem_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_hostmem_WREADY : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_flag00001001 : BOOLEAN;
    signal ap_block_pp2_stage0_flag00001001 : BOOLEAN;
    signal i_neighbor_cast_fu_764_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_fu_780_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_cast_fu_785_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_23_fu_789_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_fu_817_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_cast_fu_825_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl5_fu_855_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal extLd23_cast_fu_851_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_i_cast_fu_881_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_i_fu_885_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum3_i_fu_895_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal i_neighbor1_cast9_fu_963_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_fu_979_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_cast_fu_984_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_28_fu_988_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl7_fu_1020_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl7_cast_fu_1028_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl6_fu_1012_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal j3_cast6_fu_1038_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_31_fu_1054_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_cast5_fu_1064_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_34_fu_1080_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (50 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;

    component build_candidates IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        current_graph_index_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        current_graph_index_ce0 : OUT STD_LOGIC;
        current_graph_index_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        current_graph_flag_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        current_graph_flag_ce0 : OUT STD_LOGIC;
        current_graph_flag_we0 : OUT STD_LOGIC;
        current_graph_flag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        current_graph_flag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rng_state_AWVALID : OUT STD_LOGIC;
        m_axi_rng_state_AWREADY : IN STD_LOGIC;
        m_axi_rng_state_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rng_state_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rng_state_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rng_state_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rng_state_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rng_state_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rng_state_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rng_state_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rng_state_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rng_state_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rng_state_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rng_state_WVALID : OUT STD_LOGIC;
        m_axi_rng_state_WREADY : IN STD_LOGIC;
        m_axi_rng_state_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rng_state_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rng_state_WLAST : OUT STD_LOGIC;
        m_axi_rng_state_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rng_state_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rng_state_ARVALID : OUT STD_LOGIC;
        m_axi_rng_state_ARREADY : IN STD_LOGIC;
        m_axi_rng_state_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rng_state_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rng_state_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rng_state_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rng_state_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rng_state_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rng_state_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rng_state_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rng_state_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rng_state_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rng_state_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rng_state_RVALID : IN STD_LOGIC;
        m_axi_rng_state_RREADY : OUT STD_LOGIC;
        m_axi_rng_state_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rng_state_RLAST : IN STD_LOGIC;
        m_axi_rng_state_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rng_state_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rng_state_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rng_state_BVALID : IN STD_LOGIC;
        m_axi_rng_state_BREADY : OUT STD_LOGIC;
        m_axi_rng_state_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rng_state_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rng_state_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        rng_state3 : IN STD_LOGIC_VECTOR (29 downto 0);
        candidate_neighbors_s_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        candidate_neighbors_s_ce0 : OUT STD_LOGIC;
        candidate_neighbors_s_we0 : OUT STD_LOGIC;
        candidate_neighbors_s_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        candidate_neighbors_s_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        candidate_neighbors_13_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        candidate_neighbors_13_ce0 : OUT STD_LOGIC;
        candidate_neighbors_13_we0 : OUT STD_LOGIC;
        candidate_neighbors_13_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        candidate_neighbors_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        candidate_neighbors_14_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        candidate_neighbors_14_ce0 : OUT STD_LOGIC;
        candidate_neighbors_14_we0 : OUT STD_LOGIC;
        candidate_neighbors_14_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        candidate_neighbors_14_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component deheap_sort IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        current_graph_index_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        current_graph_index_ce0 : OUT STD_LOGIC;
        current_graph_index_we0 : OUT STD_LOGIC;
        current_graph_index_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        current_graph_index_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        current_graph_index_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        current_graph_index_ce1 : OUT STD_LOGIC;
        current_graph_index_we1 : OUT STD_LOGIC;
        current_graph_index_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        current_graph_index_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        current_graph_dist_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        current_graph_dist_ce0 : OUT STD_LOGIC;
        current_graph_dist_we0 : OUT STD_LOGIC;
        current_graph_dist_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        current_graph_dist_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        current_graph_dist_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        current_graph_dist_ce1 : OUT STD_LOGIC;
        current_graph_dist_we1 : OUT STD_LOGIC;
        current_graph_dist_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        current_graph_dist_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        current_graph_flag_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        current_graph_flag_ce0 : OUT STD_LOGIC;
        current_graph_flag_we0 : OUT STD_LOGIC;
        current_graph_flag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        current_graph_flag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        current_graph_flag_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        current_graph_flag_ce1 : OUT STD_LOGIC;
        current_graph_flag_we1 : OUT STD_LOGIC;
        current_graph_flag_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        current_graph_flag_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        result_index_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        result_index_ce0 : OUT STD_LOGIC;
        result_index_we0 : OUT STD_LOGIC;
        result_index_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        result_dist_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        result_dist_ce0 : OUT STD_LOGIC;
        result_dist_we0 : OUT STD_LOGIC;
        result_dist_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component rejection_sample IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_rng_state_AWVALID : OUT STD_LOGIC;
        m_axi_rng_state_AWREADY : IN STD_LOGIC;
        m_axi_rng_state_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rng_state_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rng_state_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rng_state_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rng_state_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rng_state_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rng_state_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rng_state_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rng_state_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rng_state_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rng_state_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rng_state_WVALID : OUT STD_LOGIC;
        m_axi_rng_state_WREADY : IN STD_LOGIC;
        m_axi_rng_state_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rng_state_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rng_state_WLAST : OUT STD_LOGIC;
        m_axi_rng_state_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rng_state_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rng_state_ARVALID : OUT STD_LOGIC;
        m_axi_rng_state_ARREADY : IN STD_LOGIC;
        m_axi_rng_state_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rng_state_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rng_state_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rng_state_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rng_state_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rng_state_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rng_state_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rng_state_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rng_state_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rng_state_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rng_state_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rng_state_RVALID : IN STD_LOGIC;
        m_axi_rng_state_RREADY : OUT STD_LOGIC;
        m_axi_rng_state_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rng_state_RLAST : IN STD_LOGIC;
        m_axi_rng_state_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rng_state_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rng_state_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rng_state_BVALID : IN STD_LOGIC;
        m_axi_rng_state_BREADY : OUT STD_LOGIC;
        m_axi_rng_state_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rng_state_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rng_state_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        rng_state3 : IN STD_LOGIC_VECTOR (29 downto 0);
        result_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        result_ce0 : OUT STD_LOGIC;
        result_we0 : OUT STD_LOGIC;
        result_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        result_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component tau_rand IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_state_AWVALID : OUT STD_LOGIC;
        m_axi_state_AWREADY : IN STD_LOGIC;
        m_axi_state_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_state_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_state_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_state_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_state_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_state_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_state_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_state_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_state_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_state_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_WVALID : OUT STD_LOGIC;
        m_axi_state_WREADY : IN STD_LOGIC;
        m_axi_state_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_state_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_state_WLAST : OUT STD_LOGIC;
        m_axi_state_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_ARVALID : OUT STD_LOGIC;
        m_axi_state_ARREADY : IN STD_LOGIC;
        m_axi_state_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_state_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_state_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_state_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_state_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_state_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_state_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_state_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_state_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_state_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_RVALID : IN STD_LOGIC;
        m_axi_state_RREADY : OUT STD_LOGIC;
        m_axi_state_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_state_RLAST : IN STD_LOGIC;
        m_axi_state_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_state_BVALID : IN STD_LOGIC;
        m_axi_state_BREADY : OUT STD_LOGIC;
        m_axi_state_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_state_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        rng_state3 : IN STD_LOGIC_VECTOR (29 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component heap_push_opt IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        current_graph_index_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        current_graph_index_ce0 : OUT STD_LOGIC;
        current_graph_index_we0 : OUT STD_LOGIC;
        current_graph_index_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        current_graph_index_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        current_graph_index_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        current_graph_index_ce1 : OUT STD_LOGIC;
        current_graph_index_we1 : OUT STD_LOGIC;
        current_graph_index_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        current_graph_index_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        current_graph_dist_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        current_graph_dist_ce0 : OUT STD_LOGIC;
        current_graph_dist_we0 : OUT STD_LOGIC;
        current_graph_dist_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        current_graph_dist_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        current_graph_dist_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        current_graph_dist_ce1 : OUT STD_LOGIC;
        current_graph_dist_we1 : OUT STD_LOGIC;
        current_graph_dist_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        current_graph_dist_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        current_graph_flag_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        current_graph_flag_ce0 : OUT STD_LOGIC;
        current_graph_flag_we0 : OUT STD_LOGIC;
        current_graph_flag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        current_graph_flag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        current_graph_flag_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        current_graph_flag_ce1 : OUT STD_LOGIC;
        current_graph_flag_we1 : OUT STD_LOGIC;
        current_graph_flag_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        current_graph_flag_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        row : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component heap_push IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        current_graph_index_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        current_graph_index_ce0 : OUT STD_LOGIC;
        current_graph_index_we0 : OUT STD_LOGIC;
        current_graph_index_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        current_graph_index_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        current_graph_dist_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        current_graph_dist_ce0 : OUT STD_LOGIC;
        current_graph_dist_we0 : OUT STD_LOGIC;
        current_graph_dist_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        current_graph_dist_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        current_graph_flag_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        current_graph_flag_ce0 : OUT STD_LOGIC;
        current_graph_flag_we0 : OUT STD_LOGIC;
        current_graph_flag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        current_graph_flag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        row : IN STD_LOGIC_VECTOR (8 downto 0);
        weight : IN STD_LOGIC_VECTOR (31 downto 0);
        index : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component nn_descent_mul_32lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nn_descent_currendEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nn_descent_indices IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component nn_descent_candidg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nn_descent_data IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nn_descent_resultjbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nn_descent_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        data_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        rng_state : OUT STD_LOGIC_VECTOR (31 downto 0);
        result_out_index : OUT STD_LOGIC_VECTOR (31 downto 0);
        result_out_dist : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nn_descent_hostmem_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    current_graph_index_U : component nn_descent_currendEe
    generic map (
        DataWidth => 32,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => current_graph_index_address0,
        ce0 => current_graph_index_ce0,
        we0 => current_graph_index_we0,
        d0 => current_graph_index_d0,
        q0 => current_graph_index_q0,
        address1 => current_graph_index_address1,
        ce1 => current_graph_index_ce1,
        we1 => current_graph_index_we1,
        d1 => current_graph_index_d1,
        q1 => current_graph_index_q1);

    current_graph_dist_U : component nn_descent_currendEe
    generic map (
        DataWidth => 32,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => current_graph_dist_address0,
        ce0 => current_graph_dist_ce0,
        we0 => current_graph_dist_we0,
        d0 => current_graph_dist_d0,
        q0 => current_graph_dist_q0,
        address1 => current_graph_dist_address1,
        ce1 => current_graph_dist_ce1,
        we1 => current_graph_dist_we1,
        d1 => current_graph_dist_d1,
        q1 => current_graph_dist_q1);

    current_graph_flag_U : component nn_descent_currendEe
    generic map (
        DataWidth => 32,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => current_graph_flag_address0,
        ce0 => current_graph_flag_ce0,
        we0 => current_graph_flag_we0,
        d0 => current_graph_flag_d0,
        q0 => current_graph_flag_q0,
        address1 => current_graph_flag_address1,
        ce1 => current_graph_flag_ce1,
        we1 => current_graph_flag_we1,
        d1 => current_graph_flag_d1,
        q1 => current_graph_flag_q1);

    indices_U : component nn_descent_indices
    generic map (
        DataWidth => 8,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => indices_address0,
        ce0 => indices_ce0,
        we0 => indices_we0,
        d0 => grp_rejection_sample_fu_595_result_d0,
        q0 => indices_q0);

    candidate_neighbors_s_U : component nn_descent_candidg8j
    generic map (
        DataWidth => 32,
        AddressRange => 2000,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => candidate_neighbors_s_address0,
        ce0 => candidate_neighbors_s_ce0,
        we0 => candidate_neighbors_s_we0,
        d0 => candidate_neighbors_s_d0,
        q0 => candidate_neighbors_s_q0);

    candidate_neighbors_1_U : component nn_descent_candidg8j
    generic map (
        DataWidth => 32,
        AddressRange => 2000,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => candidate_neighbors_1_address0,
        ce0 => candidate_neighbors_1_ce0,
        we0 => candidate_neighbors_1_we0,
        d0 => candidate_neighbors_1_d0,
        q0 => candidate_neighbors_1_q0);

    candidate_neighbors_2_U : component nn_descent_candidg8j
    generic map (
        DataWidth => 32,
        AddressRange => 2000,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => candidate_neighbors_2_address0,
        ce0 => candidate_neighbors_2_ce0,
        we0 => candidate_neighbors_2_we0,
        d0 => candidate_neighbors_2_d0,
        q0 => candidate_neighbors_2_q0);

    nn_descent_control_s_axi_U : component nn_descent_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        data_in => data_in,
        rng_state => rng_state,
        result_out_index => result_out_index,
        result_out_dist => result_out_dist);

    nn_descent_hostmem_m_axi_U : component nn_descent_hostmem_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_HOSTMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_HOSTMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_HOSTMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_HOSTMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_HOSTMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_HOSTMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_HOSTMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_HOSTMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_HOSTMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_HOSTMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_HOSTMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_hostmem_AWVALID,
        AWREADY => m_axi_hostmem_AWREADY,
        AWADDR => m_axi_hostmem_AWADDR,
        AWID => m_axi_hostmem_AWID,
        AWLEN => m_axi_hostmem_AWLEN,
        AWSIZE => m_axi_hostmem_AWSIZE,
        AWBURST => m_axi_hostmem_AWBURST,
        AWLOCK => m_axi_hostmem_AWLOCK,
        AWCACHE => m_axi_hostmem_AWCACHE,
        AWPROT => m_axi_hostmem_AWPROT,
        AWQOS => m_axi_hostmem_AWQOS,
        AWREGION => m_axi_hostmem_AWREGION,
        AWUSER => m_axi_hostmem_AWUSER,
        WVALID => m_axi_hostmem_WVALID,
        WREADY => m_axi_hostmem_WREADY,
        WDATA => m_axi_hostmem_WDATA,
        WSTRB => m_axi_hostmem_WSTRB,
        WLAST => m_axi_hostmem_WLAST,
        WID => m_axi_hostmem_WID,
        WUSER => m_axi_hostmem_WUSER,
        ARVALID => m_axi_hostmem_ARVALID,
        ARREADY => m_axi_hostmem_ARREADY,
        ARADDR => m_axi_hostmem_ARADDR,
        ARID => m_axi_hostmem_ARID,
        ARLEN => m_axi_hostmem_ARLEN,
        ARSIZE => m_axi_hostmem_ARSIZE,
        ARBURST => m_axi_hostmem_ARBURST,
        ARLOCK => m_axi_hostmem_ARLOCK,
        ARCACHE => m_axi_hostmem_ARCACHE,
        ARPROT => m_axi_hostmem_ARPROT,
        ARQOS => m_axi_hostmem_ARQOS,
        ARREGION => m_axi_hostmem_ARREGION,
        ARUSER => m_axi_hostmem_ARUSER,
        RVALID => m_axi_hostmem_RVALID,
        RREADY => m_axi_hostmem_RREADY,
        RDATA => m_axi_hostmem_RDATA,
        RLAST => m_axi_hostmem_RLAST,
        RID => m_axi_hostmem_RID,
        RUSER => m_axi_hostmem_RUSER,
        RRESP => m_axi_hostmem_RRESP,
        BVALID => m_axi_hostmem_BVALID,
        BREADY => m_axi_hostmem_BREADY,
        BRESP => m_axi_hostmem_BRESP,
        BID => m_axi_hostmem_BID,
        BUSER => m_axi_hostmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => hostmem_ARVALID,
        I_ARREADY => hostmem_ARREADY,
        I_ARADDR => hostmem_ARADDR,
        I_ARID => hostmem_ARID,
        I_ARLEN => hostmem_ARLEN,
        I_ARSIZE => hostmem_ARSIZE,
        I_ARLOCK => hostmem_ARLOCK,
        I_ARCACHE => hostmem_ARCACHE,
        I_ARQOS => hostmem_ARQOS,
        I_ARPROT => hostmem_ARPROT,
        I_ARUSER => hostmem_ARUSER,
        I_ARBURST => hostmem_ARBURST,
        I_ARREGION => hostmem_ARREGION,
        I_RVALID => hostmem_RVALID,
        I_RREADY => hostmem_RREADY,
        I_RDATA => hostmem_RDATA,
        I_RID => hostmem_RID,
        I_RUSER => hostmem_RUSER,
        I_RRESP => hostmem_RRESP,
        I_RLAST => hostmem_RLAST,
        I_AWVALID => hostmem_AWVALID,
        I_AWREADY => hostmem_AWREADY,
        I_AWADDR => hostmem_AWADDR,
        I_AWID => hostmem_AWID,
        I_AWLEN => hostmem_AWLEN,
        I_AWSIZE => hostmem_AWSIZE,
        I_AWLOCK => hostmem_AWLOCK,
        I_AWCACHE => hostmem_AWCACHE,
        I_AWQOS => hostmem_AWQOS,
        I_AWPROT => hostmem_AWPROT,
        I_AWUSER => hostmem_AWUSER,
        I_AWBURST => hostmem_AWBURST,
        I_AWREGION => hostmem_AWREGION,
        I_WVALID => hostmem_WVALID,
        I_WREADY => hostmem_WREADY,
        I_WDATA => hostmem_WDATA,
        I_WID => hostmem_WID,
        I_WUSER => hostmem_WUSER,
        I_WLAST => hostmem_WLAST,
        I_WSTRB => hostmem_WSTRB,
        I_BVALID => hostmem_BVALID,
        I_BREADY => hostmem_BREADY,
        I_BRESP => hostmem_BRESP,
        I_BID => hostmem_BID,
        I_BUSER => hostmem_BUSER);

    data_U : component nn_descent_data
    generic map (
        DataWidth => 32,
        AddressRange => 300,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_address0,
        ce0 => data_ce0,
        we0 => data_we0,
        d0 => hostmem_addr_2_read_reg_1171,
        q0 => data_q0,
        address1 => data_address1,
        ce1 => data_ce1,
        q1 => data_q1);

    result_index_U : component nn_descent_resultjbC
    generic map (
        DataWidth => 32,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => result_index_address0,
        ce0 => result_index_ce0,
        we0 => result_index_we0,
        d0 => grp_deheap_sort_fu_583_result_index_d0,
        q0 => result_index_q0);

    result_dist_U : component nn_descent_resultjbC
    generic map (
        DataWidth => 32,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => result_dist_address0,
        ce0 => result_dist_ce0,
        we0 => result_dist_we0,
        d0 => grp_deheap_sort_fu_583_result_dist_d0,
        q0 => result_dist_q0);

    grp_build_candidates_fu_566 : component build_candidates
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_build_candidates_fu_566_ap_start,
        ap_done => grp_build_candidates_fu_566_ap_done,
        ap_idle => grp_build_candidates_fu_566_ap_idle,
        ap_ready => grp_build_candidates_fu_566_ap_ready,
        current_graph_index_address0 => grp_build_candidates_fu_566_current_graph_index_address0,
        current_graph_index_ce0 => grp_build_candidates_fu_566_current_graph_index_ce0,
        current_graph_index_q0 => current_graph_index_q0,
        current_graph_flag_address0 => grp_build_candidates_fu_566_current_graph_flag_address0,
        current_graph_flag_ce0 => grp_build_candidates_fu_566_current_graph_flag_ce0,
        current_graph_flag_we0 => grp_build_candidates_fu_566_current_graph_flag_we0,
        current_graph_flag_d0 => grp_build_candidates_fu_566_current_graph_flag_d0,
        current_graph_flag_q0 => current_graph_flag_q0,
        m_axi_rng_state_AWVALID => grp_build_candidates_fu_566_m_axi_rng_state_AWVALID,
        m_axi_rng_state_AWREADY => hostmem_AWREADY,
        m_axi_rng_state_AWADDR => grp_build_candidates_fu_566_m_axi_rng_state_AWADDR,
        m_axi_rng_state_AWID => grp_build_candidates_fu_566_m_axi_rng_state_AWID,
        m_axi_rng_state_AWLEN => grp_build_candidates_fu_566_m_axi_rng_state_AWLEN,
        m_axi_rng_state_AWSIZE => grp_build_candidates_fu_566_m_axi_rng_state_AWSIZE,
        m_axi_rng_state_AWBURST => grp_build_candidates_fu_566_m_axi_rng_state_AWBURST,
        m_axi_rng_state_AWLOCK => grp_build_candidates_fu_566_m_axi_rng_state_AWLOCK,
        m_axi_rng_state_AWCACHE => grp_build_candidates_fu_566_m_axi_rng_state_AWCACHE,
        m_axi_rng_state_AWPROT => grp_build_candidates_fu_566_m_axi_rng_state_AWPROT,
        m_axi_rng_state_AWQOS => grp_build_candidates_fu_566_m_axi_rng_state_AWQOS,
        m_axi_rng_state_AWREGION => grp_build_candidates_fu_566_m_axi_rng_state_AWREGION,
        m_axi_rng_state_AWUSER => grp_build_candidates_fu_566_m_axi_rng_state_AWUSER,
        m_axi_rng_state_WVALID => grp_build_candidates_fu_566_m_axi_rng_state_WVALID,
        m_axi_rng_state_WREADY => hostmem_WREADY,
        m_axi_rng_state_WDATA => grp_build_candidates_fu_566_m_axi_rng_state_WDATA,
        m_axi_rng_state_WSTRB => grp_build_candidates_fu_566_m_axi_rng_state_WSTRB,
        m_axi_rng_state_WLAST => grp_build_candidates_fu_566_m_axi_rng_state_WLAST,
        m_axi_rng_state_WID => grp_build_candidates_fu_566_m_axi_rng_state_WID,
        m_axi_rng_state_WUSER => grp_build_candidates_fu_566_m_axi_rng_state_WUSER,
        m_axi_rng_state_ARVALID => grp_build_candidates_fu_566_m_axi_rng_state_ARVALID,
        m_axi_rng_state_ARREADY => hostmem_ARREADY,
        m_axi_rng_state_ARADDR => grp_build_candidates_fu_566_m_axi_rng_state_ARADDR,
        m_axi_rng_state_ARID => grp_build_candidates_fu_566_m_axi_rng_state_ARID,
        m_axi_rng_state_ARLEN => grp_build_candidates_fu_566_m_axi_rng_state_ARLEN,
        m_axi_rng_state_ARSIZE => grp_build_candidates_fu_566_m_axi_rng_state_ARSIZE,
        m_axi_rng_state_ARBURST => grp_build_candidates_fu_566_m_axi_rng_state_ARBURST,
        m_axi_rng_state_ARLOCK => grp_build_candidates_fu_566_m_axi_rng_state_ARLOCK,
        m_axi_rng_state_ARCACHE => grp_build_candidates_fu_566_m_axi_rng_state_ARCACHE,
        m_axi_rng_state_ARPROT => grp_build_candidates_fu_566_m_axi_rng_state_ARPROT,
        m_axi_rng_state_ARQOS => grp_build_candidates_fu_566_m_axi_rng_state_ARQOS,
        m_axi_rng_state_ARREGION => grp_build_candidates_fu_566_m_axi_rng_state_ARREGION,
        m_axi_rng_state_ARUSER => grp_build_candidates_fu_566_m_axi_rng_state_ARUSER,
        m_axi_rng_state_RVALID => hostmem_RVALID,
        m_axi_rng_state_RREADY => grp_build_candidates_fu_566_m_axi_rng_state_RREADY,
        m_axi_rng_state_RDATA => hostmem_RDATA,
        m_axi_rng_state_RLAST => hostmem_RLAST,
        m_axi_rng_state_RID => hostmem_RID,
        m_axi_rng_state_RUSER => hostmem_RUSER,
        m_axi_rng_state_RRESP => hostmem_RRESP,
        m_axi_rng_state_BVALID => hostmem_BVALID,
        m_axi_rng_state_BREADY => grp_build_candidates_fu_566_m_axi_rng_state_BREADY,
        m_axi_rng_state_BRESP => hostmem_BRESP,
        m_axi_rng_state_BID => hostmem_BID,
        m_axi_rng_state_BUSER => hostmem_BUSER,
        rng_state3 => rng_state3_reg_1134,
        candidate_neighbors_s_address0 => grp_build_candidates_fu_566_candidate_neighbors_s_address0,
        candidate_neighbors_s_ce0 => grp_build_candidates_fu_566_candidate_neighbors_s_ce0,
        candidate_neighbors_s_we0 => grp_build_candidates_fu_566_candidate_neighbors_s_we0,
        candidate_neighbors_s_d0 => grp_build_candidates_fu_566_candidate_neighbors_s_d0,
        candidate_neighbors_s_q0 => candidate_neighbors_s_q0,
        candidate_neighbors_13_address0 => grp_build_candidates_fu_566_candidate_neighbors_13_address0,
        candidate_neighbors_13_ce0 => grp_build_candidates_fu_566_candidate_neighbors_13_ce0,
        candidate_neighbors_13_we0 => grp_build_candidates_fu_566_candidate_neighbors_13_we0,
        candidate_neighbors_13_d0 => grp_build_candidates_fu_566_candidate_neighbors_13_d0,
        candidate_neighbors_13_q0 => candidate_neighbors_1_q0,
        candidate_neighbors_14_address0 => grp_build_candidates_fu_566_candidate_neighbors_14_address0,
        candidate_neighbors_14_ce0 => grp_build_candidates_fu_566_candidate_neighbors_14_ce0,
        candidate_neighbors_14_we0 => grp_build_candidates_fu_566_candidate_neighbors_14_we0,
        candidate_neighbors_14_d0 => grp_build_candidates_fu_566_candidate_neighbors_14_d0,
        candidate_neighbors_14_q0 => candidate_neighbors_2_q0);

    grp_deheap_sort_fu_583 : component deheap_sort
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_deheap_sort_fu_583_ap_start,
        ap_done => grp_deheap_sort_fu_583_ap_done,
        ap_idle => grp_deheap_sort_fu_583_ap_idle,
        ap_ready => grp_deheap_sort_fu_583_ap_ready,
        current_graph_index_address0 => grp_deheap_sort_fu_583_current_graph_index_address0,
        current_graph_index_ce0 => grp_deheap_sort_fu_583_current_graph_index_ce0,
        current_graph_index_we0 => grp_deheap_sort_fu_583_current_graph_index_we0,
        current_graph_index_d0 => grp_deheap_sort_fu_583_current_graph_index_d0,
        current_graph_index_q0 => current_graph_index_q0,
        current_graph_index_address1 => grp_deheap_sort_fu_583_current_graph_index_address1,
        current_graph_index_ce1 => grp_deheap_sort_fu_583_current_graph_index_ce1,
        current_graph_index_we1 => grp_deheap_sort_fu_583_current_graph_index_we1,
        current_graph_index_d1 => grp_deheap_sort_fu_583_current_graph_index_d1,
        current_graph_index_q1 => current_graph_index_q1,
        current_graph_dist_address0 => grp_deheap_sort_fu_583_current_graph_dist_address0,
        current_graph_dist_ce0 => grp_deheap_sort_fu_583_current_graph_dist_ce0,
        current_graph_dist_we0 => grp_deheap_sort_fu_583_current_graph_dist_we0,
        current_graph_dist_d0 => grp_deheap_sort_fu_583_current_graph_dist_d0,
        current_graph_dist_q0 => current_graph_dist_q0,
        current_graph_dist_address1 => grp_deheap_sort_fu_583_current_graph_dist_address1,
        current_graph_dist_ce1 => grp_deheap_sort_fu_583_current_graph_dist_ce1,
        current_graph_dist_we1 => grp_deheap_sort_fu_583_current_graph_dist_we1,
        current_graph_dist_d1 => grp_deheap_sort_fu_583_current_graph_dist_d1,
        current_graph_dist_q1 => current_graph_dist_q1,
        current_graph_flag_address0 => grp_deheap_sort_fu_583_current_graph_flag_address0,
        current_graph_flag_ce0 => grp_deheap_sort_fu_583_current_graph_flag_ce0,
        current_graph_flag_we0 => grp_deheap_sort_fu_583_current_graph_flag_we0,
        current_graph_flag_d0 => grp_deheap_sort_fu_583_current_graph_flag_d0,
        current_graph_flag_q0 => current_graph_flag_q0,
        current_graph_flag_address1 => grp_deheap_sort_fu_583_current_graph_flag_address1,
        current_graph_flag_ce1 => grp_deheap_sort_fu_583_current_graph_flag_ce1,
        current_graph_flag_we1 => grp_deheap_sort_fu_583_current_graph_flag_we1,
        current_graph_flag_d1 => grp_deheap_sort_fu_583_current_graph_flag_d1,
        current_graph_flag_q1 => current_graph_flag_q1,
        result_index_address0 => grp_deheap_sort_fu_583_result_index_address0,
        result_index_ce0 => grp_deheap_sort_fu_583_result_index_ce0,
        result_index_we0 => grp_deheap_sort_fu_583_result_index_we0,
        result_index_d0 => grp_deheap_sort_fu_583_result_index_d0,
        result_dist_address0 => grp_deheap_sort_fu_583_result_dist_address0,
        result_dist_ce0 => grp_deheap_sort_fu_583_result_dist_ce0,
        result_dist_we0 => grp_deheap_sort_fu_583_result_dist_we0,
        result_dist_d0 => grp_deheap_sort_fu_583_result_dist_d0);

    grp_rejection_sample_fu_595 : component rejection_sample
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_rejection_sample_fu_595_ap_start,
        ap_done => grp_rejection_sample_fu_595_ap_done,
        ap_idle => grp_rejection_sample_fu_595_ap_idle,
        ap_ready => grp_rejection_sample_fu_595_ap_ready,
        m_axi_rng_state_AWVALID => grp_rejection_sample_fu_595_m_axi_rng_state_AWVALID,
        m_axi_rng_state_AWREADY => hostmem_AWREADY,
        m_axi_rng_state_AWADDR => grp_rejection_sample_fu_595_m_axi_rng_state_AWADDR,
        m_axi_rng_state_AWID => grp_rejection_sample_fu_595_m_axi_rng_state_AWID,
        m_axi_rng_state_AWLEN => grp_rejection_sample_fu_595_m_axi_rng_state_AWLEN,
        m_axi_rng_state_AWSIZE => grp_rejection_sample_fu_595_m_axi_rng_state_AWSIZE,
        m_axi_rng_state_AWBURST => grp_rejection_sample_fu_595_m_axi_rng_state_AWBURST,
        m_axi_rng_state_AWLOCK => grp_rejection_sample_fu_595_m_axi_rng_state_AWLOCK,
        m_axi_rng_state_AWCACHE => grp_rejection_sample_fu_595_m_axi_rng_state_AWCACHE,
        m_axi_rng_state_AWPROT => grp_rejection_sample_fu_595_m_axi_rng_state_AWPROT,
        m_axi_rng_state_AWQOS => grp_rejection_sample_fu_595_m_axi_rng_state_AWQOS,
        m_axi_rng_state_AWREGION => grp_rejection_sample_fu_595_m_axi_rng_state_AWREGION,
        m_axi_rng_state_AWUSER => grp_rejection_sample_fu_595_m_axi_rng_state_AWUSER,
        m_axi_rng_state_WVALID => grp_rejection_sample_fu_595_m_axi_rng_state_WVALID,
        m_axi_rng_state_WREADY => hostmem_WREADY,
        m_axi_rng_state_WDATA => grp_rejection_sample_fu_595_m_axi_rng_state_WDATA,
        m_axi_rng_state_WSTRB => grp_rejection_sample_fu_595_m_axi_rng_state_WSTRB,
        m_axi_rng_state_WLAST => grp_rejection_sample_fu_595_m_axi_rng_state_WLAST,
        m_axi_rng_state_WID => grp_rejection_sample_fu_595_m_axi_rng_state_WID,
        m_axi_rng_state_WUSER => grp_rejection_sample_fu_595_m_axi_rng_state_WUSER,
        m_axi_rng_state_ARVALID => grp_rejection_sample_fu_595_m_axi_rng_state_ARVALID,
        m_axi_rng_state_ARREADY => hostmem_ARREADY,
        m_axi_rng_state_ARADDR => grp_rejection_sample_fu_595_m_axi_rng_state_ARADDR,
        m_axi_rng_state_ARID => grp_rejection_sample_fu_595_m_axi_rng_state_ARID,
        m_axi_rng_state_ARLEN => grp_rejection_sample_fu_595_m_axi_rng_state_ARLEN,
        m_axi_rng_state_ARSIZE => grp_rejection_sample_fu_595_m_axi_rng_state_ARSIZE,
        m_axi_rng_state_ARBURST => grp_rejection_sample_fu_595_m_axi_rng_state_ARBURST,
        m_axi_rng_state_ARLOCK => grp_rejection_sample_fu_595_m_axi_rng_state_ARLOCK,
        m_axi_rng_state_ARCACHE => grp_rejection_sample_fu_595_m_axi_rng_state_ARCACHE,
        m_axi_rng_state_ARPROT => grp_rejection_sample_fu_595_m_axi_rng_state_ARPROT,
        m_axi_rng_state_ARQOS => grp_rejection_sample_fu_595_m_axi_rng_state_ARQOS,
        m_axi_rng_state_ARREGION => grp_rejection_sample_fu_595_m_axi_rng_state_ARREGION,
        m_axi_rng_state_ARUSER => grp_rejection_sample_fu_595_m_axi_rng_state_ARUSER,
        m_axi_rng_state_RVALID => hostmem_RVALID,
        m_axi_rng_state_RREADY => grp_rejection_sample_fu_595_m_axi_rng_state_RREADY,
        m_axi_rng_state_RDATA => hostmem_RDATA,
        m_axi_rng_state_RLAST => hostmem_RLAST,
        m_axi_rng_state_RID => hostmem_RID,
        m_axi_rng_state_RUSER => hostmem_RUSER,
        m_axi_rng_state_RRESP => hostmem_RRESP,
        m_axi_rng_state_BVALID => hostmem_BVALID,
        m_axi_rng_state_BREADY => grp_rejection_sample_fu_595_m_axi_rng_state_BREADY,
        m_axi_rng_state_BRESP => hostmem_BRESP,
        m_axi_rng_state_BID => hostmem_BID,
        m_axi_rng_state_BUSER => hostmem_BUSER,
        rng_state3 => rng_state3_reg_1134,
        result_address0 => grp_rejection_sample_fu_595_result_address0,
        result_ce0 => grp_rejection_sample_fu_595_result_ce0,
        result_we0 => grp_rejection_sample_fu_595_result_we0,
        result_d0 => grp_rejection_sample_fu_595_result_d0,
        result_q0 => indices_q0);

    grp_tau_rand_fu_604 : component tau_rand
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_tau_rand_fu_604_ap_start,
        ap_done => grp_tau_rand_fu_604_ap_done,
        ap_idle => grp_tau_rand_fu_604_ap_idle,
        ap_ready => grp_tau_rand_fu_604_ap_ready,
        m_axi_state_AWVALID => grp_tau_rand_fu_604_m_axi_state_AWVALID,
        m_axi_state_AWREADY => hostmem_AWREADY,
        m_axi_state_AWADDR => grp_tau_rand_fu_604_m_axi_state_AWADDR,
        m_axi_state_AWID => grp_tau_rand_fu_604_m_axi_state_AWID,
        m_axi_state_AWLEN => grp_tau_rand_fu_604_m_axi_state_AWLEN,
        m_axi_state_AWSIZE => grp_tau_rand_fu_604_m_axi_state_AWSIZE,
        m_axi_state_AWBURST => grp_tau_rand_fu_604_m_axi_state_AWBURST,
        m_axi_state_AWLOCK => grp_tau_rand_fu_604_m_axi_state_AWLOCK,
        m_axi_state_AWCACHE => grp_tau_rand_fu_604_m_axi_state_AWCACHE,
        m_axi_state_AWPROT => grp_tau_rand_fu_604_m_axi_state_AWPROT,
        m_axi_state_AWQOS => grp_tau_rand_fu_604_m_axi_state_AWQOS,
        m_axi_state_AWREGION => grp_tau_rand_fu_604_m_axi_state_AWREGION,
        m_axi_state_AWUSER => grp_tau_rand_fu_604_m_axi_state_AWUSER,
        m_axi_state_WVALID => grp_tau_rand_fu_604_m_axi_state_WVALID,
        m_axi_state_WREADY => hostmem_WREADY,
        m_axi_state_WDATA => grp_tau_rand_fu_604_m_axi_state_WDATA,
        m_axi_state_WSTRB => grp_tau_rand_fu_604_m_axi_state_WSTRB,
        m_axi_state_WLAST => grp_tau_rand_fu_604_m_axi_state_WLAST,
        m_axi_state_WID => grp_tau_rand_fu_604_m_axi_state_WID,
        m_axi_state_WUSER => grp_tau_rand_fu_604_m_axi_state_WUSER,
        m_axi_state_ARVALID => grp_tau_rand_fu_604_m_axi_state_ARVALID,
        m_axi_state_ARREADY => hostmem_ARREADY,
        m_axi_state_ARADDR => grp_tau_rand_fu_604_m_axi_state_ARADDR,
        m_axi_state_ARID => grp_tau_rand_fu_604_m_axi_state_ARID,
        m_axi_state_ARLEN => grp_tau_rand_fu_604_m_axi_state_ARLEN,
        m_axi_state_ARSIZE => grp_tau_rand_fu_604_m_axi_state_ARSIZE,
        m_axi_state_ARBURST => grp_tau_rand_fu_604_m_axi_state_ARBURST,
        m_axi_state_ARLOCK => grp_tau_rand_fu_604_m_axi_state_ARLOCK,
        m_axi_state_ARCACHE => grp_tau_rand_fu_604_m_axi_state_ARCACHE,
        m_axi_state_ARPROT => grp_tau_rand_fu_604_m_axi_state_ARPROT,
        m_axi_state_ARQOS => grp_tau_rand_fu_604_m_axi_state_ARQOS,
        m_axi_state_ARREGION => grp_tau_rand_fu_604_m_axi_state_ARREGION,
        m_axi_state_ARUSER => grp_tau_rand_fu_604_m_axi_state_ARUSER,
        m_axi_state_RVALID => hostmem_RVALID,
        m_axi_state_RREADY => grp_tau_rand_fu_604_m_axi_state_RREADY,
        m_axi_state_RDATA => hostmem_RDATA,
        m_axi_state_RLAST => hostmem_RLAST,
        m_axi_state_RID => hostmem_RID,
        m_axi_state_RUSER => hostmem_RUSER,
        m_axi_state_RRESP => hostmem_RRESP,
        m_axi_state_BVALID => hostmem_BVALID,
        m_axi_state_BREADY => grp_tau_rand_fu_604_m_axi_state_BREADY,
        m_axi_state_BRESP => hostmem_BRESP,
        m_axi_state_BID => hostmem_BID,
        m_axi_state_BUSER => hostmem_BUSER,
        rng_state3 => rng_state3_reg_1134,
        ap_return => grp_tau_rand_fu_604_ap_return);

    grp_heap_push_opt_fu_611 : component heap_push_opt
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_heap_push_opt_fu_611_ap_start,
        ap_done => grp_heap_push_opt_fu_611_ap_done,
        ap_idle => grp_heap_push_opt_fu_611_ap_idle,
        ap_ready => grp_heap_push_opt_fu_611_ap_ready,
        current_graph_index_address0 => grp_heap_push_opt_fu_611_current_graph_index_address0,
        current_graph_index_ce0 => grp_heap_push_opt_fu_611_current_graph_index_ce0,
        current_graph_index_we0 => grp_heap_push_opt_fu_611_current_graph_index_we0,
        current_graph_index_d0 => grp_heap_push_opt_fu_611_current_graph_index_d0,
        current_graph_index_q0 => current_graph_index_q0,
        current_graph_index_address1 => grp_heap_push_opt_fu_611_current_graph_index_address1,
        current_graph_index_ce1 => grp_heap_push_opt_fu_611_current_graph_index_ce1,
        current_graph_index_we1 => grp_heap_push_opt_fu_611_current_graph_index_we1,
        current_graph_index_d1 => grp_heap_push_opt_fu_611_current_graph_index_d1,
        current_graph_index_q1 => current_graph_index_q1,
        current_graph_dist_address0 => grp_heap_push_opt_fu_611_current_graph_dist_address0,
        current_graph_dist_ce0 => grp_heap_push_opt_fu_611_current_graph_dist_ce0,
        current_graph_dist_we0 => grp_heap_push_opt_fu_611_current_graph_dist_we0,
        current_graph_dist_d0 => grp_heap_push_opt_fu_611_current_graph_dist_d0,
        current_graph_dist_q0 => current_graph_dist_q0,
        current_graph_dist_address1 => grp_heap_push_opt_fu_611_current_graph_dist_address1,
        current_graph_dist_ce1 => grp_heap_push_opt_fu_611_current_graph_dist_ce1,
        current_graph_dist_we1 => grp_heap_push_opt_fu_611_current_graph_dist_we1,
        current_graph_dist_d1 => grp_heap_push_opt_fu_611_current_graph_dist_d1,
        current_graph_dist_q1 => current_graph_dist_q1,
        current_graph_flag_address0 => grp_heap_push_opt_fu_611_current_graph_flag_address0,
        current_graph_flag_ce0 => grp_heap_push_opt_fu_611_current_graph_flag_ce0,
        current_graph_flag_we0 => grp_heap_push_opt_fu_611_current_graph_flag_we0,
        current_graph_flag_d0 => grp_heap_push_opt_fu_611_current_graph_flag_d0,
        current_graph_flag_q0 => current_graph_flag_q0,
        current_graph_flag_address1 => grp_heap_push_opt_fu_611_current_graph_flag_address1,
        current_graph_flag_ce1 => grp_heap_push_opt_fu_611_current_graph_flag_ce1,
        current_graph_flag_we1 => grp_heap_push_opt_fu_611_current_graph_flag_we1,
        current_graph_flag_d1 => grp_heap_push_opt_fu_611_current_graph_flag_d1,
        current_graph_flag_q1 => current_graph_flag_q1,
        row => q_reg_1381);

    grp_heap_push_fu_622 : component heap_push
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_heap_push_fu_622_ap_start,
        ap_done => grp_heap_push_fu_622_ap_done,
        ap_idle => grp_heap_push_fu_622_ap_idle,
        ap_ready => grp_heap_push_fu_622_ap_ready,
        current_graph_index_address0 => grp_heap_push_fu_622_current_graph_index_address0,
        current_graph_index_ce0 => grp_heap_push_fu_622_current_graph_index_ce0,
        current_graph_index_we0 => grp_heap_push_fu_622_current_graph_index_we0,
        current_graph_index_d0 => grp_heap_push_fu_622_current_graph_index_d0,
        current_graph_index_q0 => current_graph_index_q0,
        current_graph_dist_address0 => grp_heap_push_fu_622_current_graph_dist_address0,
        current_graph_dist_ce0 => grp_heap_push_fu_622_current_graph_dist_ce0,
        current_graph_dist_we0 => grp_heap_push_fu_622_current_graph_dist_we0,
        current_graph_dist_d0 => grp_heap_push_fu_622_current_graph_dist_d0,
        current_graph_dist_q0 => current_graph_dist_q0,
        current_graph_flag_address0 => grp_heap_push_fu_622_current_graph_flag_address0,
        current_graph_flag_ce0 => grp_heap_push_fu_622_current_graph_flag_ce0,
        current_graph_flag_we0 => grp_heap_push_fu_622_current_graph_flag_we0,
        current_graph_flag_d0 => grp_heap_push_fu_622_current_graph_flag_d0,
        current_graph_flag_q0 => current_graph_flag_q0,
        row => grp_heap_push_fu_622_row,
        weight => d_reg_466,
        index => grp_heap_push_fu_622_index);

    nn_descent_mul_32lbW_U39 : component nn_descent_mul_32lbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_i_reg_1266,
        din1 => tmp_i_reg_1266,
        ce => ap_const_logic_1,
        dout => grp_fu_916_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state9 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state42))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state41) and not(((ap_const_logic_0 = ap_sig_ioackin_hostmem_AWREADY) or (ap_const_logic_0 = grp_deheap_sort_fu_583_ap_done))))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state42)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_condition_pp1_exit_iter0_state42 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state41) and not(((ap_const_logic_0 = ap_sig_ioackin_hostmem_AWREADY) or (ap_const_logic_0 = grp_deheap_sort_fu_583_ap_done))))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state50))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state49) and not(((ap_const_logic_0 = ap_sig_ioackin_hostmem_AWREADY) or (ap_const_logic_0 = hostmem_BVALID))))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state50)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_condition_pp2_exit_iter0_state50 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state49) and not(((ap_const_logic_0 = ap_sig_ioackin_hostmem_AWREADY) or (ap_const_logic_0 = hostmem_BVALID))))) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_build_candidates_fu_566_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_build_candidates_fu_566_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = exitcond4_fu_935_p2))) then 
                    ap_reg_grp_build_candidates_fu_566_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_build_candidates_fu_566_ap_ready)) then 
                    ap_reg_grp_build_candidates_fu_566_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_deheap_sort_fu_583_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_deheap_sort_fu_583_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_1 = exitcond2_fu_1000_p2))) then 
                    ap_reg_grp_deheap_sort_fu_583_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_deheap_sort_fu_583_ap_ready)) then 
                    ap_reg_grp_deheap_sort_fu_583_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_heap_push_fu_622_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_heap_push_fu_622_ap_start <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state19) and (exitcond_i_fu_869_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                    ap_reg_grp_heap_push_fu_622_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_heap_push_fu_622_ap_ready)) then 
                    ap_reg_grp_heap_push_fu_622_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_heap_push_opt_fu_611_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_heap_push_opt_fu_611_ap_start <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state37) and (((ap_const_lv1_0 = tmp_17_reg_1386) and (ap_const_lv1_0 = tmp_36_reg_1390)) or ((ap_const_lv1_0 = tmp_17_reg_1386) and (ap_const_lv1_0 = grp_fu_645_p2)))) or (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                    ap_reg_grp_heap_push_opt_fu_611_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_heap_push_opt_fu_611_ap_ready)) then 
                    ap_reg_grp_heap_push_opt_fu_611_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_rejection_sample_fu_595_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_rejection_sample_fu_595_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond6_fu_805_p2))) then 
                    ap_reg_grp_rejection_sample_fu_595_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_rejection_sample_fu_595_ap_ready)) then 
                    ap_reg_grp_rejection_sample_fu_595_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_tau_rand_fu_604_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_tau_rand_fu_604_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = grp_fu_637_p3))) then 
                    ap_reg_grp_tau_rand_fu_604_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_tau_rand_fu_604_ap_ready)) then 
                    ap_reg_grp_tau_rand_fu_604_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_hostmem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_hostmem_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    if ((ap_sig_ioackin_hostmem_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_hostmem_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = hostmem_ARREADY)) then 
                        ap_reg_ioackin_hostmem_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_hostmem_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_hostmem_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state41) and not(((ap_const_logic_0 = ap_sig_ioackin_hostmem_AWREADY) or (ap_const_logic_0 = grp_deheap_sort_fu_583_ap_done)))) or ((ap_const_logic_1 = ap_CS_fsm_state49) and not(((ap_const_logic_0 = ap_sig_ioackin_hostmem_AWREADY) or (ap_const_logic_0 = hostmem_BVALID)))))) then 
                    ap_reg_ioackin_hostmem_AWREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state41) and (ap_const_logic_1 = hostmem_AWREADY) and (grp_deheap_sort_fu_583_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state49) and (ap_const_logic_1 = hostmem_AWREADY) and (hostmem_BVALID = ap_const_logic_1)))) then 
                    ap_reg_ioackin_hostmem_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_hostmem_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_hostmem_WREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_0 = ap_reg_pp1_iter1_exitcond10_reg_1403) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_reg_pp2_iter1_exitcond11_reg_1422 = ap_const_lv1_0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0)))) then 
                    ap_reg_ioackin_hostmem_WREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_0 = ap_reg_pp1_iter1_exitcond10_reg_1403) and (ap_const_logic_1 = hostmem_WREADY) and (ap_block_pp1_stage0_flag00001001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_reg_pp2_iter1_exitcond11_reg_1422 = ap_const_lv1_0) and (ap_const_logic_1 = hostmem_WREADY) and (ap_block_pp2_stage0_flag00001001 = ap_const_boolean_0)))) then 
                    ap_reg_ioackin_hostmem_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    d_reg_466_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                d_reg_466 <= result_1_fu_920_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                d_reg_466 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i2_reg_511_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_const_lv1_1 = exitcond1_fu_1042_p2))) then 
                i2_reg_511 <= i_3_reg_1321;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state29) and (grp_build_candidates_fu_566_ap_done = ap_const_logic_1))) then 
                i2_reg_511 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_i_reg_478_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                i_i_reg_478 <= i_4_reg_1246;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                i_i_reg_478 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i_neighbor1_reg_500_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_0 = exitcond4_fu_935_p2))) then 
                i_neighbor1_reg_500 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_0 = exitcond3_fu_967_p2))) then 
                i_neighbor1_reg_500 <= i_neighbor_2_fu_973_p2;
            end if; 
        end if;
    end process;

    i_neighbor_reg_432_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = exitcond8_fu_736_p2))) then 
                i_neighbor_reg_432 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_0 = exitcond7_fu_768_p2))) then 
                i_neighbor_reg_432 <= i_neighbor_1_fu_774_p2;
            end if; 
        end if;
    end process;

    i_reg_443_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond8_fu_736_p2 = ap_const_lv1_1))) then 
                i_reg_443 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond5_fu_834_p2 = ap_const_lv1_1))) then 
                i_reg_443 <= i_2_reg_1210;
            end if; 
        end if;
    end process;

    indvar1_reg_544_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond10_fu_1090_p2))) then 
                indvar1_reg_544 <= indvar_next1_fu_1096_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state41) and not(((ap_const_logic_0 = ap_sig_ioackin_hostmem_AWREADY) or (ap_const_logic_0 = grp_deheap_sort_fu_583_ap_done))))) then 
                indvar1_reg_544 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar2_reg_555_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) and not(((ap_const_logic_0 = ap_sig_ioackin_hostmem_AWREADY) or (ap_const_logic_0 = hostmem_BVALID))))) then 
                indvar2_reg_555 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_const_lv1_0 = exitcond11_fu_1107_p2))) then 
                indvar2_reg_555 <= indvar_next2_fu_1113_p2;
            end if; 
        end if;
    end process;

    indvar_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond9_reg_1162) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
                indvar_reg_409 <= indvar_next_reg_1166;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvar_reg_409 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j3_reg_522_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_0 = exitcond2_fu_1000_p2))) then 
                j3_reg_522 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state34) and ((ap_const_lv1_1 = tmp_16_reg_1350) or (ap_const_lv1_0 = tmp_22_reg_1354) or (ap_const_lv1_1 = exitcond_fu_1068_p2)))) then 
                j3_reg_522 <= j_2_reg_1335;
            end if; 
        end if;
    end process;

    j_reg_455_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (grp_heap_push_fu_622_ap_done = ap_const_logic_1))) then 
                j_reg_455 <= j_1_reg_1223;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_rejection_sample_fu_595_ap_done = ap_const_logic_1))) then 
                j_reg_455 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_reg_533_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350) and (ap_block_state33_on_subcall_done = ap_const_boolean_0) and (ap_const_lv1_1 = grp_tau_rand_fu_604_ap_return))) then 
                k_reg_533 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_block_state40_on_subcall_done = ap_const_boolean_0))) then 
                k_reg_533 <= k_2_reg_1366;
            end if; 
        end if;
    end process;

    n_point_reg_489_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_1 = exitcond6_fu_805_p2))) then 
                n_point_reg_489 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = exitcond3_fu_967_p2))) then 
                n_point_reg_489 <= n_point_1_reg_1295;
            end if; 
        end if;
    end process;

    n_points_reg_421_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                n_points_reg_421 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_1 = exitcond7_fu_768_p2))) then 
                n_points_reg_421 <= n_points_1_reg_1179;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond9_reg_1162 <= exitcond9_reg_1162;
                ap_reg_pp0_iter1_indvar_reg_409 <= indvar_reg_409;
                exitcond9_reg_1162 <= exitcond9_fu_719_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp1_iter1_exitcond10_reg_1403 <= exitcond10_reg_1403;
                exitcond10_reg_1403 <= exitcond10_fu_1090_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp2_iter1_exitcond11_reg_1422 <= exitcond11_reg_1422;
                exitcond11_reg_1422 <= exitcond11_fu_1107_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350) and (ap_block_state33_on_subcall_done = ap_const_boolean_0) and (ap_const_lv1_1 = grp_tau_rand_fu_604_ap_return))) then
                candidate_neighbors_6_reg_1358 <= tmp_32_reg_1340(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                data_in1_reg_1141 <= data_in(31 downto 2);
                result_out_dist7_reg_1124 <= result_out_dist(31 downto 2);
                result_out_index5_reg_1129 <= result_out_index(31 downto 2);
                rng_state3_reg_1134 <= rng_state(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                extLd_cast_reg_1282 <= extLd_cast_fu_925_p1;
                    i_cast_cast_reg_1287(6 downto 0) <= i_cast_cast_fu_930_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    hostmem_addr_1_reg_1157(29 downto 0) <= tmp_19_fu_710_p1(32 - 1 downto 0)(29 downto 0);
                    hostmem_addr_reg_1152(29 downto 0) <= tmp_18_fu_701_p1(32 - 1 downto 0)(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = exitcond9_reg_1162) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                hostmem_addr_2_read_reg_1171 <= hostmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                i_2_reg_1210 <= i_2_fu_811_p2;
                    i_cast1_reg_1202(6 downto 0) <= i_cast1_fu_801_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                i_3_reg_1321 <= i_3_fu_1006_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                i_4_reg_1246 <= i_4_fu_875_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (exitcond_i_fu_869_p2 = ap_const_lv1_1))) then
                    i_cast_cast1_reg_1261(6 downto 0) <= i_cast_cast1_fu_905_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_0 = exitcond5_fu_834_p2))) then
                indices_addr_reg_1228 <= tmp_25_fu_846_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                indices_load_reg_1233 <= indices_q0;
                tmp_26_reg_1238 <= tmp_26_fu_863_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then
                indvar_next_reg_1166 <= indvar_next_fu_725_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                j_1_reg_1223 <= j_1_fu_840_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                j_2_reg_1335 <= j_2_fu_1048_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = tmp_16_reg_1350) and (ap_const_logic_1 = ap_CS_fsm_state34) and (ap_const_lv1_1 = tmp_22_reg_1354))) then
                k_2_reg_1366 <= k_2_fu_1074_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                n_point_1_reg_1295 <= n_point_1_fu_941_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                n_points_1_reg_1179 <= n_points_1_fu_742_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_0 = exitcond4_fu_935_p2))) then
                    p_shl3_reg_1300(10 downto 4) <= p_shl3_fu_947_p3(10 downto 4);
                    p_shl4_reg_1305(8 downto 2) <= p_shl4_fu_955_p3(8 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = exitcond8_fu_736_p2))) then
                    p_shl9_reg_1189(7 downto 1) <= p_shl9_fu_756_p3(7 downto 1);
                    p_shl_reg_1184(9 downto 3) <= p_shl_fu_748_p3(9 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                q_reg_1381 <= candidate_neighbors_s_q0;
                tmp_17_reg_1386 <= candidate_neighbors_s_q0(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (exitcond11_reg_1422 = ap_const_lv1_0))) then
                result_dist_load_reg_1436 <= result_dist_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond10_reg_1403))) then
                result_index_load_reg_1417 <= result_index_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                tmp_126_i_reg_1272 <= grp_fu_916_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                tmp_16_reg_1350 <= candidate_neighbors_s_q0(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350) and (ap_block_state33_on_subcall_done = ap_const_boolean_0))) then
                tmp_22_reg_1354 <= grp_tau_rand_fu_604_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_0 = exitcond2_fu_1000_p2))) then
                    tmp_27_reg_1326(10 downto 2) <= tmp_27_fu_1032_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_const_lv1_0 = exitcond1_fu_1042_p2))) then
                    tmp_32_reg_1340(10 downto 0) <= tmp_32_fu_1059_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = tmp_16_reg_1350) and (ap_const_logic_1 = ap_CS_fsm_state34) and (ap_const_lv1_1 = tmp_22_reg_1354) and (ap_const_lv1_0 = exitcond_fu_1068_p2))) then
                    tmp_35_reg_1371(10 downto 0) <= tmp_35_fu_1085_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                tmp_36_reg_1390 <= grp_fu_645_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) and (ap_const_lv1_0 = tmp_17_reg_1386) and (ap_const_lv1_1 = tmp_36_reg_1390))) then
                tmp_37_reg_1399 <= grp_fu_645_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                tmp_i_reg_1266 <= tmp_i_fu_910_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_rejection_sample_fu_595_ap_done = ap_const_logic_1))) then
                tmp_s_reg_1215 <= tmp_s_fu_829_p2;
            end if;
        end if;
    end process;
    hostmem_addr_reg_1152(31 downto 30) <= "00";
    hostmem_addr_1_reg_1157(31 downto 30) <= "00";
    p_shl_reg_1184(2 downto 0) <= "000";
    p_shl9_reg_1189(0) <= '0';
    i_cast1_reg_1202(9 downto 7) <= "000";
    i_cast_cast1_reg_1261(8 downto 7) <= "00";
    i_cast_cast_reg_1287(7) <= '0';
    p_shl3_reg_1300(3 downto 0) <= "0000";
    p_shl4_reg_1305(1 downto 0) <= "00";
    tmp_27_reg_1326(1 downto 0) <= "00";
    tmp_32_reg_1340(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    tmp_35_reg_1371(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state49, ap_enable_reg_pp2_iter2, ap_CS_fsm_state57, ap_CS_fsm_state41, ap_enable_reg_pp1_iter2, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, hostmem_BVALID, ap_sig_ioackin_hostmem_ARREADY, exitcond9_fu_719_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state13, exitcond8_fu_736_p2, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, grp_rejection_sample_fu_595_ap_done, ap_CS_fsm_state17, exitcond5_fu_834_p2, ap_CS_fsm_state19, exitcond_i_fu_869_p2, ap_CS_fsm_state27, exitcond4_fu_935_p2, ap_CS_fsm_state28, ap_CS_fsm_state30, exitcond2_fu_1000_p2, ap_CS_fsm_state31, exitcond1_fu_1042_p2, grp_fu_637_p3, tmp_16_reg_1350, tmp_22_reg_1354, ap_CS_fsm_state33, ap_block_state33_on_subcall_done, ap_CS_fsm_state34, exitcond_fu_1068_p2, ap_CS_fsm_state35, tmp_17_reg_1386, grp_fu_645_p2, tmp_36_reg_1390, ap_CS_fsm_state37, exitcond10_fu_1090_p2, ap_enable_reg_pp1_iter0, exitcond11_fu_1107_p2, ap_enable_reg_pp2_iter0, ap_block_pp0_stage0_flag00011011, ap_enable_reg_pp0_iter2, ap_sig_ioackin_hostmem_AWREADY, grp_deheap_sort_fu_583_ap_done, ap_block_pp1_stage0_flag00011011, ap_enable_reg_pp1_iter1, ap_block_pp2_stage0_flag00011011, ap_enable_reg_pp2_iter1, grp_build_candidates_fu_566_ap_done, grp_heap_push_opt_fu_611_ap_done, grp_heap_push_fu_622_ap_done, exitcond7_fu_768_p2, ap_CS_fsm_state26, exitcond3_fu_967_p2, exitcond6_fu_805_p2, ap_CS_fsm_state29, ap_CS_fsm_state40, ap_block_state40_on_subcall_done, ap_CS_fsm_state38, ap_CS_fsm_state24)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_sig_ioackin_hostmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond9_fu_719_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond9_fu_719_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond8_fu_736_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_1 = exitcond7_fu_768_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_1 = exitcond6_fu_805_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_rejection_sample_fu_595_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond5_fu_834_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (exitcond_i_fu_869_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state24 => 
                if (((grp_heap_push_fu_622_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (grp_heap_push_fu_622_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_0 = exitcond4_fu_935_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = exitcond3_fu_967_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state29) and (grp_build_candidates_fu_566_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_0 = exitcond2_fu_1000_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_const_lv1_1 = exitcond1_fu_1042_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_block_state33_on_subcall_done = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state34) and ((ap_const_lv1_1 = tmp_16_reg_1350) or (ap_const_lv1_0 = tmp_22_reg_1354) or (ap_const_lv1_1 = exitcond_fu_1068_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state35 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state35) and (ap_const_lv1_1 = grp_fu_637_p3))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state37) and ((ap_const_lv1_1 = tmp_17_reg_1386) or ((ap_const_lv1_1 = grp_fu_645_p2) and (ap_const_lv1_1 = tmp_36_reg_1390))))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state38) and (grp_heap_push_opt_fu_611_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_block_state40_on_subcall_done = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state41) and not(((ap_const_logic_0 = ap_sig_ioackin_hostmem_AWREADY) or (ap_const_logic_0 = grp_deheap_sort_fu_583_ap_done))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond10_fu_1090_p2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond10_fu_1090_p2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state49) and not(((ap_const_logic_0 = ap_sig_ioackin_hostmem_AWREADY) or (ap_const_logic_0 = hostmem_BVALID))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond11_fu_1107_p2) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond11_fu_1107_p2) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state57) and (hostmem_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(39);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(45);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(17);
    ap_CS_fsm_state21 <= ap_CS_fsm(18);
    ap_CS_fsm_state22 <= ap_CS_fsm(19);
    ap_CS_fsm_state23 <= ap_CS_fsm(20);
    ap_CS_fsm_state24 <= ap_CS_fsm(21);
    ap_CS_fsm_state25 <= ap_CS_fsm(22);
    ap_CS_fsm_state26 <= ap_CS_fsm(23);
    ap_CS_fsm_state27 <= ap_CS_fsm(24);
    ap_CS_fsm_state28 <= ap_CS_fsm(25);
    ap_CS_fsm_state29 <= ap_CS_fsm(26);
    ap_CS_fsm_state30 <= ap_CS_fsm(27);
    ap_CS_fsm_state31 <= ap_CS_fsm(28);
    ap_CS_fsm_state32 <= ap_CS_fsm(29);
    ap_CS_fsm_state33 <= ap_CS_fsm(30);
    ap_CS_fsm_state34 <= ap_CS_fsm(31);
    ap_CS_fsm_state35 <= ap_CS_fsm(32);
    ap_CS_fsm_state36 <= ap_CS_fsm(33);
    ap_CS_fsm_state37 <= ap_CS_fsm(34);
    ap_CS_fsm_state38 <= ap_CS_fsm(35);
    ap_CS_fsm_state39 <= ap_CS_fsm(36);
    ap_CS_fsm_state40 <= ap_CS_fsm(37);
    ap_CS_fsm_state41 <= ap_CS_fsm(38);
    ap_CS_fsm_state49 <= ap_CS_fsm(44);
    ap_CS_fsm_state57 <= ap_CS_fsm(50);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00011001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond9_reg_1162, hostmem_RVALID)
    begin
                ap_block_pp0_stage0_flag00011001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond9_reg_1162) and (ap_const_logic_0 = hostmem_RVALID));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond9_reg_1162, hostmem_RVALID)
    begin
                ap_block_pp0_stage0_flag00011011 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond9_reg_1162) and (ap_const_logic_0 = hostmem_RVALID));
    end process;

        ap_block_pp1_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00001001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_flag00011001_assign_proc : process(ap_enable_reg_pp1_iter2, ap_block_state44_io)
    begin
                ap_block_pp1_stage0_flag00011001 <= ((ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_boolean_1 = ap_block_state44_io));
    end process;


    ap_block_pp1_stage0_flag00011011_assign_proc : process(ap_enable_reg_pp1_iter2, ap_block_state44_io)
    begin
                ap_block_pp1_stage0_flag00011011 <= ((ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_boolean_1 = ap_block_state44_io));
    end process;

        ap_block_pp2_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_flag00001001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_flag00011001_assign_proc : process(ap_enable_reg_pp2_iter2, ap_block_state52_io)
    begin
                ap_block_pp2_stage0_flag00011001 <= ((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_const_boolean_1 = ap_block_state52_io));
    end process;


    ap_block_pp2_stage0_flag00011011_assign_proc : process(ap_enable_reg_pp2_iter2, ap_block_state52_io)
    begin
                ap_block_pp2_stage0_flag00011011 <= ((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_const_boolean_1 = ap_block_state52_io));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(exitcond9_reg_1162, hostmem_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= ((ap_const_lv1_0 = exitcond9_reg_1162) and (ap_const_logic_0 = hostmem_RVALID));
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state33_on_subcall_done_assign_proc : process(tmp_16_reg_1350, grp_tau_rand_fu_604_ap_done)
    begin
                ap_block_state33_on_subcall_done <= ((ap_const_logic_0 = grp_tau_rand_fu_604_ap_done) and (ap_const_lv1_0 = tmp_16_reg_1350));
    end process;


    ap_block_state40_on_subcall_done_assign_proc : process(grp_heap_push_opt_fu_611_ap_done, ap_predicate_op280_call_state40)
    begin
                ap_block_state40_on_subcall_done <= ((ap_const_logic_0 = grp_heap_push_opt_fu_611_ap_done) and (ap_const_boolean_1 = ap_predicate_op280_call_state40));
    end process;

        ap_block_state42_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state44_io_assign_proc : process(ap_reg_pp1_iter1_exitcond10_reg_1403, ap_sig_ioackin_hostmem_WREADY)
    begin
                ap_block_state44_io <= ((ap_const_lv1_0 = ap_reg_pp1_iter1_exitcond10_reg_1403) and (ap_const_logic_0 = ap_sig_ioackin_hostmem_WREADY));
    end process;

        ap_block_state44_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state52_io_assign_proc : process(ap_reg_pp2_iter1_exitcond11_reg_1422, ap_sig_ioackin_hostmem_WREADY)
    begin
                ap_block_state52_io <= ((ap_reg_pp2_iter1_exitcond11_reg_1422 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_hostmem_WREADY));
    end process;

        ap_block_state52_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(exitcond9_fu_719_p2)
    begin
        if ((exitcond9_fu_719_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state42_assign_proc : process(exitcond10_fu_1090_p2)
    begin
        if ((ap_const_lv1_1 = exitcond10_fu_1090_p2)) then 
            ap_condition_pp1_exit_iter0_state42 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state42 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state50_assign_proc : process(exitcond11_fu_1107_p2)
    begin
        if ((ap_const_lv1_1 = exitcond11_fu_1107_p2)) then 
            ap_condition_pp2_exit_iter0_state50 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state50 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state57, hostmem_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state57) and (hostmem_BVALID = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp1_iter0) and (ap_const_logic_0 = ap_enable_reg_pp1_iter1) and (ap_const_logic_0 = ap_enable_reg_pp1_iter2))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp2_iter0) and (ap_const_logic_0 = ap_enable_reg_pp2_iter1) and (ap_const_logic_0 = ap_enable_reg_pp2_iter2))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op280_call_state40_assign_proc : process(tmp_17_reg_1386, tmp_36_reg_1390, tmp_37_reg_1399)
    begin
                ap_predicate_op280_call_state40 <= (((ap_const_lv1_0 = tmp_17_reg_1386) and (ap_const_lv1_0 = tmp_36_reg_1390)) or ((ap_const_lv1_0 = tmp_17_reg_1386) and (ap_const_lv1_0 = tmp_37_reg_1399)));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state57, hostmem_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state57) and (hostmem_BVALID = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_hostmem_ARREADY_assign_proc : process(hostmem_ARREADY, ap_reg_ioackin_hostmem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_hostmem_ARREADY)) then 
            ap_sig_ioackin_hostmem_ARREADY <= hostmem_ARREADY;
        else 
            ap_sig_ioackin_hostmem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_hostmem_AWREADY_assign_proc : process(hostmem_AWREADY, ap_reg_ioackin_hostmem_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_hostmem_AWREADY)) then 
            ap_sig_ioackin_hostmem_AWREADY <= hostmem_AWREADY;
        else 
            ap_sig_ioackin_hostmem_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_hostmem_WREADY_assign_proc : process(hostmem_WREADY, ap_reg_ioackin_hostmem_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_hostmem_WREADY)) then 
            ap_sig_ioackin_hostmem_WREADY <= hostmem_WREADY;
        else 
            ap_sig_ioackin_hostmem_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    candidate_neighbors_1_address0_assign_proc : process(ap_CS_fsm_state28, grp_build_candidates_fu_566_candidate_neighbors_13_address0, ap_CS_fsm_state29, tmp_29_fu_993_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            candidate_neighbors_1_address0 <= tmp_29_fu_993_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            candidate_neighbors_1_address0 <= grp_build_candidates_fu_566_candidate_neighbors_13_address0;
        else 
            candidate_neighbors_1_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    candidate_neighbors_1_ce0_assign_proc : process(ap_CS_fsm_state28, grp_build_candidates_fu_566_candidate_neighbors_13_ce0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            candidate_neighbors_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            candidate_neighbors_1_ce0 <= grp_build_candidates_fu_566_candidate_neighbors_13_ce0;
        else 
            candidate_neighbors_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    candidate_neighbors_1_d0_assign_proc : process(ap_CS_fsm_state28, grp_build_candidates_fu_566_candidate_neighbors_13_d0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            candidate_neighbors_1_d0 <= ap_const_lv32_7FFFFFFF;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            candidate_neighbors_1_d0 <= grp_build_candidates_fu_566_candidate_neighbors_13_d0;
        else 
            candidate_neighbors_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    candidate_neighbors_1_we0_assign_proc : process(ap_CS_fsm_state28, grp_build_candidates_fu_566_candidate_neighbors_13_we0, exitcond3_fu_967_p2, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_0 = exitcond3_fu_967_p2))) then 
            candidate_neighbors_1_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            candidate_neighbors_1_we0 <= grp_build_candidates_fu_566_candidate_neighbors_13_we0;
        else 
            candidate_neighbors_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    candidate_neighbors_2_address0_assign_proc : process(ap_CS_fsm_state28, candidate_neighbors_6_reg_1358, tmp_35_reg_1371, ap_CS_fsm_state35, ap_CS_fsm_state36, grp_build_candidates_fu_566_candidate_neighbors_14_address0, ap_CS_fsm_state29, tmp_29_fu_993_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            candidate_neighbors_2_address0 <= tmp_35_reg_1371(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            candidate_neighbors_2_address0 <= candidate_neighbors_6_reg_1358;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            candidate_neighbors_2_address0 <= tmp_29_fu_993_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            candidate_neighbors_2_address0 <= grp_build_candidates_fu_566_candidate_neighbors_14_address0;
        else 
            candidate_neighbors_2_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    candidate_neighbors_2_ce0_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state35, ap_CS_fsm_state36, grp_build_candidates_fu_566_candidate_neighbors_14_ce0, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            candidate_neighbors_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            candidate_neighbors_2_ce0 <= grp_build_candidates_fu_566_candidate_neighbors_14_ce0;
        else 
            candidate_neighbors_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    candidate_neighbors_2_d0_assign_proc : process(ap_CS_fsm_state28, grp_build_candidates_fu_566_candidate_neighbors_14_d0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            candidate_neighbors_2_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            candidate_neighbors_2_d0 <= grp_build_candidates_fu_566_candidate_neighbors_14_d0;
        else 
            candidate_neighbors_2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    candidate_neighbors_2_we0_assign_proc : process(ap_CS_fsm_state28, grp_build_candidates_fu_566_candidate_neighbors_14_we0, exitcond3_fu_967_p2, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_0 = exitcond3_fu_967_p2))) then 
            candidate_neighbors_2_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            candidate_neighbors_2_we0 <= grp_build_candidates_fu_566_candidate_neighbors_14_we0;
        else 
            candidate_neighbors_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    candidate_neighbors_s_address0_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state31, tmp_32_fu_1059_p1, ap_CS_fsm_state34, tmp_35_fu_1085_p1, grp_build_candidates_fu_566_candidate_neighbors_s_address0, ap_CS_fsm_state29, tmp_29_fu_993_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            candidate_neighbors_s_address0 <= tmp_35_fu_1085_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            candidate_neighbors_s_address0 <= tmp_32_fu_1059_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            candidate_neighbors_s_address0 <= tmp_29_fu_993_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            candidate_neighbors_s_address0 <= grp_build_candidates_fu_566_candidate_neighbors_s_address0;
        else 
            candidate_neighbors_s_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    candidate_neighbors_s_ce0_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state31, ap_CS_fsm_state34, grp_build_candidates_fu_566_candidate_neighbors_s_ce0, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            candidate_neighbors_s_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            candidate_neighbors_s_ce0 <= grp_build_candidates_fu_566_candidate_neighbors_s_ce0;
        else 
            candidate_neighbors_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    candidate_neighbors_s_d0_assign_proc : process(ap_CS_fsm_state28, grp_build_candidates_fu_566_candidate_neighbors_s_d0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            candidate_neighbors_s_d0 <= ap_const_lv32_FFFFFFFF;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            candidate_neighbors_s_d0 <= grp_build_candidates_fu_566_candidate_neighbors_s_d0;
        else 
            candidate_neighbors_s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    candidate_neighbors_s_we0_assign_proc : process(ap_CS_fsm_state28, grp_build_candidates_fu_566_candidate_neighbors_s_we0, exitcond3_fu_967_p2, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_0 = exitcond3_fu_967_p2))) then 
            candidate_neighbors_s_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            candidate_neighbors_s_we0 <= grp_build_candidates_fu_566_candidate_neighbors_s_we0;
        else 
            candidate_neighbors_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    current_graph_dist_address0_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_state14, grp_deheap_sort_fu_583_current_graph_dist_address0, grp_heap_push_opt_fu_611_current_graph_dist_address0, grp_heap_push_fu_622_current_graph_dist_address0, ap_CS_fsm_state26, ap_CS_fsm_state40, ap_predicate_op280_call_state40, ap_CS_fsm_state38, ap_CS_fsm_state24, tmp_24_fu_794_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            current_graph_dist_address0 <= tmp_24_fu_794_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            current_graph_dist_address0 <= grp_heap_push_fu_622_current_graph_dist_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_boolean_1 = ap_predicate_op280_call_state40)))) then 
            current_graph_dist_address0 <= grp_heap_push_opt_fu_611_current_graph_dist_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            current_graph_dist_address0 <= grp_deheap_sort_fu_583_current_graph_dist_address0;
        else 
            current_graph_dist_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    current_graph_dist_address1_assign_proc : process(ap_CS_fsm_state41, grp_deheap_sort_fu_583_current_graph_dist_address1, grp_heap_push_opt_fu_611_current_graph_dist_address1, ap_CS_fsm_state40, ap_predicate_op280_call_state40, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_boolean_1 = ap_predicate_op280_call_state40)))) then 
            current_graph_dist_address1 <= grp_heap_push_opt_fu_611_current_graph_dist_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            current_graph_dist_address1 <= grp_deheap_sort_fu_583_current_graph_dist_address1;
        else 
            current_graph_dist_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    current_graph_dist_ce0_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_state14, grp_deheap_sort_fu_583_current_graph_dist_ce0, grp_heap_push_opt_fu_611_current_graph_dist_ce0, grp_heap_push_fu_622_current_graph_dist_ce0, ap_CS_fsm_state26, ap_CS_fsm_state40, ap_predicate_op280_call_state40, ap_CS_fsm_state38, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            current_graph_dist_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            current_graph_dist_ce0 <= grp_heap_push_fu_622_current_graph_dist_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_boolean_1 = ap_predicate_op280_call_state40)))) then 
            current_graph_dist_ce0 <= grp_heap_push_opt_fu_611_current_graph_dist_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            current_graph_dist_ce0 <= grp_deheap_sort_fu_583_current_graph_dist_ce0;
        else 
            current_graph_dist_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    current_graph_dist_ce1_assign_proc : process(ap_CS_fsm_state41, grp_deheap_sort_fu_583_current_graph_dist_ce1, grp_heap_push_opt_fu_611_current_graph_dist_ce1, ap_CS_fsm_state40, ap_predicate_op280_call_state40, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_boolean_1 = ap_predicate_op280_call_state40)))) then 
            current_graph_dist_ce1 <= grp_heap_push_opt_fu_611_current_graph_dist_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            current_graph_dist_ce1 <= grp_deheap_sort_fu_583_current_graph_dist_ce1;
        else 
            current_graph_dist_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    current_graph_dist_d0_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_state14, grp_deheap_sort_fu_583_current_graph_dist_d0, grp_heap_push_opt_fu_611_current_graph_dist_d0, grp_heap_push_fu_622_current_graph_dist_d0, ap_CS_fsm_state26, ap_CS_fsm_state40, ap_predicate_op280_call_state40, ap_CS_fsm_state38, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            current_graph_dist_d0 <= ap_const_lv32_7FFFFFFF;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            current_graph_dist_d0 <= grp_heap_push_fu_622_current_graph_dist_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_boolean_1 = ap_predicate_op280_call_state40)))) then 
            current_graph_dist_d0 <= grp_heap_push_opt_fu_611_current_graph_dist_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            current_graph_dist_d0 <= grp_deheap_sort_fu_583_current_graph_dist_d0;
        else 
            current_graph_dist_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    current_graph_dist_d1_assign_proc : process(ap_CS_fsm_state41, grp_deheap_sort_fu_583_current_graph_dist_d1, grp_heap_push_opt_fu_611_current_graph_dist_d1, ap_CS_fsm_state40, ap_predicate_op280_call_state40, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_boolean_1 = ap_predicate_op280_call_state40)))) then 
            current_graph_dist_d1 <= grp_heap_push_opt_fu_611_current_graph_dist_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            current_graph_dist_d1 <= grp_deheap_sort_fu_583_current_graph_dist_d1;
        else 
            current_graph_dist_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    current_graph_dist_we0_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_state14, grp_deheap_sort_fu_583_current_graph_dist_we0, grp_heap_push_opt_fu_611_current_graph_dist_we0, grp_heap_push_fu_622_current_graph_dist_we0, exitcond7_fu_768_p2, ap_CS_fsm_state26, ap_CS_fsm_state40, ap_predicate_op280_call_state40, ap_CS_fsm_state38, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_0 = exitcond7_fu_768_p2))) then 
            current_graph_dist_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            current_graph_dist_we0 <= grp_heap_push_fu_622_current_graph_dist_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_boolean_1 = ap_predicate_op280_call_state40)))) then 
            current_graph_dist_we0 <= grp_heap_push_opt_fu_611_current_graph_dist_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            current_graph_dist_we0 <= grp_deheap_sort_fu_583_current_graph_dist_we0;
        else 
            current_graph_dist_we0 <= ap_const_logic_0;
        end if; 
    end process;


    current_graph_dist_we1_assign_proc : process(ap_CS_fsm_state41, grp_deheap_sort_fu_583_current_graph_dist_we1, grp_heap_push_opt_fu_611_current_graph_dist_we1, ap_CS_fsm_state40, ap_predicate_op280_call_state40, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_boolean_1 = ap_predicate_op280_call_state40)))) then 
            current_graph_dist_we1 <= grp_heap_push_opt_fu_611_current_graph_dist_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            current_graph_dist_we1 <= grp_deheap_sort_fu_583_current_graph_dist_we1;
        else 
            current_graph_dist_we1 <= ap_const_logic_0;
        end if; 
    end process;


    current_graph_flag_address0_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_state14, grp_build_candidates_fu_566_current_graph_flag_address0, grp_deheap_sort_fu_583_current_graph_flag_address0, grp_heap_push_opt_fu_611_current_graph_flag_address0, grp_heap_push_fu_622_current_graph_flag_address0, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state40, ap_predicate_op280_call_state40, ap_CS_fsm_state38, ap_CS_fsm_state24, tmp_24_fu_794_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            current_graph_flag_address0 <= tmp_24_fu_794_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            current_graph_flag_address0 <= grp_heap_push_fu_622_current_graph_flag_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_boolean_1 = ap_predicate_op280_call_state40)))) then 
            current_graph_flag_address0 <= grp_heap_push_opt_fu_611_current_graph_flag_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            current_graph_flag_address0 <= grp_deheap_sort_fu_583_current_graph_flag_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            current_graph_flag_address0 <= grp_build_candidates_fu_566_current_graph_flag_address0;
        else 
            current_graph_flag_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    current_graph_flag_address1_assign_proc : process(ap_CS_fsm_state41, grp_deheap_sort_fu_583_current_graph_flag_address1, grp_heap_push_opt_fu_611_current_graph_flag_address1, ap_CS_fsm_state40, ap_predicate_op280_call_state40, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_boolean_1 = ap_predicate_op280_call_state40)))) then 
            current_graph_flag_address1 <= grp_heap_push_opt_fu_611_current_graph_flag_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            current_graph_flag_address1 <= grp_deheap_sort_fu_583_current_graph_flag_address1;
        else 
            current_graph_flag_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    current_graph_flag_ce0_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_state14, grp_build_candidates_fu_566_current_graph_flag_ce0, grp_deheap_sort_fu_583_current_graph_flag_ce0, grp_heap_push_opt_fu_611_current_graph_flag_ce0, grp_heap_push_fu_622_current_graph_flag_ce0, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state40, ap_predicate_op280_call_state40, ap_CS_fsm_state38, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            current_graph_flag_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            current_graph_flag_ce0 <= grp_heap_push_fu_622_current_graph_flag_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_boolean_1 = ap_predicate_op280_call_state40)))) then 
            current_graph_flag_ce0 <= grp_heap_push_opt_fu_611_current_graph_flag_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            current_graph_flag_ce0 <= grp_deheap_sort_fu_583_current_graph_flag_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            current_graph_flag_ce0 <= grp_build_candidates_fu_566_current_graph_flag_ce0;
        else 
            current_graph_flag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    current_graph_flag_ce1_assign_proc : process(ap_CS_fsm_state41, grp_deheap_sort_fu_583_current_graph_flag_ce1, grp_heap_push_opt_fu_611_current_graph_flag_ce1, ap_CS_fsm_state40, ap_predicate_op280_call_state40, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_boolean_1 = ap_predicate_op280_call_state40)))) then 
            current_graph_flag_ce1 <= grp_heap_push_opt_fu_611_current_graph_flag_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            current_graph_flag_ce1 <= grp_deheap_sort_fu_583_current_graph_flag_ce1;
        else 
            current_graph_flag_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    current_graph_flag_d0_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_state14, grp_build_candidates_fu_566_current_graph_flag_d0, grp_deheap_sort_fu_583_current_graph_flag_d0, grp_heap_push_opt_fu_611_current_graph_flag_d0, grp_heap_push_fu_622_current_graph_flag_d0, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state40, ap_predicate_op280_call_state40, ap_CS_fsm_state38, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            current_graph_flag_d0 <= ap_const_lv32_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            current_graph_flag_d0 <= grp_heap_push_fu_622_current_graph_flag_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_boolean_1 = ap_predicate_op280_call_state40)))) then 
            current_graph_flag_d0 <= grp_heap_push_opt_fu_611_current_graph_flag_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            current_graph_flag_d0 <= grp_deheap_sort_fu_583_current_graph_flag_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            current_graph_flag_d0 <= grp_build_candidates_fu_566_current_graph_flag_d0;
        else 
            current_graph_flag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    current_graph_flag_d1_assign_proc : process(ap_CS_fsm_state41, grp_deheap_sort_fu_583_current_graph_flag_d1, grp_heap_push_opt_fu_611_current_graph_flag_d1, ap_CS_fsm_state40, ap_predicate_op280_call_state40, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_boolean_1 = ap_predicate_op280_call_state40)))) then 
            current_graph_flag_d1 <= grp_heap_push_opt_fu_611_current_graph_flag_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            current_graph_flag_d1 <= grp_deheap_sort_fu_583_current_graph_flag_d1;
        else 
            current_graph_flag_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    current_graph_flag_we0_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_state14, grp_build_candidates_fu_566_current_graph_flag_we0, grp_deheap_sort_fu_583_current_graph_flag_we0, grp_heap_push_opt_fu_611_current_graph_flag_we0, grp_heap_push_fu_622_current_graph_flag_we0, exitcond7_fu_768_p2, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state40, ap_predicate_op280_call_state40, ap_CS_fsm_state38, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_0 = exitcond7_fu_768_p2))) then 
            current_graph_flag_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            current_graph_flag_we0 <= grp_heap_push_fu_622_current_graph_flag_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_boolean_1 = ap_predicate_op280_call_state40)))) then 
            current_graph_flag_we0 <= grp_heap_push_opt_fu_611_current_graph_flag_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            current_graph_flag_we0 <= grp_deheap_sort_fu_583_current_graph_flag_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            current_graph_flag_we0 <= grp_build_candidates_fu_566_current_graph_flag_we0;
        else 
            current_graph_flag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    current_graph_flag_we1_assign_proc : process(ap_CS_fsm_state41, grp_deheap_sort_fu_583_current_graph_flag_we1, grp_heap_push_opt_fu_611_current_graph_flag_we1, ap_CS_fsm_state40, ap_predicate_op280_call_state40, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_boolean_1 = ap_predicate_op280_call_state40)))) then 
            current_graph_flag_we1 <= grp_heap_push_opt_fu_611_current_graph_flag_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            current_graph_flag_we1 <= grp_deheap_sort_fu_583_current_graph_flag_we1;
        else 
            current_graph_flag_we1 <= ap_const_logic_0;
        end if; 
    end process;


    current_graph_index_address0_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_state14, grp_build_candidates_fu_566_current_graph_index_address0, grp_deheap_sort_fu_583_current_graph_index_address0, grp_heap_push_opt_fu_611_current_graph_index_address0, grp_heap_push_fu_622_current_graph_index_address0, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state40, ap_predicate_op280_call_state40, ap_CS_fsm_state38, ap_CS_fsm_state24, tmp_24_fu_794_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            current_graph_index_address0 <= tmp_24_fu_794_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            current_graph_index_address0 <= grp_heap_push_fu_622_current_graph_index_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_boolean_1 = ap_predicate_op280_call_state40)))) then 
            current_graph_index_address0 <= grp_heap_push_opt_fu_611_current_graph_index_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            current_graph_index_address0 <= grp_deheap_sort_fu_583_current_graph_index_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            current_graph_index_address0 <= grp_build_candidates_fu_566_current_graph_index_address0;
        else 
            current_graph_index_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    current_graph_index_address1_assign_proc : process(ap_CS_fsm_state41, grp_deheap_sort_fu_583_current_graph_index_address1, grp_heap_push_opt_fu_611_current_graph_index_address1, ap_CS_fsm_state40, ap_predicate_op280_call_state40, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_boolean_1 = ap_predicate_op280_call_state40)))) then 
            current_graph_index_address1 <= grp_heap_push_opt_fu_611_current_graph_index_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            current_graph_index_address1 <= grp_deheap_sort_fu_583_current_graph_index_address1;
        else 
            current_graph_index_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    current_graph_index_ce0_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_state14, grp_build_candidates_fu_566_current_graph_index_ce0, grp_deheap_sort_fu_583_current_graph_index_ce0, grp_heap_push_opt_fu_611_current_graph_index_ce0, grp_heap_push_fu_622_current_graph_index_ce0, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state40, ap_predicate_op280_call_state40, ap_CS_fsm_state38, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            current_graph_index_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            current_graph_index_ce0 <= grp_heap_push_fu_622_current_graph_index_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_boolean_1 = ap_predicate_op280_call_state40)))) then 
            current_graph_index_ce0 <= grp_heap_push_opt_fu_611_current_graph_index_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            current_graph_index_ce0 <= grp_deheap_sort_fu_583_current_graph_index_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            current_graph_index_ce0 <= grp_build_candidates_fu_566_current_graph_index_ce0;
        else 
            current_graph_index_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    current_graph_index_ce1_assign_proc : process(ap_CS_fsm_state41, grp_deheap_sort_fu_583_current_graph_index_ce1, grp_heap_push_opt_fu_611_current_graph_index_ce1, ap_CS_fsm_state40, ap_predicate_op280_call_state40, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_boolean_1 = ap_predicate_op280_call_state40)))) then 
            current_graph_index_ce1 <= grp_heap_push_opt_fu_611_current_graph_index_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            current_graph_index_ce1 <= grp_deheap_sort_fu_583_current_graph_index_ce1;
        else 
            current_graph_index_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    current_graph_index_d0_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_state14, grp_deheap_sort_fu_583_current_graph_index_d0, grp_heap_push_opt_fu_611_current_graph_index_d0, grp_heap_push_fu_622_current_graph_index_d0, ap_CS_fsm_state26, ap_CS_fsm_state40, ap_predicate_op280_call_state40, ap_CS_fsm_state38, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            current_graph_index_d0 <= ap_const_lv32_FFFFFFFF;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            current_graph_index_d0 <= grp_heap_push_fu_622_current_graph_index_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_boolean_1 = ap_predicate_op280_call_state40)))) then 
            current_graph_index_d0 <= grp_heap_push_opt_fu_611_current_graph_index_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            current_graph_index_d0 <= grp_deheap_sort_fu_583_current_graph_index_d0;
        else 
            current_graph_index_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    current_graph_index_d1_assign_proc : process(ap_CS_fsm_state41, grp_deheap_sort_fu_583_current_graph_index_d1, grp_heap_push_opt_fu_611_current_graph_index_d1, ap_CS_fsm_state40, ap_predicate_op280_call_state40, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_boolean_1 = ap_predicate_op280_call_state40)))) then 
            current_graph_index_d1 <= grp_heap_push_opt_fu_611_current_graph_index_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            current_graph_index_d1 <= grp_deheap_sort_fu_583_current_graph_index_d1;
        else 
            current_graph_index_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    current_graph_index_we0_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_state14, grp_deheap_sort_fu_583_current_graph_index_we0, grp_heap_push_opt_fu_611_current_graph_index_we0, grp_heap_push_fu_622_current_graph_index_we0, exitcond7_fu_768_p2, ap_CS_fsm_state26, ap_CS_fsm_state40, ap_predicate_op280_call_state40, ap_CS_fsm_state38, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_0 = exitcond7_fu_768_p2))) then 
            current_graph_index_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            current_graph_index_we0 <= grp_heap_push_fu_622_current_graph_index_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_boolean_1 = ap_predicate_op280_call_state40)))) then 
            current_graph_index_we0 <= grp_heap_push_opt_fu_611_current_graph_index_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            current_graph_index_we0 <= grp_deheap_sort_fu_583_current_graph_index_we0;
        else 
            current_graph_index_we0 <= ap_const_logic_0;
        end if; 
    end process;


    current_graph_index_we1_assign_proc : process(ap_CS_fsm_state41, grp_deheap_sort_fu_583_current_graph_index_we1, grp_heap_push_opt_fu_611_current_graph_index_we1, ap_CS_fsm_state40, ap_predicate_op280_call_state40, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_boolean_1 = ap_predicate_op280_call_state40)))) then 
            current_graph_index_we1 <= grp_heap_push_opt_fu_611_current_graph_index_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            current_graph_index_we1 <= grp_deheap_sort_fu_583_current_graph_index_we1;
        else 
            current_graph_index_we1 <= ap_const_logic_0;
        end if; 
    end process;


    data_address0_assign_proc : process(ap_block_pp0_stage0_flag00000000, ap_CS_fsm_state19, ap_enable_reg_pp0_iter2, tmp_fu_731_p1, sum_i_cast_fu_890_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            data_address0 <= sum_i_cast_fu_890_p1(9 - 1 downto 0);
        elsif (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            data_address0 <= tmp_fu_731_p1(9 - 1 downto 0);
        else 
            data_address0 <= "XXXXXXXXX";
        end if; 
    end process;

    data_address1 <= sum3_i_cast_fu_900_p1(9 - 1 downto 0);

    data_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_CS_fsm_state19, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)))) then 
            data_ce0 <= ap_const_logic_1;
        else 
            data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_ce1_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            data_ce1 <= ap_const_logic_1;
        else 
            data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    data_we0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_reg_pp0_iter1_exitcond9_reg_1162, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond9_reg_1162))) then 
            data_we0 <= ap_const_logic_1;
        else 
            data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond10_fu_1090_p2 <= "1" when (indvar1_reg_544 = ap_const_lv10_3E8) else "0";
    exitcond11_fu_1107_p2 <= "1" when (indvar2_reg_555 = ap_const_lv10_3E8) else "0";
    exitcond1_fu_1042_p2 <= "1" when (j3_reg_522 = ap_const_lv5_14) else "0";
    exitcond2_fu_1000_p2 <= "1" when (i2_reg_511 = ap_const_lv7_64) else "0";
    exitcond3_fu_967_p2 <= "1" when (i_neighbor1_reg_500 = ap_const_lv5_14) else "0";
    exitcond4_fu_935_p2 <= "1" when (n_point_reg_489 = ap_const_lv7_64) else "0";
    exitcond5_fu_834_p2 <= "1" when (j_reg_455 = ap_const_lv4_A) else "0";
    exitcond6_fu_805_p2 <= "1" when (i_reg_443 = ap_const_lv7_64) else "0";
    exitcond7_fu_768_p2 <= "1" when (i_neighbor_reg_432 = ap_const_lv4_A) else "0";
    exitcond8_fu_736_p2 <= "1" when (n_points_reg_421 = ap_const_lv7_64) else "0";
    exitcond9_fu_719_p2 <= "1" when (indvar_phi_fu_413_p4 = ap_const_lv9_12C) else "0";
    exitcond_fu_1068_p2 <= "1" when (k_reg_533 = ap_const_lv5_14) else "0";
    exitcond_i_fu_869_p2 <= "1" when (i_i_reg_478 = ap_const_lv2_3) else "0";
        extLd23_cast_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(indices_q0),10));

        extLd_cast_fu_925_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(indices_q0),9));

    grp_build_candidates_fu_566_ap_start <= ap_reg_grp_build_candidates_fu_566_ap_start;
    grp_deheap_sort_fu_583_ap_start <= ap_reg_grp_deheap_sort_fu_583_ap_start;
    grp_fu_637_p3 <= candidate_neighbors_s_q0(31 downto 31);
    grp_fu_645_p2 <= "1" when (candidate_neighbors_2_q0 = ap_const_lv32_0) else "0";
    grp_heap_push_fu_622_ap_start <= ap_reg_grp_heap_push_fu_622_ap_start;

    grp_heap_push_fu_622_index_assign_proc : process(indices_load_reg_1233, i_cast_cast_reg_1287, ap_CS_fsm_state26, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_heap_push_fu_622_index <= i_cast_cast_reg_1287;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_heap_push_fu_622_index <= indices_load_reg_1233;
        else 
            grp_heap_push_fu_622_index <= "XXXXXXXX";
        end if; 
    end process;


    grp_heap_push_fu_622_row_assign_proc : process(i_cast_cast1_reg_1261, extLd_cast_reg_1282, ap_CS_fsm_state26, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_heap_push_fu_622_row <= extLd_cast_reg_1282;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_heap_push_fu_622_row <= i_cast_cast1_reg_1261;
        else 
            grp_heap_push_fu_622_row <= "XXXXXXXXX";
        end if; 
    end process;

    grp_heap_push_opt_fu_611_ap_start <= ap_reg_grp_heap_push_opt_fu_611_ap_start;
    grp_rejection_sample_fu_595_ap_start <= ap_reg_grp_rejection_sample_fu_595_ap_start;
    grp_tau_rand_fu_604_ap_start <= ap_reg_grp_tau_rand_fu_604_ap_start;

    hostmem_ARADDR_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state27, exitcond4_fu_935_p2, grp_fu_637_p3, tmp_16_reg_1350, ap_CS_fsm_state32, ap_CS_fsm_state33, grp_build_candidates_fu_566_m_axi_rng_state_ARADDR, grp_rejection_sample_fu_595_m_axi_rng_state_ARADDR, grp_tau_rand_fu_604_m_axi_state_ARADDR, exitcond6_fu_805_p2, ap_CS_fsm_state29, tmp_21_fu_691_p1, ap_reg_ioackin_hostmem_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_0 = ap_reg_ioackin_hostmem_ARREADY))) then 
            hostmem_ARADDR <= tmp_21_fu_691_p1(32 - 1 downto 0);
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = grp_fu_637_p3)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350)))) then 
            hostmem_ARADDR <= grp_tau_rand_fu_604_m_axi_state_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond6_fu_805_p2)))) then 
            hostmem_ARADDR <= grp_rejection_sample_fu_595_m_axi_rng_state_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = exitcond4_fu_935_p2)))) then 
            hostmem_ARADDR <= grp_build_candidates_fu_566_m_axi_rng_state_ARADDR;
        else 
            hostmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hostmem_ARBURST_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state27, exitcond4_fu_935_p2, grp_fu_637_p3, tmp_16_reg_1350, ap_CS_fsm_state32, ap_CS_fsm_state33, grp_build_candidates_fu_566_m_axi_rng_state_ARBURST, grp_rejection_sample_fu_595_m_axi_rng_state_ARBURST, grp_tau_rand_fu_604_m_axi_state_ARBURST, exitcond6_fu_805_p2, ap_CS_fsm_state29)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = grp_fu_637_p3)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350)))) then 
            hostmem_ARBURST <= grp_tau_rand_fu_604_m_axi_state_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond6_fu_805_p2)))) then 
            hostmem_ARBURST <= grp_rejection_sample_fu_595_m_axi_rng_state_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = exitcond4_fu_935_p2)))) then 
            hostmem_ARBURST <= grp_build_candidates_fu_566_m_axi_rng_state_ARBURST;
        else 
            hostmem_ARBURST <= ap_const_lv2_0;
        end if; 
    end process;


    hostmem_ARCACHE_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state27, exitcond4_fu_935_p2, grp_fu_637_p3, tmp_16_reg_1350, ap_CS_fsm_state32, ap_CS_fsm_state33, grp_build_candidates_fu_566_m_axi_rng_state_ARCACHE, grp_rejection_sample_fu_595_m_axi_rng_state_ARCACHE, grp_tau_rand_fu_604_m_axi_state_ARCACHE, exitcond6_fu_805_p2, ap_CS_fsm_state29)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = grp_fu_637_p3)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350)))) then 
            hostmem_ARCACHE <= grp_tau_rand_fu_604_m_axi_state_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond6_fu_805_p2)))) then 
            hostmem_ARCACHE <= grp_rejection_sample_fu_595_m_axi_rng_state_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = exitcond4_fu_935_p2)))) then 
            hostmem_ARCACHE <= grp_build_candidates_fu_566_m_axi_rng_state_ARCACHE;
        else 
            hostmem_ARCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    hostmem_ARID_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state27, exitcond4_fu_935_p2, grp_fu_637_p3, tmp_16_reg_1350, ap_CS_fsm_state32, ap_CS_fsm_state33, grp_build_candidates_fu_566_m_axi_rng_state_ARID, grp_rejection_sample_fu_595_m_axi_rng_state_ARID, grp_tau_rand_fu_604_m_axi_state_ARID, exitcond6_fu_805_p2, ap_CS_fsm_state29)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = grp_fu_637_p3)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350)))) then 
            hostmem_ARID <= grp_tau_rand_fu_604_m_axi_state_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond6_fu_805_p2)))) then 
            hostmem_ARID <= grp_rejection_sample_fu_595_m_axi_rng_state_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = exitcond4_fu_935_p2)))) then 
            hostmem_ARID <= grp_build_candidates_fu_566_m_axi_rng_state_ARID;
        else 
            hostmem_ARID <= ap_const_lv1_0;
        end if; 
    end process;


    hostmem_ARLEN_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state27, exitcond4_fu_935_p2, grp_fu_637_p3, tmp_16_reg_1350, ap_CS_fsm_state32, ap_CS_fsm_state33, grp_build_candidates_fu_566_m_axi_rng_state_ARLEN, grp_rejection_sample_fu_595_m_axi_rng_state_ARLEN, grp_tau_rand_fu_604_m_axi_state_ARLEN, exitcond6_fu_805_p2, ap_CS_fsm_state29, ap_reg_ioackin_hostmem_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_0 = ap_reg_ioackin_hostmem_ARREADY))) then 
            hostmem_ARLEN <= ap_const_lv32_12C;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = grp_fu_637_p3)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350)))) then 
            hostmem_ARLEN <= grp_tau_rand_fu_604_m_axi_state_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond6_fu_805_p2)))) then 
            hostmem_ARLEN <= grp_rejection_sample_fu_595_m_axi_rng_state_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = exitcond4_fu_935_p2)))) then 
            hostmem_ARLEN <= grp_build_candidates_fu_566_m_axi_rng_state_ARLEN;
        else 
            hostmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hostmem_ARLOCK_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state27, exitcond4_fu_935_p2, grp_fu_637_p3, tmp_16_reg_1350, ap_CS_fsm_state32, ap_CS_fsm_state33, grp_build_candidates_fu_566_m_axi_rng_state_ARLOCK, grp_rejection_sample_fu_595_m_axi_rng_state_ARLOCK, grp_tau_rand_fu_604_m_axi_state_ARLOCK, exitcond6_fu_805_p2, ap_CS_fsm_state29)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = grp_fu_637_p3)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350)))) then 
            hostmem_ARLOCK <= grp_tau_rand_fu_604_m_axi_state_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond6_fu_805_p2)))) then 
            hostmem_ARLOCK <= grp_rejection_sample_fu_595_m_axi_rng_state_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = exitcond4_fu_935_p2)))) then 
            hostmem_ARLOCK <= grp_build_candidates_fu_566_m_axi_rng_state_ARLOCK;
        else 
            hostmem_ARLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    hostmem_ARPROT_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state27, exitcond4_fu_935_p2, grp_fu_637_p3, tmp_16_reg_1350, ap_CS_fsm_state32, ap_CS_fsm_state33, grp_build_candidates_fu_566_m_axi_rng_state_ARPROT, grp_rejection_sample_fu_595_m_axi_rng_state_ARPROT, grp_tau_rand_fu_604_m_axi_state_ARPROT, exitcond6_fu_805_p2, ap_CS_fsm_state29)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = grp_fu_637_p3)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350)))) then 
            hostmem_ARPROT <= grp_tau_rand_fu_604_m_axi_state_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond6_fu_805_p2)))) then 
            hostmem_ARPROT <= grp_rejection_sample_fu_595_m_axi_rng_state_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = exitcond4_fu_935_p2)))) then 
            hostmem_ARPROT <= grp_build_candidates_fu_566_m_axi_rng_state_ARPROT;
        else 
            hostmem_ARPROT <= ap_const_lv3_0;
        end if; 
    end process;


    hostmem_ARQOS_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state27, exitcond4_fu_935_p2, grp_fu_637_p3, tmp_16_reg_1350, ap_CS_fsm_state32, ap_CS_fsm_state33, grp_build_candidates_fu_566_m_axi_rng_state_ARQOS, grp_rejection_sample_fu_595_m_axi_rng_state_ARQOS, grp_tau_rand_fu_604_m_axi_state_ARQOS, exitcond6_fu_805_p2, ap_CS_fsm_state29)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = grp_fu_637_p3)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350)))) then 
            hostmem_ARQOS <= grp_tau_rand_fu_604_m_axi_state_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond6_fu_805_p2)))) then 
            hostmem_ARQOS <= grp_rejection_sample_fu_595_m_axi_rng_state_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = exitcond4_fu_935_p2)))) then 
            hostmem_ARQOS <= grp_build_candidates_fu_566_m_axi_rng_state_ARQOS;
        else 
            hostmem_ARQOS <= ap_const_lv4_0;
        end if; 
    end process;


    hostmem_ARREGION_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state27, exitcond4_fu_935_p2, grp_fu_637_p3, tmp_16_reg_1350, ap_CS_fsm_state32, ap_CS_fsm_state33, grp_build_candidates_fu_566_m_axi_rng_state_ARREGION, grp_rejection_sample_fu_595_m_axi_rng_state_ARREGION, grp_tau_rand_fu_604_m_axi_state_ARREGION, exitcond6_fu_805_p2, ap_CS_fsm_state29)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = grp_fu_637_p3)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350)))) then 
            hostmem_ARREGION <= grp_tau_rand_fu_604_m_axi_state_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond6_fu_805_p2)))) then 
            hostmem_ARREGION <= grp_rejection_sample_fu_595_m_axi_rng_state_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = exitcond4_fu_935_p2)))) then 
            hostmem_ARREGION <= grp_build_candidates_fu_566_m_axi_rng_state_ARREGION;
        else 
            hostmem_ARREGION <= ap_const_lv4_0;
        end if; 
    end process;


    hostmem_ARSIZE_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state27, exitcond4_fu_935_p2, grp_fu_637_p3, tmp_16_reg_1350, ap_CS_fsm_state32, ap_CS_fsm_state33, grp_build_candidates_fu_566_m_axi_rng_state_ARSIZE, grp_rejection_sample_fu_595_m_axi_rng_state_ARSIZE, grp_tau_rand_fu_604_m_axi_state_ARSIZE, exitcond6_fu_805_p2, ap_CS_fsm_state29)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = grp_fu_637_p3)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350)))) then 
            hostmem_ARSIZE <= grp_tau_rand_fu_604_m_axi_state_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond6_fu_805_p2)))) then 
            hostmem_ARSIZE <= grp_rejection_sample_fu_595_m_axi_rng_state_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = exitcond4_fu_935_p2)))) then 
            hostmem_ARSIZE <= grp_build_candidates_fu_566_m_axi_rng_state_ARSIZE;
        else 
            hostmem_ARSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    hostmem_ARUSER_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state27, exitcond4_fu_935_p2, grp_fu_637_p3, tmp_16_reg_1350, ap_CS_fsm_state32, ap_CS_fsm_state33, grp_build_candidates_fu_566_m_axi_rng_state_ARUSER, grp_rejection_sample_fu_595_m_axi_rng_state_ARUSER, grp_tau_rand_fu_604_m_axi_state_ARUSER, exitcond6_fu_805_p2, ap_CS_fsm_state29)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = grp_fu_637_p3)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350)))) then 
            hostmem_ARUSER <= grp_tau_rand_fu_604_m_axi_state_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond6_fu_805_p2)))) then 
            hostmem_ARUSER <= grp_rejection_sample_fu_595_m_axi_rng_state_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = exitcond4_fu_935_p2)))) then 
            hostmem_ARUSER <= grp_build_candidates_fu_566_m_axi_rng_state_ARUSER;
        else 
            hostmem_ARUSER <= ap_const_lv1_0;
        end if; 
    end process;


    hostmem_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state27, exitcond4_fu_935_p2, grp_fu_637_p3, tmp_16_reg_1350, ap_CS_fsm_state32, ap_CS_fsm_state33, grp_build_candidates_fu_566_m_axi_rng_state_ARVALID, grp_rejection_sample_fu_595_m_axi_rng_state_ARVALID, grp_tau_rand_fu_604_m_axi_state_ARVALID, exitcond6_fu_805_p2, ap_CS_fsm_state29, ap_reg_ioackin_hostmem_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_0 = ap_reg_ioackin_hostmem_ARREADY))) then 
            hostmem_ARVALID <= ap_const_logic_1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = grp_fu_637_p3)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350)))) then 
            hostmem_ARVALID <= grp_tau_rand_fu_604_m_axi_state_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond6_fu_805_p2)))) then 
            hostmem_ARVALID <= grp_rejection_sample_fu_595_m_axi_rng_state_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = exitcond4_fu_935_p2)))) then 
            hostmem_ARVALID <= grp_build_candidates_fu_566_m_axi_rng_state_ARVALID;
        else 
            hostmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    hostmem_AWADDR_assign_proc : process(ap_CS_fsm_state49, ap_CS_fsm_state41, hostmem_BVALID, hostmem_addr_reg_1152, hostmem_addr_1_reg_1157, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state27, exitcond4_fu_935_p2, grp_fu_637_p3, tmp_16_reg_1350, ap_CS_fsm_state32, ap_CS_fsm_state33, grp_deheap_sort_fu_583_ap_done, grp_build_candidates_fu_566_m_axi_rng_state_AWADDR, grp_rejection_sample_fu_595_m_axi_rng_state_AWADDR, grp_tau_rand_fu_604_m_axi_state_AWADDR, exitcond6_fu_805_p2, ap_CS_fsm_state29, ap_reg_ioackin_hostmem_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) and (ap_const_logic_0 = ap_reg_ioackin_hostmem_AWREADY) and (hostmem_BVALID = ap_const_logic_1))) then 
            hostmem_AWADDR <= hostmem_addr_reg_1152;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) and (grp_deheap_sort_fu_583_ap_done = ap_const_logic_1) and (ap_const_logic_0 = ap_reg_ioackin_hostmem_AWREADY))) then 
            hostmem_AWADDR <= hostmem_addr_1_reg_1157;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = grp_fu_637_p3)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350)))) then 
            hostmem_AWADDR <= grp_tau_rand_fu_604_m_axi_state_AWADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond6_fu_805_p2)))) then 
            hostmem_AWADDR <= grp_rejection_sample_fu_595_m_axi_rng_state_AWADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = exitcond4_fu_935_p2)))) then 
            hostmem_AWADDR <= grp_build_candidates_fu_566_m_axi_rng_state_AWADDR;
        else 
            hostmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hostmem_AWBURST_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state27, exitcond4_fu_935_p2, grp_fu_637_p3, tmp_16_reg_1350, ap_CS_fsm_state32, ap_CS_fsm_state33, grp_build_candidates_fu_566_m_axi_rng_state_AWBURST, grp_rejection_sample_fu_595_m_axi_rng_state_AWBURST, grp_tau_rand_fu_604_m_axi_state_AWBURST, exitcond6_fu_805_p2, ap_CS_fsm_state29)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = grp_fu_637_p3)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350)))) then 
            hostmem_AWBURST <= grp_tau_rand_fu_604_m_axi_state_AWBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond6_fu_805_p2)))) then 
            hostmem_AWBURST <= grp_rejection_sample_fu_595_m_axi_rng_state_AWBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = exitcond4_fu_935_p2)))) then 
            hostmem_AWBURST <= grp_build_candidates_fu_566_m_axi_rng_state_AWBURST;
        else 
            hostmem_AWBURST <= ap_const_lv2_0;
        end if; 
    end process;


    hostmem_AWCACHE_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state27, exitcond4_fu_935_p2, grp_fu_637_p3, tmp_16_reg_1350, ap_CS_fsm_state32, ap_CS_fsm_state33, grp_build_candidates_fu_566_m_axi_rng_state_AWCACHE, grp_rejection_sample_fu_595_m_axi_rng_state_AWCACHE, grp_tau_rand_fu_604_m_axi_state_AWCACHE, exitcond6_fu_805_p2, ap_CS_fsm_state29)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = grp_fu_637_p3)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350)))) then 
            hostmem_AWCACHE <= grp_tau_rand_fu_604_m_axi_state_AWCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond6_fu_805_p2)))) then 
            hostmem_AWCACHE <= grp_rejection_sample_fu_595_m_axi_rng_state_AWCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = exitcond4_fu_935_p2)))) then 
            hostmem_AWCACHE <= grp_build_candidates_fu_566_m_axi_rng_state_AWCACHE;
        else 
            hostmem_AWCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    hostmem_AWID_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state27, exitcond4_fu_935_p2, grp_fu_637_p3, tmp_16_reg_1350, ap_CS_fsm_state32, ap_CS_fsm_state33, grp_build_candidates_fu_566_m_axi_rng_state_AWID, grp_rejection_sample_fu_595_m_axi_rng_state_AWID, grp_tau_rand_fu_604_m_axi_state_AWID, exitcond6_fu_805_p2, ap_CS_fsm_state29)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = grp_fu_637_p3)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350)))) then 
            hostmem_AWID <= grp_tau_rand_fu_604_m_axi_state_AWID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond6_fu_805_p2)))) then 
            hostmem_AWID <= grp_rejection_sample_fu_595_m_axi_rng_state_AWID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = exitcond4_fu_935_p2)))) then 
            hostmem_AWID <= grp_build_candidates_fu_566_m_axi_rng_state_AWID;
        else 
            hostmem_AWID <= ap_const_lv1_0;
        end if; 
    end process;


    hostmem_AWLEN_assign_proc : process(ap_CS_fsm_state49, ap_CS_fsm_state41, hostmem_BVALID, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state27, exitcond4_fu_935_p2, grp_fu_637_p3, tmp_16_reg_1350, ap_CS_fsm_state32, ap_CS_fsm_state33, grp_deheap_sort_fu_583_ap_done, grp_build_candidates_fu_566_m_axi_rng_state_AWLEN, grp_rejection_sample_fu_595_m_axi_rng_state_AWLEN, grp_tau_rand_fu_604_m_axi_state_AWLEN, exitcond6_fu_805_p2, ap_CS_fsm_state29, ap_reg_ioackin_hostmem_AWREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state41) and (grp_deheap_sort_fu_583_ap_done = ap_const_logic_1) and (ap_const_logic_0 = ap_reg_ioackin_hostmem_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state49) and (ap_const_logic_0 = ap_reg_ioackin_hostmem_AWREADY) and (hostmem_BVALID = ap_const_logic_1)))) then 
            hostmem_AWLEN <= ap_const_lv32_3E8;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = grp_fu_637_p3)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350)))) then 
            hostmem_AWLEN <= grp_tau_rand_fu_604_m_axi_state_AWLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond6_fu_805_p2)))) then 
            hostmem_AWLEN <= grp_rejection_sample_fu_595_m_axi_rng_state_AWLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = exitcond4_fu_935_p2)))) then 
            hostmem_AWLEN <= grp_build_candidates_fu_566_m_axi_rng_state_AWLEN;
        else 
            hostmem_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hostmem_AWLOCK_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state27, exitcond4_fu_935_p2, grp_fu_637_p3, tmp_16_reg_1350, ap_CS_fsm_state32, ap_CS_fsm_state33, grp_build_candidates_fu_566_m_axi_rng_state_AWLOCK, grp_rejection_sample_fu_595_m_axi_rng_state_AWLOCK, grp_tau_rand_fu_604_m_axi_state_AWLOCK, exitcond6_fu_805_p2, ap_CS_fsm_state29)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = grp_fu_637_p3)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350)))) then 
            hostmem_AWLOCK <= grp_tau_rand_fu_604_m_axi_state_AWLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond6_fu_805_p2)))) then 
            hostmem_AWLOCK <= grp_rejection_sample_fu_595_m_axi_rng_state_AWLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = exitcond4_fu_935_p2)))) then 
            hostmem_AWLOCK <= grp_build_candidates_fu_566_m_axi_rng_state_AWLOCK;
        else 
            hostmem_AWLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    hostmem_AWPROT_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state27, exitcond4_fu_935_p2, grp_fu_637_p3, tmp_16_reg_1350, ap_CS_fsm_state32, ap_CS_fsm_state33, grp_build_candidates_fu_566_m_axi_rng_state_AWPROT, grp_rejection_sample_fu_595_m_axi_rng_state_AWPROT, grp_tau_rand_fu_604_m_axi_state_AWPROT, exitcond6_fu_805_p2, ap_CS_fsm_state29)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = grp_fu_637_p3)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350)))) then 
            hostmem_AWPROT <= grp_tau_rand_fu_604_m_axi_state_AWPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond6_fu_805_p2)))) then 
            hostmem_AWPROT <= grp_rejection_sample_fu_595_m_axi_rng_state_AWPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = exitcond4_fu_935_p2)))) then 
            hostmem_AWPROT <= grp_build_candidates_fu_566_m_axi_rng_state_AWPROT;
        else 
            hostmem_AWPROT <= ap_const_lv3_0;
        end if; 
    end process;


    hostmem_AWQOS_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state27, exitcond4_fu_935_p2, grp_fu_637_p3, tmp_16_reg_1350, ap_CS_fsm_state32, ap_CS_fsm_state33, grp_build_candidates_fu_566_m_axi_rng_state_AWQOS, grp_rejection_sample_fu_595_m_axi_rng_state_AWQOS, grp_tau_rand_fu_604_m_axi_state_AWQOS, exitcond6_fu_805_p2, ap_CS_fsm_state29)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = grp_fu_637_p3)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350)))) then 
            hostmem_AWQOS <= grp_tau_rand_fu_604_m_axi_state_AWQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond6_fu_805_p2)))) then 
            hostmem_AWQOS <= grp_rejection_sample_fu_595_m_axi_rng_state_AWQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = exitcond4_fu_935_p2)))) then 
            hostmem_AWQOS <= grp_build_candidates_fu_566_m_axi_rng_state_AWQOS;
        else 
            hostmem_AWQOS <= ap_const_lv4_0;
        end if; 
    end process;


    hostmem_AWREGION_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state27, exitcond4_fu_935_p2, grp_fu_637_p3, tmp_16_reg_1350, ap_CS_fsm_state32, ap_CS_fsm_state33, grp_build_candidates_fu_566_m_axi_rng_state_AWREGION, grp_rejection_sample_fu_595_m_axi_rng_state_AWREGION, grp_tau_rand_fu_604_m_axi_state_AWREGION, exitcond6_fu_805_p2, ap_CS_fsm_state29)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = grp_fu_637_p3)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350)))) then 
            hostmem_AWREGION <= grp_tau_rand_fu_604_m_axi_state_AWREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond6_fu_805_p2)))) then 
            hostmem_AWREGION <= grp_rejection_sample_fu_595_m_axi_rng_state_AWREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = exitcond4_fu_935_p2)))) then 
            hostmem_AWREGION <= grp_build_candidates_fu_566_m_axi_rng_state_AWREGION;
        else 
            hostmem_AWREGION <= ap_const_lv4_0;
        end if; 
    end process;


    hostmem_AWSIZE_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state27, exitcond4_fu_935_p2, grp_fu_637_p3, tmp_16_reg_1350, ap_CS_fsm_state32, ap_CS_fsm_state33, grp_build_candidates_fu_566_m_axi_rng_state_AWSIZE, grp_rejection_sample_fu_595_m_axi_rng_state_AWSIZE, grp_tau_rand_fu_604_m_axi_state_AWSIZE, exitcond6_fu_805_p2, ap_CS_fsm_state29)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = grp_fu_637_p3)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350)))) then 
            hostmem_AWSIZE <= grp_tau_rand_fu_604_m_axi_state_AWSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond6_fu_805_p2)))) then 
            hostmem_AWSIZE <= grp_rejection_sample_fu_595_m_axi_rng_state_AWSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = exitcond4_fu_935_p2)))) then 
            hostmem_AWSIZE <= grp_build_candidates_fu_566_m_axi_rng_state_AWSIZE;
        else 
            hostmem_AWSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    hostmem_AWUSER_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state27, exitcond4_fu_935_p2, grp_fu_637_p3, tmp_16_reg_1350, ap_CS_fsm_state32, ap_CS_fsm_state33, grp_build_candidates_fu_566_m_axi_rng_state_AWUSER, grp_rejection_sample_fu_595_m_axi_rng_state_AWUSER, grp_tau_rand_fu_604_m_axi_state_AWUSER, exitcond6_fu_805_p2, ap_CS_fsm_state29)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = grp_fu_637_p3)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350)))) then 
            hostmem_AWUSER <= grp_tau_rand_fu_604_m_axi_state_AWUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond6_fu_805_p2)))) then 
            hostmem_AWUSER <= grp_rejection_sample_fu_595_m_axi_rng_state_AWUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = exitcond4_fu_935_p2)))) then 
            hostmem_AWUSER <= grp_build_candidates_fu_566_m_axi_rng_state_AWUSER;
        else 
            hostmem_AWUSER <= ap_const_lv1_0;
        end if; 
    end process;


    hostmem_AWVALID_assign_proc : process(ap_CS_fsm_state49, ap_CS_fsm_state41, hostmem_BVALID, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state27, exitcond4_fu_935_p2, grp_fu_637_p3, tmp_16_reg_1350, ap_CS_fsm_state32, ap_CS_fsm_state33, grp_deheap_sort_fu_583_ap_done, grp_build_candidates_fu_566_m_axi_rng_state_AWVALID, grp_rejection_sample_fu_595_m_axi_rng_state_AWVALID, grp_tau_rand_fu_604_m_axi_state_AWVALID, exitcond6_fu_805_p2, ap_CS_fsm_state29, ap_reg_ioackin_hostmem_AWREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state41) and (grp_deheap_sort_fu_583_ap_done = ap_const_logic_1) and (ap_const_logic_0 = ap_reg_ioackin_hostmem_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state49) and (ap_const_logic_0 = ap_reg_ioackin_hostmem_AWREADY) and (hostmem_BVALID = ap_const_logic_1)))) then 
            hostmem_AWVALID <= ap_const_logic_1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = grp_fu_637_p3)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350)))) then 
            hostmem_AWVALID <= grp_tau_rand_fu_604_m_axi_state_AWVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond6_fu_805_p2)))) then 
            hostmem_AWVALID <= grp_rejection_sample_fu_595_m_axi_rng_state_AWVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = exitcond4_fu_935_p2)))) then 
            hostmem_AWVALID <= grp_build_candidates_fu_566_m_axi_rng_state_AWVALID;
        else 
            hostmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    hostmem_BREADY_assign_proc : process(ap_CS_fsm_state49, ap_CS_fsm_state57, hostmem_BVALID, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state27, exitcond4_fu_935_p2, grp_fu_637_p3, tmp_16_reg_1350, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_sig_ioackin_hostmem_AWREADY, grp_build_candidates_fu_566_m_axi_rng_state_BREADY, grp_rejection_sample_fu_595_m_axi_rng_state_BREADY, grp_tau_rand_fu_604_m_axi_state_BREADY, exitcond6_fu_805_p2, ap_CS_fsm_state29)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state49) and not(((ap_const_logic_0 = ap_sig_ioackin_hostmem_AWREADY) or (ap_const_logic_0 = hostmem_BVALID)))) or ((ap_const_logic_1 = ap_CS_fsm_state57) and (hostmem_BVALID = ap_const_logic_1)))) then 
            hostmem_BREADY <= ap_const_logic_1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = grp_fu_637_p3)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350)))) then 
            hostmem_BREADY <= grp_tau_rand_fu_604_m_axi_state_BREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond6_fu_805_p2)))) then 
            hostmem_BREADY <= grp_rejection_sample_fu_595_m_axi_rng_state_BREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = exitcond4_fu_935_p2)))) then 
            hostmem_BREADY <= grp_build_candidates_fu_566_m_axi_rng_state_BREADY;
        else 
            hostmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    hostmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond9_reg_1162, ap_block_pp0_stage0_flag00011001, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state27, exitcond4_fu_935_p2, grp_fu_637_p3, tmp_16_reg_1350, ap_CS_fsm_state32, ap_CS_fsm_state33, grp_build_candidates_fu_566_m_axi_rng_state_RREADY, grp_rejection_sample_fu_595_m_axi_rng_state_RREADY, grp_tau_rand_fu_604_m_axi_state_RREADY, exitcond6_fu_805_p2, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond9_reg_1162) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            hostmem_RREADY <= ap_const_logic_1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = grp_fu_637_p3)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350)))) then 
            hostmem_RREADY <= grp_tau_rand_fu_604_m_axi_state_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond6_fu_805_p2)))) then 
            hostmem_RREADY <= grp_rejection_sample_fu_595_m_axi_rng_state_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = exitcond4_fu_935_p2)))) then 
            hostmem_RREADY <= grp_build_candidates_fu_566_m_axi_rng_state_RREADY;
        else 
            hostmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    hostmem_WDATA_assign_proc : process(ap_enable_reg_pp2_iter2, ap_reg_pp2_iter1_exitcond11_reg_1422, ap_enable_reg_pp1_iter2, ap_reg_pp1_iter1_exitcond10_reg_1403, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state27, exitcond4_fu_935_p2, grp_fu_637_p3, tmp_16_reg_1350, ap_CS_fsm_state32, ap_CS_fsm_state33, result_index_load_reg_1417, result_dist_load_reg_1436, grp_build_candidates_fu_566_m_axi_rng_state_WDATA, grp_rejection_sample_fu_595_m_axi_rng_state_WDATA, grp_tau_rand_fu_604_m_axi_state_WDATA, exitcond6_fu_805_p2, ap_CS_fsm_state29, ap_reg_ioackin_hostmem_WREADY, ap_block_pp1_stage0_flag00001001, ap_block_pp2_stage0_flag00001001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_reg_pp2_iter1_exitcond11_reg_1422 = ap_const_lv1_0) and (ap_const_logic_0 = ap_reg_ioackin_hostmem_WREADY) and (ap_block_pp2_stage0_flag00001001 = ap_const_boolean_0))) then 
            hostmem_WDATA <= result_dist_load_reg_1436;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_0 = ap_reg_pp1_iter1_exitcond10_reg_1403) and (ap_block_pp1_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_hostmem_WREADY))) then 
            hostmem_WDATA <= result_index_load_reg_1417;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = grp_fu_637_p3)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350)))) then 
            hostmem_WDATA <= grp_tau_rand_fu_604_m_axi_state_WDATA;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond6_fu_805_p2)))) then 
            hostmem_WDATA <= grp_rejection_sample_fu_595_m_axi_rng_state_WDATA;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = exitcond4_fu_935_p2)))) then 
            hostmem_WDATA <= grp_build_candidates_fu_566_m_axi_rng_state_WDATA;
        else 
            hostmem_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hostmem_WID_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state27, exitcond4_fu_935_p2, grp_fu_637_p3, tmp_16_reg_1350, ap_CS_fsm_state32, ap_CS_fsm_state33, grp_build_candidates_fu_566_m_axi_rng_state_WID, grp_rejection_sample_fu_595_m_axi_rng_state_WID, grp_tau_rand_fu_604_m_axi_state_WID, exitcond6_fu_805_p2, ap_CS_fsm_state29)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = grp_fu_637_p3)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350)))) then 
            hostmem_WID <= grp_tau_rand_fu_604_m_axi_state_WID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond6_fu_805_p2)))) then 
            hostmem_WID <= grp_rejection_sample_fu_595_m_axi_rng_state_WID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = exitcond4_fu_935_p2)))) then 
            hostmem_WID <= grp_build_candidates_fu_566_m_axi_rng_state_WID;
        else 
            hostmem_WID <= ap_const_lv1_0;
        end if; 
    end process;


    hostmem_WLAST_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state27, exitcond4_fu_935_p2, grp_fu_637_p3, tmp_16_reg_1350, ap_CS_fsm_state32, ap_CS_fsm_state33, grp_build_candidates_fu_566_m_axi_rng_state_WLAST, grp_rejection_sample_fu_595_m_axi_rng_state_WLAST, grp_tau_rand_fu_604_m_axi_state_WLAST, exitcond6_fu_805_p2, ap_CS_fsm_state29)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = grp_fu_637_p3)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350)))) then 
            hostmem_WLAST <= grp_tau_rand_fu_604_m_axi_state_WLAST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond6_fu_805_p2)))) then 
            hostmem_WLAST <= grp_rejection_sample_fu_595_m_axi_rng_state_WLAST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = exitcond4_fu_935_p2)))) then 
            hostmem_WLAST <= grp_build_candidates_fu_566_m_axi_rng_state_WLAST;
        else 
            hostmem_WLAST <= ap_const_logic_0;
        end if; 
    end process;


    hostmem_WSTRB_assign_proc : process(ap_enable_reg_pp2_iter2, ap_reg_pp2_iter1_exitcond11_reg_1422, ap_enable_reg_pp1_iter2, ap_reg_pp1_iter1_exitcond10_reg_1403, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state27, exitcond4_fu_935_p2, grp_fu_637_p3, tmp_16_reg_1350, ap_CS_fsm_state32, ap_CS_fsm_state33, grp_build_candidates_fu_566_m_axi_rng_state_WSTRB, grp_rejection_sample_fu_595_m_axi_rng_state_WSTRB, grp_tau_rand_fu_604_m_axi_state_WSTRB, exitcond6_fu_805_p2, ap_CS_fsm_state29, ap_reg_ioackin_hostmem_WREADY, ap_block_pp1_stage0_flag00001001, ap_block_pp2_stage0_flag00001001)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_0 = ap_reg_pp1_iter1_exitcond10_reg_1403) and (ap_block_pp1_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_hostmem_WREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_reg_pp2_iter1_exitcond11_reg_1422 = ap_const_lv1_0) and (ap_const_logic_0 = ap_reg_ioackin_hostmem_WREADY) and (ap_block_pp2_stage0_flag00001001 = ap_const_boolean_0)))) then 
            hostmem_WSTRB <= ap_const_lv4_F;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = grp_fu_637_p3)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350)))) then 
            hostmem_WSTRB <= grp_tau_rand_fu_604_m_axi_state_WSTRB;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond6_fu_805_p2)))) then 
            hostmem_WSTRB <= grp_rejection_sample_fu_595_m_axi_rng_state_WSTRB;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = exitcond4_fu_935_p2)))) then 
            hostmem_WSTRB <= grp_build_candidates_fu_566_m_axi_rng_state_WSTRB;
        else 
            hostmem_WSTRB <= "XXXX";
        end if; 
    end process;


    hostmem_WUSER_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state27, exitcond4_fu_935_p2, grp_fu_637_p3, tmp_16_reg_1350, ap_CS_fsm_state32, ap_CS_fsm_state33, grp_build_candidates_fu_566_m_axi_rng_state_WUSER, grp_rejection_sample_fu_595_m_axi_rng_state_WUSER, grp_tau_rand_fu_604_m_axi_state_WUSER, exitcond6_fu_805_p2, ap_CS_fsm_state29)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = grp_fu_637_p3)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350)))) then 
            hostmem_WUSER <= grp_tau_rand_fu_604_m_axi_state_WUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond6_fu_805_p2)))) then 
            hostmem_WUSER <= grp_rejection_sample_fu_595_m_axi_rng_state_WUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = exitcond4_fu_935_p2)))) then 
            hostmem_WUSER <= grp_build_candidates_fu_566_m_axi_rng_state_WUSER;
        else 
            hostmem_WUSER <= ap_const_lv1_0;
        end if; 
    end process;


    hostmem_WVALID_assign_proc : process(ap_enable_reg_pp2_iter2, ap_reg_pp2_iter1_exitcond11_reg_1422, ap_enable_reg_pp1_iter2, ap_reg_pp1_iter1_exitcond10_reg_1403, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state27, exitcond4_fu_935_p2, grp_fu_637_p3, tmp_16_reg_1350, ap_CS_fsm_state32, ap_CS_fsm_state33, grp_build_candidates_fu_566_m_axi_rng_state_WVALID, grp_rejection_sample_fu_595_m_axi_rng_state_WVALID, grp_tau_rand_fu_604_m_axi_state_WVALID, exitcond6_fu_805_p2, ap_CS_fsm_state29, ap_reg_ioackin_hostmem_WREADY, ap_block_pp1_stage0_flag00001001, ap_block_pp2_stage0_flag00001001)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_0 = ap_reg_pp1_iter1_exitcond10_reg_1403) and (ap_block_pp1_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_hostmem_WREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_reg_pp2_iter1_exitcond11_reg_1422 = ap_const_lv1_0) and (ap_const_logic_0 = ap_reg_ioackin_hostmem_WREADY) and (ap_block_pp2_stage0_flag00001001 = ap_const_boolean_0)))) then 
            hostmem_WVALID <= ap_const_logic_1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = grp_fu_637_p3)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_16_reg_1350)))) then 
            hostmem_WVALID <= grp_tau_rand_fu_604_m_axi_state_WVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond6_fu_805_p2)))) then 
            hostmem_WVALID <= grp_rejection_sample_fu_595_m_axi_rng_state_WVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = exitcond4_fu_935_p2)))) then 
            hostmem_WVALID <= grp_build_candidates_fu_566_m_axi_rng_state_WVALID;
        else 
            hostmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    hostmem_blk_n_AR_assign_proc : process(m_axi_hostmem_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            hostmem_blk_n_AR <= m_axi_hostmem_ARREADY;
        else 
            hostmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    hostmem_blk_n_AW_assign_proc : process(m_axi_hostmem_AWREADY, ap_CS_fsm_state49, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            hostmem_blk_n_AW <= m_axi_hostmem_AWREADY;
        else 
            hostmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    hostmem_blk_n_B_assign_proc : process(m_axi_hostmem_BVALID, ap_CS_fsm_state49, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            hostmem_blk_n_B <= m_axi_hostmem_BVALID;
        else 
            hostmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    hostmem_blk_n_R_assign_proc : process(m_axi_hostmem_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, exitcond9_reg_1162)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond9_reg_1162))) then 
            hostmem_blk_n_R <= m_axi_hostmem_RVALID;
        else 
            hostmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    hostmem_blk_n_W_assign_proc : process(m_axi_hostmem_WREADY, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0_flag00000000, ap_reg_pp2_iter1_exitcond11_reg_1422, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0_flag00000000, ap_reg_pp1_iter1_exitcond10_reg_1403)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_block_pp2_stage0_flag00000000 = ap_const_boolean_0) and (ap_reg_pp2_iter1_exitcond11_reg_1422 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp1_iter1_exitcond10_reg_1403)))) then 
            hostmem_blk_n_W <= m_axi_hostmem_WREADY;
        else 
            hostmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    i_2_fu_811_p2 <= std_logic_vector(unsigned(i_reg_443) + unsigned(ap_const_lv7_1));
    i_3_fu_1006_p2 <= std_logic_vector(unsigned(i2_reg_511) + unsigned(ap_const_lv7_1));
    i_4_fu_875_p2 <= std_logic_vector(unsigned(i_i_reg_478) + unsigned(ap_const_lv2_1));
    i_cast1_fu_801_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_443),10));
    i_cast_cast1_fu_905_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_443),9));
    i_cast_cast_fu_930_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_443),8));
    i_neighbor1_cast9_fu_963_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_neighbor1_reg_500),9));
    i_neighbor_1_fu_774_p2 <= std_logic_vector(unsigned(i_neighbor_reg_432) + unsigned(ap_const_lv4_1));
    i_neighbor_2_fu_973_p2 <= std_logic_vector(unsigned(i_neighbor1_reg_500) + unsigned(ap_const_lv5_1));
    i_neighbor_cast_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_neighbor_reg_432),8));

    indices_address0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state17, indices_addr_reg_1228, grp_rejection_sample_fu_595_result_address0, ap_CS_fsm_state24, tmp_25_fu_846_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            indices_address0 <= indices_addr_reg_1228;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            indices_address0 <= tmp_25_fu_846_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            indices_address0 <= grp_rejection_sample_fu_595_result_address0;
        else 
            indices_address0 <= "XXXX";
        end if; 
    end process;


    indices_ce0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state17, grp_rejection_sample_fu_595_result_ce0, grp_heap_push_fu_622_ap_done, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((grp_heap_push_fu_622_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24)))) then 
            indices_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            indices_ce0 <= grp_rejection_sample_fu_595_result_ce0;
        else 
            indices_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    indices_we0_assign_proc : process(ap_CS_fsm_state16, grp_rejection_sample_fu_595_result_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            indices_we0 <= grp_rejection_sample_fu_595_result_we0;
        else 
            indices_we0 <= ap_const_logic_0;
        end if; 
    end process;

    indvar_next1_fu_1096_p2 <= std_logic_vector(unsigned(indvar1_reg_544) + unsigned(ap_const_lv10_1));
    indvar_next2_fu_1113_p2 <= std_logic_vector(unsigned(indvar2_reg_555) + unsigned(ap_const_lv10_1));
    indvar_next_fu_725_p2 <= std_logic_vector(unsigned(indvar_phi_fu_413_p4) + unsigned(ap_const_lv9_1));

    indvar_phi_fu_413_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, exitcond9_reg_1162, indvar_reg_409, indvar_next_reg_1166)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond9_reg_1162))) then 
            indvar_phi_fu_413_p4 <= indvar_next_reg_1166;
        else 
            indvar_phi_fu_413_p4 <= indvar_reg_409;
        end if; 
    end process;

    j3_cast6_fu_1038_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j3_reg_522),11));
    j_1_fu_840_p2 <= std_logic_vector(unsigned(j_reg_455) + unsigned(ap_const_lv4_1));
    j_2_fu_1048_p2 <= std_logic_vector(unsigned(j3_reg_522) + unsigned(ap_const_lv5_1));
    k_2_fu_1074_p2 <= std_logic_vector(unsigned(k_reg_533) + unsigned(ap_const_lv5_1));
    k_cast5_fu_1064_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_533),11));
    n_point_1_fu_941_p2 <= std_logic_vector(unsigned(n_point_reg_489) + unsigned(ap_const_lv7_1));
    n_points_1_fu_742_p2 <= std_logic_vector(unsigned(n_points_reg_421) + unsigned(ap_const_lv7_1));
    p_shl2_cast_fu_825_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_817_p3),10));
    p_shl2_fu_817_p3 <= (i_reg_443 & ap_const_lv2_0);
    p_shl3_fu_947_p3 <= (n_point_reg_489 & ap_const_lv4_0);
    p_shl4_fu_955_p3 <= (n_point_reg_489 & ap_const_lv2_0);
    p_shl5_fu_855_p3 <= (indices_q0 & ap_const_lv2_0);
    p_shl6_fu_1012_p3 <= (i2_reg_511 & ap_const_lv4_0);
    p_shl7_cast_fu_1028_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl7_fu_1020_p3),11));
    p_shl7_fu_1020_p3 <= (i2_reg_511 & ap_const_lv2_0);
    p_shl9_fu_756_p3 <= (n_points_reg_421 & ap_const_lv1_0);
    p_shl_fu_748_p3 <= (n_points_reg_421 & ap_const_lv3_0);
    result_1_fu_920_p2 <= std_logic_vector(unsigned(tmp_126_i_reg_1272) + unsigned(d_reg_466));

    result_dist_address0_assign_proc : process(ap_block_pp2_stage0_flag00000000, ap_CS_fsm_state41, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, grp_deheap_sort_fu_583_result_dist_address0, tmp_33_fu_1119_p1)
    begin
        if (((ap_block_pp2_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then 
            result_dist_address0 <= tmp_33_fu_1119_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            result_dist_address0 <= grp_deheap_sort_fu_583_result_dist_address0;
        else 
            result_dist_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    result_dist_ce0_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_flag00011001, ap_enable_reg_pp2_iter0, grp_deheap_sort_fu_583_result_dist_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then 
            result_dist_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            result_dist_ce0 <= grp_deheap_sort_fu_583_result_dist_ce0;
        else 
            result_dist_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_dist_we0_assign_proc : process(ap_CS_fsm_state41, grp_deheap_sort_fu_583_result_dist_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            result_dist_we0 <= grp_deheap_sort_fu_583_result_dist_we0;
        else 
            result_dist_we0 <= ap_const_logic_0;
        end if; 
    end process;


    result_index_address0_assign_proc : process(ap_CS_fsm_state41, ap_block_pp1_stage0_flag00000000, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, grp_deheap_sort_fu_583_result_index_address0, tmp_30_fu_1102_p1)
    begin
        if (((ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0))) then 
            result_index_address0 <= tmp_30_fu_1102_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            result_index_address0 <= grp_deheap_sort_fu_583_result_index_address0;
        else 
            result_index_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    result_index_ce0_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00011001, ap_enable_reg_pp1_iter0, grp_deheap_sort_fu_583_result_index_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0))) then 
            result_index_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            result_index_ce0 <= grp_deheap_sort_fu_583_result_index_ce0;
        else 
            result_index_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_index_we0_assign_proc : process(ap_CS_fsm_state41, grp_deheap_sort_fu_583_result_index_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            result_index_we0 <= grp_deheap_sort_fu_583_result_index_we0;
        else 
            result_index_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sum3_i_cast_fu_900_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum3_i_fu_895_p2),64));

    sum3_i_fu_895_p2 <= std_logic_vector(unsigned(tmp_i_cast_fu_881_p1) + unsigned(tmp_26_reg_1238));
    sum_i_cast_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_i_fu_885_p2),64));
    sum_i_fu_885_p2 <= std_logic_vector(unsigned(tmp_i_cast_fu_881_p1) + unsigned(tmp_s_reg_1215));
    tmp1_cast_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_780_p2),10));
    tmp1_fu_780_p2 <= std_logic_vector(unsigned(p_shl9_reg_1189) + unsigned(i_neighbor_cast_fu_764_p1));
    tmp2_cast_fu_984_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_979_p2),11));
    tmp2_fu_979_p2 <= std_logic_vector(unsigned(p_shl4_reg_1305) + unsigned(i_neighbor1_cast9_fu_963_p1));
    tmp_18_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(result_out_dist7_reg_1124),64));
    tmp_19_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(result_out_index5_reg_1129),64));
    tmp_21_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_in1_reg_1141),64));
    tmp_23_fu_789_p2 <= std_logic_vector(unsigned(tmp1_cast_fu_785_p1) + unsigned(p_shl_reg_1184));
    tmp_24_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_789_p2),64));
    tmp_25_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_455),64));
    tmp_26_fu_863_p2 <= std_logic_vector(unsigned(p_shl5_fu_855_p3) - unsigned(extLd23_cast_fu_851_p1));
    tmp_27_fu_1032_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_1028_p1) + unsigned(p_shl6_fu_1012_p3));
    tmp_28_fu_988_p2 <= std_logic_vector(unsigned(tmp2_cast_fu_984_p1) + unsigned(p_shl3_reg_1300));
    tmp_29_fu_993_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_988_p2),64));
    tmp_30_fu_1102_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar1_reg_544),64));
    tmp_31_fu_1054_p2 <= std_logic_vector(unsigned(tmp_27_reg_1326) + unsigned(j3_cast6_fu_1038_p1));
    tmp_32_fu_1059_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_1054_p2),64));
    tmp_33_fu_1119_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar2_reg_555),64));
    tmp_34_fu_1080_p2 <= std_logic_vector(unsigned(tmp_27_reg_1326) + unsigned(k_cast5_fu_1064_p1));
    tmp_35_fu_1085_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_1080_p2),64));
    tmp_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter1_indvar_reg_409),64));
    tmp_i_cast_fu_881_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_478),10));
    tmp_i_fu_910_p2 <= std_logic_vector(unsigned(data_q0) - unsigned(data_q1));
    tmp_s_fu_829_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_825_p1) - unsigned(i_cast1_reg_1202));
end behav;
