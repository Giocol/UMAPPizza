-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rejection_sample is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_rng_state_AWVALID : OUT STD_LOGIC;
    m_axi_rng_state_AWREADY : IN STD_LOGIC;
    m_axi_rng_state_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rng_state_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rng_state_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rng_state_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rng_state_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rng_state_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rng_state_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rng_state_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rng_state_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rng_state_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rng_state_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rng_state_WVALID : OUT STD_LOGIC;
    m_axi_rng_state_WREADY : IN STD_LOGIC;
    m_axi_rng_state_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rng_state_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rng_state_WLAST : OUT STD_LOGIC;
    m_axi_rng_state_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rng_state_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rng_state_ARVALID : OUT STD_LOGIC;
    m_axi_rng_state_ARREADY : IN STD_LOGIC;
    m_axi_rng_state_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rng_state_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rng_state_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rng_state_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rng_state_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rng_state_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rng_state_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rng_state_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rng_state_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rng_state_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rng_state_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rng_state_RVALID : IN STD_LOGIC;
    m_axi_rng_state_RREADY : OUT STD_LOGIC;
    m_axi_rng_state_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rng_state_RLAST : IN STD_LOGIC;
    m_axi_rng_state_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rng_state_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rng_state_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rng_state_BVALID : IN STD_LOGIC;
    m_axi_rng_state_BREADY : OUT STD_LOGIC;
    m_axi_rng_state_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rng_state_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rng_state_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    rng_state3 : IN STD_LOGIC_VECTOR (29 downto 0);
    result_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    result_ce0 : OUT STD_LOGIC;
    result_we0 : OUT STD_LOGIC;
    result_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    result_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of rejection_sample is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (42 downto 0) := "0000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (42 downto 0) := "0000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (42 downto 0) := "0000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (42 downto 0) := "0000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (42 downto 0) := "0000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (42 downto 0) := "0000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (42 downto 0) := "0001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (42 downto 0) := "0010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (42 downto 0) := "0100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (42 downto 0) := "1000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_1_fu_119_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_191 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal result_addr_reg_196 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_fu_113_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_3_fu_144_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_3_reg_201 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_tau_rand_int_fu_101_ap_done : STD_LOGIC;
    signal tmp_15_fu_157_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_reg_206 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal tmp_16_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_212 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal k_1_fu_167_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_216 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal grp_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_tau_rand_int_fu_101_ap_start : STD_LOGIC;
    signal grp_tau_rand_int_fu_101_ap_idle : STD_LOGIC;
    signal grp_tau_rand_int_fu_101_ap_ready : STD_LOGIC;
    signal grp_tau_rand_int_fu_101_m_axi_state_AWVALID : STD_LOGIC;
    signal grp_tau_rand_int_fu_101_m_axi_state_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tau_rand_int_fu_101_m_axi_state_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_tau_rand_int_fu_101_m_axi_state_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tau_rand_int_fu_101_m_axi_state_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_tau_rand_int_fu_101_m_axi_state_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_tau_rand_int_fu_101_m_axi_state_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_tau_rand_int_fu_101_m_axi_state_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_tau_rand_int_fu_101_m_axi_state_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_tau_rand_int_fu_101_m_axi_state_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_tau_rand_int_fu_101_m_axi_state_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_tau_rand_int_fu_101_m_axi_state_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_tau_rand_int_fu_101_m_axi_state_WVALID : STD_LOGIC;
    signal grp_tau_rand_int_fu_101_m_axi_state_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tau_rand_int_fu_101_m_axi_state_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_tau_rand_int_fu_101_m_axi_state_WLAST : STD_LOGIC;
    signal grp_tau_rand_int_fu_101_m_axi_state_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_tau_rand_int_fu_101_m_axi_state_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_tau_rand_int_fu_101_m_axi_state_ARVALID : STD_LOGIC;
    signal grp_tau_rand_int_fu_101_m_axi_state_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tau_rand_int_fu_101_m_axi_state_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_tau_rand_int_fu_101_m_axi_state_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tau_rand_int_fu_101_m_axi_state_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_tau_rand_int_fu_101_m_axi_state_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_tau_rand_int_fu_101_m_axi_state_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_tau_rand_int_fu_101_m_axi_state_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_tau_rand_int_fu_101_m_axi_state_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_tau_rand_int_fu_101_m_axi_state_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_tau_rand_int_fu_101_m_axi_state_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_tau_rand_int_fu_101_m_axi_state_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_tau_rand_int_fu_101_m_axi_state_RREADY : STD_LOGIC;
    signal grp_tau_rand_int_fu_101_m_axi_state_BREADY : STD_LOGIC;
    signal grp_tau_rand_int_fu_101_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_77 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal k_reg_89 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_grp_tau_rand_int_fu_101_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_s_fu_125_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_173_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_178_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_130_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_fu_138_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_152_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_152_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_152_ap_start : STD_LOGIC;
    signal grp_fu_152_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (42 downto 0);

    component tau_rand_int IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_state_AWVALID : OUT STD_LOGIC;
        m_axi_state_AWREADY : IN STD_LOGIC;
        m_axi_state_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_state_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_state_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_state_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_state_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_state_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_state_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_state_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_state_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_state_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_WVALID : OUT STD_LOGIC;
        m_axi_state_WREADY : IN STD_LOGIC;
        m_axi_state_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_state_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_state_WLAST : OUT STD_LOGIC;
        m_axi_state_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_ARVALID : OUT STD_LOGIC;
        m_axi_state_ARREADY : IN STD_LOGIC;
        m_axi_state_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_state_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_state_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_state_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_state_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_state_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_state_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_state_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_state_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_state_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_RVALID : IN STD_LOGIC;
        m_axi_state_RREADY : OUT STD_LOGIC;
        m_axi_state_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_state_RLAST : IN STD_LOGIC;
        m_axi_state_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_state_BVALID : IN STD_LOGIC;
        m_axi_state_BREADY : OUT STD_LOGIC;
        m_axi_state_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_state_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        rng_state3 : IN STD_LOGIC_VECTOR (29 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nn_descent_srem_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    grp_tau_rand_int_fu_101 : component tau_rand_int
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_tau_rand_int_fu_101_ap_start,
        ap_done => grp_tau_rand_int_fu_101_ap_done,
        ap_idle => grp_tau_rand_int_fu_101_ap_idle,
        ap_ready => grp_tau_rand_int_fu_101_ap_ready,
        m_axi_state_AWVALID => grp_tau_rand_int_fu_101_m_axi_state_AWVALID,
        m_axi_state_AWREADY => m_axi_rng_state_AWREADY,
        m_axi_state_AWADDR => grp_tau_rand_int_fu_101_m_axi_state_AWADDR,
        m_axi_state_AWID => grp_tau_rand_int_fu_101_m_axi_state_AWID,
        m_axi_state_AWLEN => grp_tau_rand_int_fu_101_m_axi_state_AWLEN,
        m_axi_state_AWSIZE => grp_tau_rand_int_fu_101_m_axi_state_AWSIZE,
        m_axi_state_AWBURST => grp_tau_rand_int_fu_101_m_axi_state_AWBURST,
        m_axi_state_AWLOCK => grp_tau_rand_int_fu_101_m_axi_state_AWLOCK,
        m_axi_state_AWCACHE => grp_tau_rand_int_fu_101_m_axi_state_AWCACHE,
        m_axi_state_AWPROT => grp_tau_rand_int_fu_101_m_axi_state_AWPROT,
        m_axi_state_AWQOS => grp_tau_rand_int_fu_101_m_axi_state_AWQOS,
        m_axi_state_AWREGION => grp_tau_rand_int_fu_101_m_axi_state_AWREGION,
        m_axi_state_AWUSER => grp_tau_rand_int_fu_101_m_axi_state_AWUSER,
        m_axi_state_WVALID => grp_tau_rand_int_fu_101_m_axi_state_WVALID,
        m_axi_state_WREADY => m_axi_rng_state_WREADY,
        m_axi_state_WDATA => grp_tau_rand_int_fu_101_m_axi_state_WDATA,
        m_axi_state_WSTRB => grp_tau_rand_int_fu_101_m_axi_state_WSTRB,
        m_axi_state_WLAST => grp_tau_rand_int_fu_101_m_axi_state_WLAST,
        m_axi_state_WID => grp_tau_rand_int_fu_101_m_axi_state_WID,
        m_axi_state_WUSER => grp_tau_rand_int_fu_101_m_axi_state_WUSER,
        m_axi_state_ARVALID => grp_tau_rand_int_fu_101_m_axi_state_ARVALID,
        m_axi_state_ARREADY => m_axi_rng_state_ARREADY,
        m_axi_state_ARADDR => grp_tau_rand_int_fu_101_m_axi_state_ARADDR,
        m_axi_state_ARID => grp_tau_rand_int_fu_101_m_axi_state_ARID,
        m_axi_state_ARLEN => grp_tau_rand_int_fu_101_m_axi_state_ARLEN,
        m_axi_state_ARSIZE => grp_tau_rand_int_fu_101_m_axi_state_ARSIZE,
        m_axi_state_ARBURST => grp_tau_rand_int_fu_101_m_axi_state_ARBURST,
        m_axi_state_ARLOCK => grp_tau_rand_int_fu_101_m_axi_state_ARLOCK,
        m_axi_state_ARCACHE => grp_tau_rand_int_fu_101_m_axi_state_ARCACHE,
        m_axi_state_ARPROT => grp_tau_rand_int_fu_101_m_axi_state_ARPROT,
        m_axi_state_ARQOS => grp_tau_rand_int_fu_101_m_axi_state_ARQOS,
        m_axi_state_ARREGION => grp_tau_rand_int_fu_101_m_axi_state_ARREGION,
        m_axi_state_ARUSER => grp_tau_rand_int_fu_101_m_axi_state_ARUSER,
        m_axi_state_RVALID => m_axi_rng_state_RVALID,
        m_axi_state_RREADY => grp_tau_rand_int_fu_101_m_axi_state_RREADY,
        m_axi_state_RDATA => m_axi_rng_state_RDATA,
        m_axi_state_RLAST => m_axi_rng_state_RLAST,
        m_axi_state_RID => m_axi_rng_state_RID,
        m_axi_state_RUSER => m_axi_rng_state_RUSER,
        m_axi_state_RRESP => m_axi_rng_state_RRESP,
        m_axi_state_BVALID => m_axi_rng_state_BVALID,
        m_axi_state_BREADY => grp_tau_rand_int_fu_101_m_axi_state_BREADY,
        m_axi_state_BRESP => m_axi_rng_state_BRESP,
        m_axi_state_BID => m_axi_rng_state_BID,
        m_axi_state_BUSER => m_axi_rng_state_BUSER,
        rng_state3 => rng_state3,
        ap_return => grp_tau_rand_int_fu_101_ap_return);

    nn_descent_srem_3bkb_U3 : component nn_descent_srem_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_152_ap_start,
        done => grp_fu_152_ap_done,
        din0 => x_assign_3_reg_201,
        din1 => grp_fu_152_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_152_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_tau_rand_int_fu_101_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_tau_rand_int_fu_101_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_reg_grp_tau_rand_int_fu_101_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_tau_rand_int_fu_101_ap_ready)) then 
                    ap_reg_grp_tau_rand_int_fu_101_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_77_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) and (ap_const_lv1_0 = grp_fu_108_p2))) then 
                i_reg_77 <= i_1_reg_191;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_77 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_reg_89_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) and (ap_const_lv1_0 = grp_fu_108_p2) and (tmp_16_reg_212 = ap_const_lv1_1))) then 
                k_reg_89 <= k_1_reg_216;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                k_reg_89 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_191 <= i_1_fu_119_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                k_1_reg_216 <= k_1_fu_167_p2;
                tmp_16_reg_212 <= tmp_16_fu_161_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_113_p2 = ap_const_lv1_0))) then
                result_addr_reg_196 <= tmp_s_fu_125_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                tmp_15_reg_206 <= tmp_15_fu_157_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_tau_rand_int_fu_101_ap_done = ap_const_logic_1))) then
                x_assign_3_reg_201 <= x_assign_3_fu_144_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_113_p2, ap_CS_fsm_state4, grp_tau_rand_int_fu_101_ap_done, tmp_16_reg_212, ap_CS_fsm_state42, grp_fu_108_p2, ap_CS_fsm_state43)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_113_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_tau_rand_int_fu_101_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state42) and ((ap_const_lv1_0 = tmp_16_reg_212) or (ap_const_lv1_1 = grp_fu_108_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state43 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state43) and (ap_const_lv1_0 = grp_fu_108_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_113_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_113_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_113_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_113_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_113_p2 <= "1" when (i_reg_77 = ap_const_lv4_A) else "0";
    grp_fu_108_p2 <= "1" when (tmp_15_reg_206 = result_q0) else "0";

    grp_fu_152_ap_start_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_152_ap_start <= ap_const_logic_1;
        else 
            grp_fu_152_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_152_p1 <= ap_const_lv32_64(8 - 1 downto 0);
    grp_tau_rand_int_fu_101_ap_start <= ap_reg_grp_tau_rand_int_fu_101_ap_start;
    i_1_fu_119_p2 <= std_logic_vector(unsigned(i_reg_77) + unsigned(ap_const_lv4_1));
    k_1_fu_167_p2 <= std_logic_vector(unsigned(k_reg_89) + unsigned(ap_const_lv4_1));
    m_axi_rng_state_ARADDR <= grp_tau_rand_int_fu_101_m_axi_state_ARADDR;
    m_axi_rng_state_ARBURST <= grp_tau_rand_int_fu_101_m_axi_state_ARBURST;
    m_axi_rng_state_ARCACHE <= grp_tau_rand_int_fu_101_m_axi_state_ARCACHE;
    m_axi_rng_state_ARID <= grp_tau_rand_int_fu_101_m_axi_state_ARID;
    m_axi_rng_state_ARLEN <= grp_tau_rand_int_fu_101_m_axi_state_ARLEN;
    m_axi_rng_state_ARLOCK <= grp_tau_rand_int_fu_101_m_axi_state_ARLOCK;
    m_axi_rng_state_ARPROT <= grp_tau_rand_int_fu_101_m_axi_state_ARPROT;
    m_axi_rng_state_ARQOS <= grp_tau_rand_int_fu_101_m_axi_state_ARQOS;
    m_axi_rng_state_ARREGION <= grp_tau_rand_int_fu_101_m_axi_state_ARREGION;
    m_axi_rng_state_ARSIZE <= grp_tau_rand_int_fu_101_m_axi_state_ARSIZE;
    m_axi_rng_state_ARUSER <= grp_tau_rand_int_fu_101_m_axi_state_ARUSER;

    m_axi_rng_state_ARVALID_assign_proc : process(ap_CS_fsm_state4, grp_tau_rand_int_fu_101_m_axi_state_ARVALID, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_rng_state_ARVALID <= grp_tau_rand_int_fu_101_m_axi_state_ARVALID;
        else 
            m_axi_rng_state_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_rng_state_AWADDR <= grp_tau_rand_int_fu_101_m_axi_state_AWADDR;
    m_axi_rng_state_AWBURST <= grp_tau_rand_int_fu_101_m_axi_state_AWBURST;
    m_axi_rng_state_AWCACHE <= grp_tau_rand_int_fu_101_m_axi_state_AWCACHE;
    m_axi_rng_state_AWID <= grp_tau_rand_int_fu_101_m_axi_state_AWID;
    m_axi_rng_state_AWLEN <= grp_tau_rand_int_fu_101_m_axi_state_AWLEN;
    m_axi_rng_state_AWLOCK <= grp_tau_rand_int_fu_101_m_axi_state_AWLOCK;
    m_axi_rng_state_AWPROT <= grp_tau_rand_int_fu_101_m_axi_state_AWPROT;
    m_axi_rng_state_AWQOS <= grp_tau_rand_int_fu_101_m_axi_state_AWQOS;
    m_axi_rng_state_AWREGION <= grp_tau_rand_int_fu_101_m_axi_state_AWREGION;
    m_axi_rng_state_AWSIZE <= grp_tau_rand_int_fu_101_m_axi_state_AWSIZE;
    m_axi_rng_state_AWUSER <= grp_tau_rand_int_fu_101_m_axi_state_AWUSER;

    m_axi_rng_state_AWVALID_assign_proc : process(ap_CS_fsm_state4, grp_tau_rand_int_fu_101_m_axi_state_AWVALID, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_rng_state_AWVALID <= grp_tau_rand_int_fu_101_m_axi_state_AWVALID;
        else 
            m_axi_rng_state_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_rng_state_BREADY_assign_proc : process(ap_CS_fsm_state4, grp_tau_rand_int_fu_101_m_axi_state_BREADY, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_rng_state_BREADY <= grp_tau_rand_int_fu_101_m_axi_state_BREADY;
        else 
            m_axi_rng_state_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_rng_state_RREADY_assign_proc : process(ap_CS_fsm_state4, grp_tau_rand_int_fu_101_m_axi_state_RREADY, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_rng_state_RREADY <= grp_tau_rand_int_fu_101_m_axi_state_RREADY;
        else 
            m_axi_rng_state_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_rng_state_WDATA <= grp_tau_rand_int_fu_101_m_axi_state_WDATA;
    m_axi_rng_state_WID <= grp_tau_rand_int_fu_101_m_axi_state_WID;
    m_axi_rng_state_WLAST <= grp_tau_rand_int_fu_101_m_axi_state_WLAST;
    m_axi_rng_state_WSTRB <= grp_tau_rand_int_fu_101_m_axi_state_WSTRB;
    m_axi_rng_state_WUSER <= grp_tau_rand_int_fu_101_m_axi_state_WUSER;

    m_axi_rng_state_WVALID_assign_proc : process(ap_CS_fsm_state4, grp_tau_rand_int_fu_101_m_axi_state_WVALID, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_rng_state_WVALID <= grp_tau_rand_int_fu_101_m_axi_state_WVALID;
        else 
            m_axi_rng_state_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    result_address0_assign_proc : process(result_addr_reg_196, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, tmp_17_fu_173_p1, tmp_19_fu_178_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            result_address0 <= result_addr_reg_196;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            result_address0 <= tmp_19_fu_178_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            result_address0 <= tmp_17_fu_173_p1(4 - 1 downto 0);
        else 
            result_address0 <= "XXXX";
        end if; 
    end process;


    result_ce0_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            result_ce0 <= ap_const_logic_1;
        else 
            result_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_d0 <= tmp_15_reg_206;

    result_we0_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            result_we0 <= ap_const_logic_1;
        else 
            result_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_14_fu_130_p3 <= grp_tau_rand_int_fu_101_ap_return(31 downto 31);
    tmp_15_fu_157_p1 <= grp_fu_152_p2(8 - 1 downto 0);
    tmp_16_fu_161_p2 <= "1" when (unsigned(k_reg_89) < unsigned(i_reg_77)) else "0";
    tmp_17_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_89),64));
    tmp_19_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_89),64));
    tmp_i_fu_138_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(grp_tau_rand_int_fu_101_ap_return));
    tmp_s_fu_125_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_77),64));
    x_assign_3_fu_144_p3 <= 
        tmp_i_fu_138_p2 when (tmp_14_fu_130_p3(0) = '1') else 
        grp_tau_rand_int_fu_101_ap_return;
end behav;
