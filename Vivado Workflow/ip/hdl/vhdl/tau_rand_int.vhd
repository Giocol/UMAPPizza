-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tau_rand_int is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_state_AWVALID : OUT STD_LOGIC;
    m_axi_state_AWREADY : IN STD_LOGIC;
    m_axi_state_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_state_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_state_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_state_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_state_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_state_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_state_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_state_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_state_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_state_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_state_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_state_WVALID : OUT STD_LOGIC;
    m_axi_state_WREADY : IN STD_LOGIC;
    m_axi_state_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_state_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_state_WLAST : OUT STD_LOGIC;
    m_axi_state_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_state_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_state_ARVALID : OUT STD_LOGIC;
    m_axi_state_ARREADY : IN STD_LOGIC;
    m_axi_state_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_state_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_state_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_state_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_state_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_state_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_state_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_state_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_state_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_state_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_state_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_state_RVALID : IN STD_LOGIC;
    m_axi_state_RREADY : OUT STD_LOGIC;
    m_axi_state_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_state_RLAST : IN STD_LOGIC;
    m_axi_state_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_state_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_state_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_state_BVALID : IN STD_LOGIC;
    m_axi_state_BREADY : OUT STD_LOGIC;
    m_axi_state_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_state_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_state_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    rng_state3 : IN STD_LOGIC_VECTOR (29 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of tau_rand_int is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (44 downto 0) := "000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (44 downto 0) := "000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (44 downto 0) := "000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (44 downto 0) := "000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (44 downto 0) := "000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (44 downto 0) := "000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (44 downto 0) := "000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (44 downto 0) := "000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (44 downto 0) := "000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (44 downto 0) := "001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (44 downto 0) := "010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (44 downto 0) := "100000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv31_2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal state_blk_n_AR : STD_LOGIC;
    signal state_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal state_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal state_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal state_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal reg_101 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_m_axi_state_ARREADY : STD_LOGIC;
    signal state_addr_reg_282 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_288 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_4_reg_293 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_ioackin_m_axi_state_AWREADY : STD_LOGIC;
    signal tmp_5_fu_148_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_298 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_m_axi_state_WREADY : STD_LOGIC;
    signal sext_cast_fu_155_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_cast_reg_303 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum2_fu_158_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum2_reg_308 : STD_LOGIC_VECTOR (30 downto 0);
    signal state_addr_1_reg_313 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_319 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_s_reg_324 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_fu_206_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_329 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum4_fu_213_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum4_reg_334 : STD_LOGIC_VECTOR (30 downto 0);
    signal state_addr_2_reg_339 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_345 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_fu_260_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_350 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_272_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_355 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_fu_105_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_cast_fu_164_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum4_cast_fu_218_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_state_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_state_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_state_WREADY : STD_LOGIC := '0';
    signal tmp_1_fu_126_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_132_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_184_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_190_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_238_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_244_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_250_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp1_fu_267_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (44 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_state_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_state_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_state_ARREADY)))) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_sig_ioackin_m_axi_state_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_sig_ioackin_m_axi_state_ARREADY = ap_const_logic_1)))) then 
                    ap_reg_ioackin_m_axi_state_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = m_axi_state_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_logic_1 = m_axi_state_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_const_logic_1 = m_axi_state_ARREADY)))) then 
                    ap_reg_ioackin_m_axi_state_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_state_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_state_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_sig_ioackin_m_axi_state_AWREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_sig_ioackin_m_axi_state_AWREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state39) and (ap_sig_ioackin_m_axi_state_AWREADY = ap_const_logic_1)))) then 
                    ap_reg_ioackin_m_axi_state_AWREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_logic_1 = m_axi_state_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_logic_1 = m_axi_state_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state39) and (ap_const_logic_1 = m_axi_state_AWREADY)))) then 
                    ap_reg_ioackin_m_axi_state_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_state_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_state_WREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_sig_ioackin_m_axi_state_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state25) and (ap_sig_ioackin_m_axi_state_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_sig_ioackin_m_axi_state_WREADY = ap_const_logic_1)))) then 
                    ap_reg_ioackin_m_axi_state_WREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_logic_1 = m_axi_state_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state25) and (ap_const_logic_1 = m_axi_state_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_logic_1 = m_axi_state_WREADY)))) then 
                    ap_reg_ioackin_m_axi_state_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state8) and (m_axi_state_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (m_axi_state_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state38) and (m_axi_state_RVALID = ap_const_logic_1)))) then
                reg_101 <= m_axi_state_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (m_axi_state_BVALID = ap_const_logic_1))) then
                    sext_cast_reg_303(29 downto 0) <= sext_cast_fu_155_p1(29 downto 0);
                sum2_reg_308 <= sum2_fu_158_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_sig_ioackin_m_axi_state_ARREADY = ap_const_logic_1))) then
                    state_addr_1_reg_313(30 downto 0) <= sum2_cast_fu_164_p1(32 - 1 downto 0)(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_sig_ioackin_m_axi_state_ARREADY = ap_const_logic_1))) then
                    state_addr_2_reg_339(30 downto 0) <= sum4_cast_fu_218_p1(32 - 1 downto 0)(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_state_ARREADY))))) then
                    state_addr_reg_282(29 downto 0) <= sext_fu_105_p1(32 - 1 downto 0)(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (m_axi_state_BVALID = ap_const_logic_1))) then
                sum4_reg_334 <= sum4_fu_213_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state39) and (ap_sig_ioackin_m_axi_state_AWREADY = ap_const_logic_1))) then
                tmp_13_reg_350 <= tmp_13_fu_260_p3;
                tmp_14_reg_355 <= tmp_14_fu_272_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_sig_ioackin_m_axi_state_AWREADY = ap_const_logic_1))) then
                tmp_4_reg_293 <= tmp_3_fu_132_p2(31 downto 19);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_sig_ioackin_m_axi_state_WREADY = ap_const_logic_1))) then
                tmp_5_reg_298 <= tmp_5_fu_148_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) and (m_axi_state_RVALID = ap_const_logic_1))) then
                tmp_6_reg_319 <= m_axi_state_RDATA(27 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (ap_sig_ioackin_m_axi_state_WREADY = ap_const_logic_1))) then
                tmp_7_reg_329 <= tmp_7_fu_206_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) and (m_axi_state_RVALID = ap_const_logic_1))) then
                tmp_8_reg_345 <= m_axi_state_RDATA(14 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (m_axi_state_RVALID = ap_const_logic_1))) then
                tmp_reg_288 <= m_axi_state_RDATA(19 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_sig_ioackin_m_axi_state_AWREADY = ap_const_logic_1))) then
                tmp_s_reg_324 <= tmp_9_fu_190_p2(31 downto 25);
            end if;
        end if;
    end process;
    state_addr_reg_282(31 downto 30) <= "00";
    sext_cast_reg_303(30) <= '0';
    state_addr_1_reg_313(31) <= '0';
    state_addr_2_reg_339(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_state_RVALID, m_axi_state_BVALID, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_sig_ioackin_m_axi_state_ARREADY, ap_sig_ioackin_m_axi_state_AWREADY, ap_sig_ioackin_m_axi_state_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_state_ARREADY))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (m_axi_state_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_sig_ioackin_m_axi_state_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_sig_ioackin_m_axi_state_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (m_axi_state_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_sig_ioackin_m_axi_state_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and (m_axi_state_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_sig_ioackin_m_axi_state_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (ap_sig_ioackin_m_axi_state_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (m_axi_state_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_sig_ioackin_m_axi_state_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state38) and (m_axi_state_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state39) and (ap_sig_ioackin_m_axi_state_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_sig_ioackin_m_axi_state_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state45) and (m_axi_state_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_state_BVALID, ap_CS_fsm_state45)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state45) and (m_axi_state_BVALID = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_state_BVALID, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) and (m_axi_state_BVALID = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= tmp_14_reg_355;

    ap_sig_ioackin_m_axi_state_ARREADY_assign_proc : process(m_axi_state_ARREADY, ap_reg_ioackin_m_axi_state_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_state_ARREADY)) then 
            ap_sig_ioackin_m_axi_state_ARREADY <= m_axi_state_ARREADY;
        else 
            ap_sig_ioackin_m_axi_state_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_state_AWREADY_assign_proc : process(m_axi_state_AWREADY, ap_reg_ioackin_m_axi_state_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_state_AWREADY)) then 
            ap_sig_ioackin_m_axi_state_AWREADY <= m_axi_state_AWREADY;
        else 
            ap_sig_ioackin_m_axi_state_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_state_WREADY_assign_proc : process(m_axi_state_WREADY, ap_reg_ioackin_m_axi_state_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_state_WREADY)) then 
            ap_sig_ioackin_m_axi_state_WREADY <= m_axi_state_WREADY;
        else 
            ap_sig_ioackin_m_axi_state_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    m_axi_state_ARADDR_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state16, ap_CS_fsm_state31, sext_fu_105_p1, sum2_cast_fu_164_p1, sum4_cast_fu_218_p1, ap_reg_ioackin_m_axi_state_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_state_ARREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                m_axi_state_ARADDR <= sum4_cast_fu_218_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                m_axi_state_ARADDR <= sum2_cast_fu_164_p1(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                m_axi_state_ARADDR <= sext_fu_105_p1(32 - 1 downto 0);
            else 
                m_axi_state_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_state_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_state_ARBURST <= ap_const_lv2_0;
    m_axi_state_ARCACHE <= ap_const_lv4_0;
    m_axi_state_ARID <= ap_const_lv1_0;
    m_axi_state_ARLEN <= ap_const_lv32_1;
    m_axi_state_ARLOCK <= ap_const_lv2_0;
    m_axi_state_ARPROT <= ap_const_lv3_0;
    m_axi_state_ARQOS <= ap_const_lv4_0;
    m_axi_state_ARREGION <= ap_const_lv4_0;
    m_axi_state_ARSIZE <= ap_const_lv3_0;
    m_axi_state_ARUSER <= ap_const_lv1_0;

    m_axi_state_ARVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state16, ap_CS_fsm_state31, ap_reg_ioackin_m_axi_state_ARREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_state_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_state_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_state_ARREADY)))) then 
            m_axi_state_ARVALID <= ap_const_logic_1;
        else 
            m_axi_state_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_state_AWADDR_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state24, ap_CS_fsm_state39, state_addr_reg_282, state_addr_1_reg_313, state_addr_2_reg_339, ap_reg_ioackin_m_axi_state_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_state_AWREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                m_axi_state_AWADDR <= state_addr_2_reg_339;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                m_axi_state_AWADDR <= state_addr_1_reg_313;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                m_axi_state_AWADDR <= state_addr_reg_282;
            else 
                m_axi_state_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_state_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_state_AWBURST <= ap_const_lv2_0;
    m_axi_state_AWCACHE <= ap_const_lv4_0;
    m_axi_state_AWID <= ap_const_lv1_0;
    m_axi_state_AWLEN <= ap_const_lv32_1;
    m_axi_state_AWLOCK <= ap_const_lv2_0;
    m_axi_state_AWPROT <= ap_const_lv3_0;
    m_axi_state_AWQOS <= ap_const_lv4_0;
    m_axi_state_AWREGION <= ap_const_lv4_0;
    m_axi_state_AWSIZE <= ap_const_lv3_0;
    m_axi_state_AWUSER <= ap_const_lv1_0;

    m_axi_state_AWVALID_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state24, ap_CS_fsm_state39, ap_reg_ioackin_m_axi_state_AWREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_state_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_state_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state39) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_state_AWREADY)))) then 
            m_axi_state_AWVALID <= ap_const_logic_1;
        else 
            m_axi_state_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_state_BREADY_assign_proc : process(m_axi_state_BVALID, ap_CS_fsm_state15, ap_CS_fsm_state30, ap_CS_fsm_state45)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state15) and (m_axi_state_BVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state30) and (m_axi_state_BVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state45) and (m_axi_state_BVALID = ap_const_logic_1)))) then 
            m_axi_state_BREADY <= ap_const_logic_1;
        else 
            m_axi_state_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_state_RREADY_assign_proc : process(m_axi_state_RVALID, ap_CS_fsm_state8, ap_CS_fsm_state23, ap_CS_fsm_state38)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state8) and (m_axi_state_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (m_axi_state_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state38) and (m_axi_state_RVALID = ap_const_logic_1)))) then 
            m_axi_state_RREADY <= ap_const_logic_1;
        else 
            m_axi_state_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_state_WDATA_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state25, ap_CS_fsm_state40, tmp_5_fu_148_p3, tmp_7_fu_206_p3, tmp_13_reg_350, ap_reg_ioackin_m_axi_state_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_state_WREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                m_axi_state_WDATA <= tmp_13_reg_350;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                m_axi_state_WDATA <= tmp_7_fu_206_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                m_axi_state_WDATA <= tmp_5_fu_148_p3;
            else 
                m_axi_state_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_state_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_state_WID <= ap_const_lv1_0;
    m_axi_state_WLAST <= ap_const_logic_0;
    m_axi_state_WSTRB <= ap_const_lv4_F;
    m_axi_state_WUSER <= ap_const_lv1_0;

    m_axi_state_WVALID_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state25, ap_CS_fsm_state40, ap_reg_ioackin_m_axi_state_WREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_state_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state25) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_state_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_state_WREADY)))) then 
            m_axi_state_WVALID <= ap_const_logic_1;
        else 
            m_axi_state_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    sext_cast_fu_155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rng_state3),31));
    sext_fu_105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rng_state3),64));

    state_blk_n_AR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_state_ARREADY, ap_CS_fsm_state16, ap_CS_fsm_state31)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            state_blk_n_AR <= m_axi_state_ARREADY;
        else 
            state_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    state_blk_n_AW_assign_proc : process(m_axi_state_AWREADY, ap_CS_fsm_state9, ap_CS_fsm_state24, ap_CS_fsm_state39)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            state_blk_n_AW <= m_axi_state_AWREADY;
        else 
            state_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    state_blk_n_B_assign_proc : process(m_axi_state_BVALID, ap_CS_fsm_state15, ap_CS_fsm_state30, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            state_blk_n_B <= m_axi_state_BVALID;
        else 
            state_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    state_blk_n_R_assign_proc : process(m_axi_state_RVALID, ap_CS_fsm_state8, ap_CS_fsm_state23, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            state_blk_n_R <= m_axi_state_RVALID;
        else 
            state_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    state_blk_n_W_assign_proc : process(m_axi_state_WREADY, ap_CS_fsm_state10, ap_CS_fsm_state25, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            state_blk_n_W <= m_axi_state_WREADY;
        else 
            state_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    sum2_cast_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_reg_308),64));
    sum2_fu_158_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(sext_cast_fu_155_p1));
    sum4_cast_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum4_reg_334),64));
    sum4_fu_213_p2 <= std_logic_vector(unsigned(ap_const_lv31_2) + unsigned(sext_cast_reg_303));
    tmp1_fu_267_p2 <= (tmp_5_reg_298 xor tmp_13_fu_260_p3);
    tmp_10_fu_238_p2 <= std_logic_vector(shift_left(unsigned(reg_101),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    tmp_11_fu_244_p2 <= (reg_101 xor tmp_10_fu_238_p2);
    tmp_12_fu_250_p4 <= tmp_11_fu_244_p2(31 downto 11);
    tmp_13_fu_260_p3 <= (tmp_8_reg_345 & tmp_12_fu_250_p4);
    tmp_14_fu_272_p2 <= (tmp1_fu_267_p2 xor tmp_7_reg_329);
    tmp_1_fu_126_p2 <= std_logic_vector(shift_left(unsigned(reg_101),to_integer(unsigned('0' & ap_const_lv32_D(31-1 downto 0)))));
    tmp_2_fu_184_p2 <= std_logic_vector(shift_left(unsigned(reg_101),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_3_fu_132_p2 <= (reg_101 xor tmp_1_fu_126_p2);
    tmp_5_fu_148_p3 <= (tmp_reg_288 & tmp_4_reg_293);
    tmp_7_fu_206_p3 <= (tmp_6_reg_319 & tmp_s_reg_324);
    tmp_9_fu_190_p2 <= (reg_101 xor tmp_2_fu_184_p2);
end behav;
