-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity build_candidates is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    current_graph_index_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    current_graph_index_ce0 : OUT STD_LOGIC;
    current_graph_index_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    current_graph_flag_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    current_graph_flag_ce0 : OUT STD_LOGIC;
    current_graph_flag_we0 : OUT STD_LOGIC;
    current_graph_flag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    current_graph_flag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rng_state_AWVALID : OUT STD_LOGIC;
    m_axi_rng_state_AWREADY : IN STD_LOGIC;
    m_axi_rng_state_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rng_state_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rng_state_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rng_state_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rng_state_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rng_state_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rng_state_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rng_state_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rng_state_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rng_state_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rng_state_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rng_state_WVALID : OUT STD_LOGIC;
    m_axi_rng_state_WREADY : IN STD_LOGIC;
    m_axi_rng_state_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rng_state_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rng_state_WLAST : OUT STD_LOGIC;
    m_axi_rng_state_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rng_state_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rng_state_ARVALID : OUT STD_LOGIC;
    m_axi_rng_state_ARREADY : IN STD_LOGIC;
    m_axi_rng_state_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rng_state_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rng_state_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rng_state_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rng_state_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rng_state_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rng_state_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rng_state_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rng_state_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rng_state_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rng_state_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rng_state_RVALID : IN STD_LOGIC;
    m_axi_rng_state_RREADY : OUT STD_LOGIC;
    m_axi_rng_state_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rng_state_RLAST : IN STD_LOGIC;
    m_axi_rng_state_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rng_state_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rng_state_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rng_state_BVALID : IN STD_LOGIC;
    m_axi_rng_state_BREADY : OUT STD_LOGIC;
    m_axi_rng_state_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rng_state_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rng_state_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    rng_state3 : IN STD_LOGIC_VECTOR (29 downto 0);
    candidate_neighbors_s_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    candidate_neighbors_s_ce0 : OUT STD_LOGIC;
    candidate_neighbors_s_we0 : OUT STD_LOGIC;
    candidate_neighbors_s_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    candidate_neighbors_s_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    candidate_neighbors_13_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    candidate_neighbors_13_ce0 : OUT STD_LOGIC;
    candidate_neighbors_13_we0 : OUT STD_LOGIC;
    candidate_neighbors_13_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    candidate_neighbors_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    candidate_neighbors_14_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    candidate_neighbors_14_ce0 : OUT STD_LOGIC;
    candidate_neighbors_14_we0 : OUT STD_LOGIC;
    candidate_neighbors_14_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    candidate_neighbors_14_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of build_candidates is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_cast4_fu_142_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast4_reg_222 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_7_fu_152_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_7_reg_231 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_fu_158_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_reg_236 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond1_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl9_fu_166_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl9_reg_241 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_3_fu_184_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_3_reg_249 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_95_fu_204_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_95_reg_254 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx_reg_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_28_fu_209_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_270 : STD_LOGIC_VECTOR (0 downto 0);
    signal current_graph_flag_a_reg_274 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_tau_rand_fu_135_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_279 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_tau_rand_fu_135_ap_done : STD_LOGIC;
    signal isn_reg_284 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_heap_push_candidate_fu_120_ap_start : STD_LOGIC;
    signal grp_heap_push_candidate_fu_120_ap_done : STD_LOGIC;
    signal grp_heap_push_candidate_fu_120_ap_idle : STD_LOGIC;
    signal grp_heap_push_candidate_fu_120_ap_ready : STD_LOGIC;
    signal grp_heap_push_candidate_fu_120_current_graph_index_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_heap_push_candidate_fu_120_current_graph_index_ce0 : STD_LOGIC;
    signal grp_heap_push_candidate_fu_120_current_graph_index_we0 : STD_LOGIC;
    signal grp_heap_push_candidate_fu_120_current_graph_index_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_heap_push_candidate_fu_120_current_graph_dist_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_heap_push_candidate_fu_120_current_graph_dist_ce0 : STD_LOGIC;
    signal grp_heap_push_candidate_fu_120_current_graph_dist_we0 : STD_LOGIC;
    signal grp_heap_push_candidate_fu_120_current_graph_dist_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_heap_push_candidate_fu_120_current_graph_flag_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_heap_push_candidate_fu_120_current_graph_flag_ce0 : STD_LOGIC;
    signal grp_heap_push_candidate_fu_120_current_graph_flag_we0 : STD_LOGIC;
    signal grp_heap_push_candidate_fu_120_current_graph_flag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_heap_push_candidate_fu_120_row : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_heap_push_candidate_fu_120_index : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tau_rand_fu_135_ap_start : STD_LOGIC;
    signal grp_tau_rand_fu_135_ap_idle : STD_LOGIC;
    signal grp_tau_rand_fu_135_ap_ready : STD_LOGIC;
    signal grp_tau_rand_fu_135_m_axi_state_AWVALID : STD_LOGIC;
    signal grp_tau_rand_fu_135_m_axi_state_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tau_rand_fu_135_m_axi_state_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_tau_rand_fu_135_m_axi_state_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tau_rand_fu_135_m_axi_state_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_tau_rand_fu_135_m_axi_state_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_tau_rand_fu_135_m_axi_state_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_tau_rand_fu_135_m_axi_state_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_tau_rand_fu_135_m_axi_state_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_tau_rand_fu_135_m_axi_state_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_tau_rand_fu_135_m_axi_state_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_tau_rand_fu_135_m_axi_state_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_tau_rand_fu_135_m_axi_state_WVALID : STD_LOGIC;
    signal grp_tau_rand_fu_135_m_axi_state_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tau_rand_fu_135_m_axi_state_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_tau_rand_fu_135_m_axi_state_WLAST : STD_LOGIC;
    signal grp_tau_rand_fu_135_m_axi_state_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_tau_rand_fu_135_m_axi_state_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_tau_rand_fu_135_m_axi_state_ARVALID : STD_LOGIC;
    signal grp_tau_rand_fu_135_m_axi_state_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tau_rand_fu_135_m_axi_state_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_tau_rand_fu_135_m_axi_state_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tau_rand_fu_135_m_axi_state_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_tau_rand_fu_135_m_axi_state_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_tau_rand_fu_135_m_axi_state_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_tau_rand_fu_135_m_axi_state_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_tau_rand_fu_135_m_axi_state_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_tau_rand_fu_135_m_axi_state_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_tau_rand_fu_135_m_axi_state_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_tau_rand_fu_135_m_axi_state_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_tau_rand_fu_135_m_axi_state_RREADY : STD_LOGIC;
    signal grp_tau_rand_fu_135_m_axi_state_BREADY : STD_LOGIC;
    signal i_reg_98 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_109 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_state9_on_subcall_done : BOOLEAN;
    signal ap_reg_grp_heap_push_candidate_fu_120_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_reg_grp_tau_rand_fu_135_ap_start : STD_LOGIC := '0';
    signal j_cast2_fu_174_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_fu_190_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_cast_fu_195_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_199_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component heap_push_candidate IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        current_graph_index_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        current_graph_index_ce0 : OUT STD_LOGIC;
        current_graph_index_we0 : OUT STD_LOGIC;
        current_graph_index_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        current_graph_index_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        current_graph_dist_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        current_graph_dist_ce0 : OUT STD_LOGIC;
        current_graph_dist_we0 : OUT STD_LOGIC;
        current_graph_dist_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        current_graph_dist_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        current_graph_flag_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        current_graph_flag_ce0 : OUT STD_LOGIC;
        current_graph_flag_we0 : OUT STD_LOGIC;
        current_graph_flag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        current_graph_flag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        row : IN STD_LOGIC_VECTOR (31 downto 0);
        weight : IN STD_LOGIC_VECTOR (0 downto 0);
        index : IN STD_LOGIC_VECTOR (31 downto 0);
        flag : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component tau_rand IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_state_AWVALID : OUT STD_LOGIC;
        m_axi_state_AWREADY : IN STD_LOGIC;
        m_axi_state_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_state_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_state_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_state_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_state_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_state_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_state_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_state_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_state_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_state_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_WVALID : OUT STD_LOGIC;
        m_axi_state_WREADY : IN STD_LOGIC;
        m_axi_state_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_state_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_state_WLAST : OUT STD_LOGIC;
        m_axi_state_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_ARVALID : OUT STD_LOGIC;
        m_axi_state_ARREADY : IN STD_LOGIC;
        m_axi_state_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_state_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_state_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_state_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_state_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_state_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_state_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_state_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_state_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_state_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_RVALID : IN STD_LOGIC;
        m_axi_state_RREADY : OUT STD_LOGIC;
        m_axi_state_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_state_RLAST : IN STD_LOGIC;
        m_axi_state_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_state_BVALID : IN STD_LOGIC;
        m_axi_state_BREADY : OUT STD_LOGIC;
        m_axi_state_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_state_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        rng_state3 : IN STD_LOGIC_VECTOR (29 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    grp_heap_push_candidate_fu_120 : component heap_push_candidate
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_heap_push_candidate_fu_120_ap_start,
        ap_done => grp_heap_push_candidate_fu_120_ap_done,
        ap_idle => grp_heap_push_candidate_fu_120_ap_idle,
        ap_ready => grp_heap_push_candidate_fu_120_ap_ready,
        current_graph_index_address0 => grp_heap_push_candidate_fu_120_current_graph_index_address0,
        current_graph_index_ce0 => grp_heap_push_candidate_fu_120_current_graph_index_ce0,
        current_graph_index_we0 => grp_heap_push_candidate_fu_120_current_graph_index_we0,
        current_graph_index_d0 => grp_heap_push_candidate_fu_120_current_graph_index_d0,
        current_graph_index_q0 => candidate_neighbors_s_q0,
        current_graph_dist_address0 => grp_heap_push_candidate_fu_120_current_graph_dist_address0,
        current_graph_dist_ce0 => grp_heap_push_candidate_fu_120_current_graph_dist_ce0,
        current_graph_dist_we0 => grp_heap_push_candidate_fu_120_current_graph_dist_we0,
        current_graph_dist_d0 => grp_heap_push_candidate_fu_120_current_graph_dist_d0,
        current_graph_dist_q0 => candidate_neighbors_13_q0,
        current_graph_flag_address0 => grp_heap_push_candidate_fu_120_current_graph_flag_address0,
        current_graph_flag_ce0 => grp_heap_push_candidate_fu_120_current_graph_flag_ce0,
        current_graph_flag_we0 => grp_heap_push_candidate_fu_120_current_graph_flag_we0,
        current_graph_flag_d0 => grp_heap_push_candidate_fu_120_current_graph_flag_d0,
        current_graph_flag_q0 => candidate_neighbors_14_q0,
        row => grp_heap_push_candidate_fu_120_row,
        weight => tmp_reg_279,
        index => grp_heap_push_candidate_fu_120_index,
        flag => isn_reg_284);

    grp_tau_rand_fu_135 : component tau_rand
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_tau_rand_fu_135_ap_start,
        ap_done => grp_tau_rand_fu_135_ap_done,
        ap_idle => grp_tau_rand_fu_135_ap_idle,
        ap_ready => grp_tau_rand_fu_135_ap_ready,
        m_axi_state_AWVALID => grp_tau_rand_fu_135_m_axi_state_AWVALID,
        m_axi_state_AWREADY => m_axi_rng_state_AWREADY,
        m_axi_state_AWADDR => grp_tau_rand_fu_135_m_axi_state_AWADDR,
        m_axi_state_AWID => grp_tau_rand_fu_135_m_axi_state_AWID,
        m_axi_state_AWLEN => grp_tau_rand_fu_135_m_axi_state_AWLEN,
        m_axi_state_AWSIZE => grp_tau_rand_fu_135_m_axi_state_AWSIZE,
        m_axi_state_AWBURST => grp_tau_rand_fu_135_m_axi_state_AWBURST,
        m_axi_state_AWLOCK => grp_tau_rand_fu_135_m_axi_state_AWLOCK,
        m_axi_state_AWCACHE => grp_tau_rand_fu_135_m_axi_state_AWCACHE,
        m_axi_state_AWPROT => grp_tau_rand_fu_135_m_axi_state_AWPROT,
        m_axi_state_AWQOS => grp_tau_rand_fu_135_m_axi_state_AWQOS,
        m_axi_state_AWREGION => grp_tau_rand_fu_135_m_axi_state_AWREGION,
        m_axi_state_AWUSER => grp_tau_rand_fu_135_m_axi_state_AWUSER,
        m_axi_state_WVALID => grp_tau_rand_fu_135_m_axi_state_WVALID,
        m_axi_state_WREADY => m_axi_rng_state_WREADY,
        m_axi_state_WDATA => grp_tau_rand_fu_135_m_axi_state_WDATA,
        m_axi_state_WSTRB => grp_tau_rand_fu_135_m_axi_state_WSTRB,
        m_axi_state_WLAST => grp_tau_rand_fu_135_m_axi_state_WLAST,
        m_axi_state_WID => grp_tau_rand_fu_135_m_axi_state_WID,
        m_axi_state_WUSER => grp_tau_rand_fu_135_m_axi_state_WUSER,
        m_axi_state_ARVALID => grp_tau_rand_fu_135_m_axi_state_ARVALID,
        m_axi_state_ARREADY => m_axi_rng_state_ARREADY,
        m_axi_state_ARADDR => grp_tau_rand_fu_135_m_axi_state_ARADDR,
        m_axi_state_ARID => grp_tau_rand_fu_135_m_axi_state_ARID,
        m_axi_state_ARLEN => grp_tau_rand_fu_135_m_axi_state_ARLEN,
        m_axi_state_ARSIZE => grp_tau_rand_fu_135_m_axi_state_ARSIZE,
        m_axi_state_ARBURST => grp_tau_rand_fu_135_m_axi_state_ARBURST,
        m_axi_state_ARLOCK => grp_tau_rand_fu_135_m_axi_state_ARLOCK,
        m_axi_state_ARCACHE => grp_tau_rand_fu_135_m_axi_state_ARCACHE,
        m_axi_state_ARPROT => grp_tau_rand_fu_135_m_axi_state_ARPROT,
        m_axi_state_ARQOS => grp_tau_rand_fu_135_m_axi_state_ARQOS,
        m_axi_state_ARREGION => grp_tau_rand_fu_135_m_axi_state_ARREGION,
        m_axi_state_ARUSER => grp_tau_rand_fu_135_m_axi_state_ARUSER,
        m_axi_state_RVALID => m_axi_rng_state_RVALID,
        m_axi_state_RREADY => grp_tau_rand_fu_135_m_axi_state_RREADY,
        m_axi_state_RDATA => m_axi_rng_state_RDATA,
        m_axi_state_RLAST => m_axi_rng_state_RLAST,
        m_axi_state_RID => m_axi_rng_state_RID,
        m_axi_state_RUSER => m_axi_rng_state_RUSER,
        m_axi_state_RRESP => m_axi_rng_state_RRESP,
        m_axi_state_BVALID => m_axi_rng_state_BVALID,
        m_axi_state_BREADY => grp_tau_rand_fu_135_m_axi_state_BREADY,
        m_axi_state_BRESP => m_axi_rng_state_BRESP,
        m_axi_state_BID => m_axi_rng_state_BID,
        m_axi_state_BUSER => m_axi_rng_state_BUSER,
        rng_state3 => rng_state3,
        ap_return => grp_tau_rand_fu_135_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_heap_push_candidate_fu_120_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_heap_push_candidate_fu_120_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_reg_grp_heap_push_candidate_fu_120_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_heap_push_candidate_fu_120_ap_ready)) then 
                    ap_reg_grp_heap_push_candidate_fu_120_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_tau_rand_fu_135_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_tau_rand_fu_135_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = tmp_28_fu_209_p3))) then 
                    ap_reg_grp_tau_rand_fu_135_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_tau_rand_fu_135_ap_ready)) then 
                    ap_reg_grp_tau_rand_fu_135_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_178_p2 = ap_const_lv1_1))) then 
                i_reg_98 <= i_7_reg_231;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_98 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_146_p2 = ap_const_lv1_0))) then 
                j_reg_109 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_block_state9_on_subcall_done = ap_const_boolean_0))) then 
                j_reg_109 <= j_3_reg_249;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = tmp_28_fu_209_p3))) then
                current_graph_flag_a_reg_274 <= tmp_95_reg_254(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_7_reg_231 <= i_7_fu_152_p2;
                    i_cast4_reg_222(6 downto 0) <= i_cast4_fu_142_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                idx_reg_264 <= current_graph_index_q0;
                tmp_28_reg_270 <= current_graph_index_q0(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                isn_reg_284 <= current_graph_flag_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_3_reg_249 <= j_3_fu_184_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_146_p2 = ap_const_lv1_0))) then
                    p_shl9_reg_241(7 downto 1) <= p_shl9_fu_166_p3(7 downto 1);
                    p_shl_reg_236(9 downto 3) <= p_shl_fu_158_p3(9 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond_fu_178_p2))) then
                    tmp_95_reg_254(9 downto 0) <= tmp_95_fu_204_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_tau_rand_fu_135_ap_done = ap_const_logic_1))) then
                tmp_reg_279 <= grp_tau_rand_fu_135_ap_return;
            end if;
        end if;
    end process;
    i_cast4_reg_222(31 downto 7) <= "0000000000000000000000000";
    p_shl_reg_236(2 downto 0) <= "000";
    p_shl9_reg_241(0) <= '0';
    tmp_95_reg_254(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_146_p2, ap_CS_fsm_state3, exitcond_fu_178_p2, ap_CS_fsm_state4, tmp_28_fu_209_p3, ap_CS_fsm_state5, grp_tau_rand_fu_135_ap_done, grp_heap_push_candidate_fu_120_ap_done, ap_CS_fsm_state9, ap_block_state9_on_subcall_done, ap_CS_fsm_state7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_146_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_178_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_28_fu_209_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_tau_rand_fu_135_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_heap_push_candidate_fu_120_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_block_state9_on_subcall_done = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state9_on_subcall_done_assign_proc : process(tmp_28_reg_270, grp_heap_push_candidate_fu_120_ap_done)
    begin
                ap_block_state9_on_subcall_done <= ((ap_const_logic_0 = grp_heap_push_candidate_fu_120_ap_done) and (ap_const_lv1_0 = tmp_28_reg_270));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_146_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_146_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_146_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_146_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    candidate_neighbors_13_address0 <= grp_heap_push_candidate_fu_120_current_graph_dist_address0;

    candidate_neighbors_13_ce0_assign_proc : process(tmp_28_reg_270, grp_heap_push_candidate_fu_120_current_graph_dist_ce0, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_28_reg_270)))) then 
            candidate_neighbors_13_ce0 <= grp_heap_push_candidate_fu_120_current_graph_dist_ce0;
        else 
            candidate_neighbors_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    candidate_neighbors_13_d0 <= grp_heap_push_candidate_fu_120_current_graph_dist_d0;

    candidate_neighbors_13_we0_assign_proc : process(tmp_28_reg_270, grp_heap_push_candidate_fu_120_current_graph_dist_we0, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_28_reg_270)))) then 
            candidate_neighbors_13_we0 <= grp_heap_push_candidate_fu_120_current_graph_dist_we0;
        else 
            candidate_neighbors_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    candidate_neighbors_14_address0 <= grp_heap_push_candidate_fu_120_current_graph_flag_address0;

    candidate_neighbors_14_ce0_assign_proc : process(tmp_28_reg_270, grp_heap_push_candidate_fu_120_current_graph_flag_ce0, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_28_reg_270)))) then 
            candidate_neighbors_14_ce0 <= grp_heap_push_candidate_fu_120_current_graph_flag_ce0;
        else 
            candidate_neighbors_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    candidate_neighbors_14_d0 <= grp_heap_push_candidate_fu_120_current_graph_flag_d0;

    candidate_neighbors_14_we0_assign_proc : process(tmp_28_reg_270, grp_heap_push_candidate_fu_120_current_graph_flag_we0, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_28_reg_270)))) then 
            candidate_neighbors_14_we0 <= grp_heap_push_candidate_fu_120_current_graph_flag_we0;
        else 
            candidate_neighbors_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    candidate_neighbors_s_address0 <= grp_heap_push_candidate_fu_120_current_graph_index_address0;

    candidate_neighbors_s_ce0_assign_proc : process(tmp_28_reg_270, grp_heap_push_candidate_fu_120_current_graph_index_ce0, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_28_reg_270)))) then 
            candidate_neighbors_s_ce0 <= grp_heap_push_candidate_fu_120_current_graph_index_ce0;
        else 
            candidate_neighbors_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    candidate_neighbors_s_d0 <= grp_heap_push_candidate_fu_120_current_graph_index_d0;

    candidate_neighbors_s_we0_assign_proc : process(tmp_28_reg_270, grp_heap_push_candidate_fu_120_current_graph_index_we0, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_28_reg_270)))) then 
            candidate_neighbors_s_we0 <= grp_heap_push_candidate_fu_120_current_graph_index_we0;
        else 
            candidate_neighbors_s_we0 <= ap_const_logic_0;
        end if; 
    end process;

    current_graph_flag_address0 <= current_graph_flag_a_reg_274;

    current_graph_flag_ce0_assign_proc : process(ap_CS_fsm_state5, grp_tau_rand_fu_135_ap_done, ap_CS_fsm_state6)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_tau_rand_fu_135_ap_done = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            current_graph_flag_ce0 <= ap_const_logic_1;
        else 
            current_graph_flag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    current_graph_flag_d0 <= ap_const_lv32_0;

    current_graph_flag_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            current_graph_flag_we0 <= ap_const_logic_1;
        else 
            current_graph_flag_we0 <= ap_const_logic_0;
        end if; 
    end process;

    current_graph_index_address0 <= tmp_95_fu_204_p1(10 - 1 downto 0);

    current_graph_index_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            current_graph_index_ce0 <= ap_const_logic_1;
        else 
            current_graph_index_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_146_p2 <= "1" when (i_reg_98 = ap_const_lv7_64) else "0";
    exitcond_fu_178_p2 <= "1" when (j_reg_109 = ap_const_lv4_A) else "0";
    grp_heap_push_candidate_fu_120_ap_start <= ap_reg_grp_heap_push_candidate_fu_120_ap_start;

    grp_heap_push_candidate_fu_120_index_assign_proc : process(i_cast4_reg_222, idx_reg_264, tmp_28_reg_270, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_28_reg_270))) then 
            grp_heap_push_candidate_fu_120_index <= i_cast4_reg_222;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_heap_push_candidate_fu_120_index <= idx_reg_264;
        else 
            grp_heap_push_candidate_fu_120_index <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_heap_push_candidate_fu_120_row_assign_proc : process(i_cast4_reg_222, idx_reg_264, tmp_28_reg_270, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_28_reg_270))) then 
            grp_heap_push_candidate_fu_120_row <= idx_reg_264;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_heap_push_candidate_fu_120_row <= i_cast4_reg_222;
        else 
            grp_heap_push_candidate_fu_120_row <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_tau_rand_fu_135_ap_start <= ap_reg_grp_tau_rand_fu_135_ap_start;
    i_7_fu_152_p2 <= std_logic_vector(unsigned(i_reg_98) + unsigned(ap_const_lv7_1));
    i_cast4_fu_142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_98),32));
    j_3_fu_184_p2 <= std_logic_vector(unsigned(j_reg_109) + unsigned(ap_const_lv4_1));
    j_cast2_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_109),8));
    m_axi_rng_state_ARADDR <= grp_tau_rand_fu_135_m_axi_state_ARADDR;
    m_axi_rng_state_ARBURST <= grp_tau_rand_fu_135_m_axi_state_ARBURST;
    m_axi_rng_state_ARCACHE <= grp_tau_rand_fu_135_m_axi_state_ARCACHE;
    m_axi_rng_state_ARID <= grp_tau_rand_fu_135_m_axi_state_ARID;
    m_axi_rng_state_ARLEN <= grp_tau_rand_fu_135_m_axi_state_ARLEN;
    m_axi_rng_state_ARLOCK <= grp_tau_rand_fu_135_m_axi_state_ARLOCK;
    m_axi_rng_state_ARPROT <= grp_tau_rand_fu_135_m_axi_state_ARPROT;
    m_axi_rng_state_ARQOS <= grp_tau_rand_fu_135_m_axi_state_ARQOS;
    m_axi_rng_state_ARREGION <= grp_tau_rand_fu_135_m_axi_state_ARREGION;
    m_axi_rng_state_ARSIZE <= grp_tau_rand_fu_135_m_axi_state_ARSIZE;
    m_axi_rng_state_ARUSER <= grp_tau_rand_fu_135_m_axi_state_ARUSER;

    m_axi_rng_state_ARVALID_assign_proc : process(ap_CS_fsm_state4, tmp_28_fu_209_p3, ap_CS_fsm_state5, grp_tau_rand_fu_135_m_axi_state_ARVALID)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = tmp_28_fu_209_p3)) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_rng_state_ARVALID <= grp_tau_rand_fu_135_m_axi_state_ARVALID;
        else 
            m_axi_rng_state_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_rng_state_AWADDR <= grp_tau_rand_fu_135_m_axi_state_AWADDR;
    m_axi_rng_state_AWBURST <= grp_tau_rand_fu_135_m_axi_state_AWBURST;
    m_axi_rng_state_AWCACHE <= grp_tau_rand_fu_135_m_axi_state_AWCACHE;
    m_axi_rng_state_AWID <= grp_tau_rand_fu_135_m_axi_state_AWID;
    m_axi_rng_state_AWLEN <= grp_tau_rand_fu_135_m_axi_state_AWLEN;
    m_axi_rng_state_AWLOCK <= grp_tau_rand_fu_135_m_axi_state_AWLOCK;
    m_axi_rng_state_AWPROT <= grp_tau_rand_fu_135_m_axi_state_AWPROT;
    m_axi_rng_state_AWQOS <= grp_tau_rand_fu_135_m_axi_state_AWQOS;
    m_axi_rng_state_AWREGION <= grp_tau_rand_fu_135_m_axi_state_AWREGION;
    m_axi_rng_state_AWSIZE <= grp_tau_rand_fu_135_m_axi_state_AWSIZE;
    m_axi_rng_state_AWUSER <= grp_tau_rand_fu_135_m_axi_state_AWUSER;

    m_axi_rng_state_AWVALID_assign_proc : process(ap_CS_fsm_state4, tmp_28_fu_209_p3, ap_CS_fsm_state5, grp_tau_rand_fu_135_m_axi_state_AWVALID)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = tmp_28_fu_209_p3)) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_rng_state_AWVALID <= grp_tau_rand_fu_135_m_axi_state_AWVALID;
        else 
            m_axi_rng_state_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_rng_state_BREADY_assign_proc : process(ap_CS_fsm_state4, tmp_28_fu_209_p3, ap_CS_fsm_state5, grp_tau_rand_fu_135_m_axi_state_BREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = tmp_28_fu_209_p3)) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_rng_state_BREADY <= grp_tau_rand_fu_135_m_axi_state_BREADY;
        else 
            m_axi_rng_state_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_rng_state_RREADY_assign_proc : process(ap_CS_fsm_state4, tmp_28_fu_209_p3, ap_CS_fsm_state5, grp_tau_rand_fu_135_m_axi_state_RREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = tmp_28_fu_209_p3)) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_rng_state_RREADY <= grp_tau_rand_fu_135_m_axi_state_RREADY;
        else 
            m_axi_rng_state_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_rng_state_WDATA <= grp_tau_rand_fu_135_m_axi_state_WDATA;
    m_axi_rng_state_WID <= grp_tau_rand_fu_135_m_axi_state_WID;
    m_axi_rng_state_WLAST <= grp_tau_rand_fu_135_m_axi_state_WLAST;
    m_axi_rng_state_WSTRB <= grp_tau_rand_fu_135_m_axi_state_WSTRB;
    m_axi_rng_state_WUSER <= grp_tau_rand_fu_135_m_axi_state_WUSER;

    m_axi_rng_state_WVALID_assign_proc : process(ap_CS_fsm_state4, tmp_28_fu_209_p3, ap_CS_fsm_state5, grp_tau_rand_fu_135_m_axi_state_WVALID)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = tmp_28_fu_209_p3)) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_rng_state_WVALID <= grp_tau_rand_fu_135_m_axi_state_WVALID;
        else 
            m_axi_rng_state_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    p_shl9_fu_166_p3 <= (i_reg_98 & ap_const_lv1_0);
    p_shl_fu_158_p3 <= (i_reg_98 & ap_const_lv3_0);
    tmp1_cast_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_190_p2),10));
    tmp1_fu_190_p2 <= std_logic_vector(unsigned(p_shl9_reg_241) + unsigned(j_cast2_fu_174_p1));
    tmp_28_fu_209_p3 <= current_graph_index_q0(31 downto 31);
    tmp_95_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_199_p2),64));
    tmp_s_fu_199_p2 <= std_logic_vector(unsigned(tmp1_cast_fu_195_p1) + unsigned(p_shl_reg_236));
end behav;
