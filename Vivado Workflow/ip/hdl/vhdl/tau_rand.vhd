-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tau_rand is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_state_AWVALID : OUT STD_LOGIC;
    m_axi_state_AWREADY : IN STD_LOGIC;
    m_axi_state_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_state_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_state_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_state_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_state_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_state_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_state_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_state_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_state_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_state_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_state_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_state_WVALID : OUT STD_LOGIC;
    m_axi_state_WREADY : IN STD_LOGIC;
    m_axi_state_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_state_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_state_WLAST : OUT STD_LOGIC;
    m_axi_state_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_state_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_state_ARVALID : OUT STD_LOGIC;
    m_axi_state_ARREADY : IN STD_LOGIC;
    m_axi_state_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_state_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_state_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_state_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_state_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_state_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_state_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_state_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_state_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_state_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_state_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_state_RVALID : IN STD_LOGIC;
    m_axi_state_RREADY : OUT STD_LOGIC;
    m_axi_state_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_state_RLAST : IN STD_LOGIC;
    m_axi_state_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_state_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_state_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_state_BVALID : IN STD_LOGIC;
    m_axi_state_BREADY : OUT STD_LOGIC;
    m_axi_state_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_state_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_state_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    rng_state3 : IN STD_LOGIC_VECTOR (29 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of tau_rand is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv65_100000003 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000100000000000000000000000000000011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_tau_rand_int_fu_42_ap_done : STD_LOGIC;
    signal tmp_reg_105 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_54_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_reg_110 : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_12_reg_115 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_tau_rand_int_fu_42_ap_start : STD_LOGIC;
    signal grp_tau_rand_int_fu_42_ap_idle : STD_LOGIC;
    signal grp_tau_rand_int_fu_42_ap_ready : STD_LOGIC;
    signal grp_tau_rand_int_fu_42_m_axi_state_AWVALID : STD_LOGIC;
    signal grp_tau_rand_int_fu_42_m_axi_state_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tau_rand_int_fu_42_m_axi_state_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_tau_rand_int_fu_42_m_axi_state_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tau_rand_int_fu_42_m_axi_state_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_tau_rand_int_fu_42_m_axi_state_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_tau_rand_int_fu_42_m_axi_state_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_tau_rand_int_fu_42_m_axi_state_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_tau_rand_int_fu_42_m_axi_state_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_tau_rand_int_fu_42_m_axi_state_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_tau_rand_int_fu_42_m_axi_state_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_tau_rand_int_fu_42_m_axi_state_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_tau_rand_int_fu_42_m_axi_state_WVALID : STD_LOGIC;
    signal grp_tau_rand_int_fu_42_m_axi_state_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tau_rand_int_fu_42_m_axi_state_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_tau_rand_int_fu_42_m_axi_state_WLAST : STD_LOGIC;
    signal grp_tau_rand_int_fu_42_m_axi_state_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_tau_rand_int_fu_42_m_axi_state_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_tau_rand_int_fu_42_m_axi_state_ARVALID : STD_LOGIC;
    signal grp_tau_rand_int_fu_42_m_axi_state_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tau_rand_int_fu_42_m_axi_state_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_tau_rand_int_fu_42_m_axi_state_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tau_rand_int_fu_42_m_axi_state_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_tau_rand_int_fu_42_m_axi_state_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_tau_rand_int_fu_42_m_axi_state_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_tau_rand_int_fu_42_m_axi_state_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_tau_rand_int_fu_42_m_axi_state_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_tau_rand_int_fu_42_m_axi_state_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_tau_rand_int_fu_42_m_axi_state_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_tau_rand_int_fu_42_m_axi_state_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_tau_rand_int_fu_42_m_axi_state_RREADY : STD_LOGIC;
    signal grp_tau_rand_int_fu_42_m_axi_state_BREADY : STD_LOGIC;
    signal grp_tau_rand_int_fu_42_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_grp_tau_rand_int_fu_42_ap_start : STD_LOGIC := '0';
    signal grp_fu_54_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal neg_mul_fu_76_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_11_fu_81_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_54_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component tau_rand_int IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_state_AWVALID : OUT STD_LOGIC;
        m_axi_state_AWREADY : IN STD_LOGIC;
        m_axi_state_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_state_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_state_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_state_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_state_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_state_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_state_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_state_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_state_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_state_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_WVALID : OUT STD_LOGIC;
        m_axi_state_WREADY : IN STD_LOGIC;
        m_axi_state_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_state_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_state_WLAST : OUT STD_LOGIC;
        m_axi_state_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_ARVALID : OUT STD_LOGIC;
        m_axi_state_ARREADY : IN STD_LOGIC;
        m_axi_state_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_state_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_state_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_state_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_state_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_state_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_state_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_state_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_state_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_state_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_RVALID : IN STD_LOGIC;
        m_axi_state_RREADY : OUT STD_LOGIC;
        m_axi_state_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_state_RLAST : IN STD_LOGIC;
        m_axi_state_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_state_BVALID : IN STD_LOGIC;
        m_axi_state_BREADY : OUT STD_LOGIC;
        m_axi_state_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_state_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_state_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        rng_state3 : IN STD_LOGIC_VECTOR (29 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nn_descent_mul_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (33 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (64 downto 0) );
    end component;



begin
    grp_tau_rand_int_fu_42 : component tau_rand_int
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_tau_rand_int_fu_42_ap_start,
        ap_done => grp_tau_rand_int_fu_42_ap_done,
        ap_idle => grp_tau_rand_int_fu_42_ap_idle,
        ap_ready => grp_tau_rand_int_fu_42_ap_ready,
        m_axi_state_AWVALID => grp_tau_rand_int_fu_42_m_axi_state_AWVALID,
        m_axi_state_AWREADY => m_axi_state_AWREADY,
        m_axi_state_AWADDR => grp_tau_rand_int_fu_42_m_axi_state_AWADDR,
        m_axi_state_AWID => grp_tau_rand_int_fu_42_m_axi_state_AWID,
        m_axi_state_AWLEN => grp_tau_rand_int_fu_42_m_axi_state_AWLEN,
        m_axi_state_AWSIZE => grp_tau_rand_int_fu_42_m_axi_state_AWSIZE,
        m_axi_state_AWBURST => grp_tau_rand_int_fu_42_m_axi_state_AWBURST,
        m_axi_state_AWLOCK => grp_tau_rand_int_fu_42_m_axi_state_AWLOCK,
        m_axi_state_AWCACHE => grp_tau_rand_int_fu_42_m_axi_state_AWCACHE,
        m_axi_state_AWPROT => grp_tau_rand_int_fu_42_m_axi_state_AWPROT,
        m_axi_state_AWQOS => grp_tau_rand_int_fu_42_m_axi_state_AWQOS,
        m_axi_state_AWREGION => grp_tau_rand_int_fu_42_m_axi_state_AWREGION,
        m_axi_state_AWUSER => grp_tau_rand_int_fu_42_m_axi_state_AWUSER,
        m_axi_state_WVALID => grp_tau_rand_int_fu_42_m_axi_state_WVALID,
        m_axi_state_WREADY => m_axi_state_WREADY,
        m_axi_state_WDATA => grp_tau_rand_int_fu_42_m_axi_state_WDATA,
        m_axi_state_WSTRB => grp_tau_rand_int_fu_42_m_axi_state_WSTRB,
        m_axi_state_WLAST => grp_tau_rand_int_fu_42_m_axi_state_WLAST,
        m_axi_state_WID => grp_tau_rand_int_fu_42_m_axi_state_WID,
        m_axi_state_WUSER => grp_tau_rand_int_fu_42_m_axi_state_WUSER,
        m_axi_state_ARVALID => grp_tau_rand_int_fu_42_m_axi_state_ARVALID,
        m_axi_state_ARREADY => m_axi_state_ARREADY,
        m_axi_state_ARADDR => grp_tau_rand_int_fu_42_m_axi_state_ARADDR,
        m_axi_state_ARID => grp_tau_rand_int_fu_42_m_axi_state_ARID,
        m_axi_state_ARLEN => grp_tau_rand_int_fu_42_m_axi_state_ARLEN,
        m_axi_state_ARSIZE => grp_tau_rand_int_fu_42_m_axi_state_ARSIZE,
        m_axi_state_ARBURST => grp_tau_rand_int_fu_42_m_axi_state_ARBURST,
        m_axi_state_ARLOCK => grp_tau_rand_int_fu_42_m_axi_state_ARLOCK,
        m_axi_state_ARCACHE => grp_tau_rand_int_fu_42_m_axi_state_ARCACHE,
        m_axi_state_ARPROT => grp_tau_rand_int_fu_42_m_axi_state_ARPROT,
        m_axi_state_ARQOS => grp_tau_rand_int_fu_42_m_axi_state_ARQOS,
        m_axi_state_ARREGION => grp_tau_rand_int_fu_42_m_axi_state_ARREGION,
        m_axi_state_ARUSER => grp_tau_rand_int_fu_42_m_axi_state_ARUSER,
        m_axi_state_RVALID => m_axi_state_RVALID,
        m_axi_state_RREADY => grp_tau_rand_int_fu_42_m_axi_state_RREADY,
        m_axi_state_RDATA => m_axi_state_RDATA,
        m_axi_state_RLAST => m_axi_state_RLAST,
        m_axi_state_RID => m_axi_state_RID,
        m_axi_state_RUSER => m_axi_state_RUSER,
        m_axi_state_RRESP => m_axi_state_RRESP,
        m_axi_state_BVALID => m_axi_state_BVALID,
        m_axi_state_BREADY => grp_tau_rand_int_fu_42_m_axi_state_BREADY,
        m_axi_state_BRESP => m_axi_state_BRESP,
        m_axi_state_BID => m_axi_state_BID,
        m_axi_state_BUSER => m_axi_state_BUSER,
        rng_state3 => rng_state3,
        ap_return => grp_tau_rand_int_fu_42_ap_return);

    nn_descent_mul_32cud_U13 : component nn_descent_mul_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 34,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_tau_rand_int_fu_42_ap_return,
        din1 => grp_fu_54_p1,
        ce => grp_fu_54_ce,
        dout => grp_fu_54_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_tau_rand_int_fu_42_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_tau_rand_int_fu_42_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_reg_grp_tau_rand_int_fu_42_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_tau_rand_int_fu_42_ap_ready)) then 
                    ap_reg_grp_tau_rand_int_fu_42_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                mul_reg_110 <= grp_fu_54_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_reg_105 = ap_const_lv1_0))) then
                tmp_12_reg_115 <= grp_fu_54_p2(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_tau_rand_int_fu_42_ap_done = ap_const_logic_1))) then
                tmp_reg_105 <= grp_tau_rand_int_fu_42_ap_return(31 downto 31);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_tau_rand_int_fu_42_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_tau_rand_int_fu_42_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        tmp_11_fu_81_p3 when (tmp_reg_105(0) = '1') else 
        tmp_12_reg_115;

    grp_fu_54_ce_assign_proc : process(ap_CS_fsm_state2, grp_tau_rand_int_fu_42_ap_done, ap_CS_fsm_state3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_tau_rand_int_fu_42_ap_done = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_fu_54_ce <= ap_const_logic_1;
        else 
            grp_fu_54_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_54_p1 <= ap_const_lv65_100000003(34 - 1 downto 0);
    grp_tau_rand_int_fu_42_ap_start <= ap_reg_grp_tau_rand_int_fu_42_ap_start;
    m_axi_state_ARADDR <= grp_tau_rand_int_fu_42_m_axi_state_ARADDR;
    m_axi_state_ARBURST <= grp_tau_rand_int_fu_42_m_axi_state_ARBURST;
    m_axi_state_ARCACHE <= grp_tau_rand_int_fu_42_m_axi_state_ARCACHE;
    m_axi_state_ARID <= grp_tau_rand_int_fu_42_m_axi_state_ARID;
    m_axi_state_ARLEN <= grp_tau_rand_int_fu_42_m_axi_state_ARLEN;
    m_axi_state_ARLOCK <= grp_tau_rand_int_fu_42_m_axi_state_ARLOCK;
    m_axi_state_ARPROT <= grp_tau_rand_int_fu_42_m_axi_state_ARPROT;
    m_axi_state_ARQOS <= grp_tau_rand_int_fu_42_m_axi_state_ARQOS;
    m_axi_state_ARREGION <= grp_tau_rand_int_fu_42_m_axi_state_ARREGION;
    m_axi_state_ARSIZE <= grp_tau_rand_int_fu_42_m_axi_state_ARSIZE;
    m_axi_state_ARUSER <= grp_tau_rand_int_fu_42_m_axi_state_ARUSER;

    m_axi_state_ARVALID_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, grp_tau_rand_int_fu_42_m_axi_state_ARVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_state_ARVALID <= grp_tau_rand_int_fu_42_m_axi_state_ARVALID;
        else 
            m_axi_state_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_state_AWADDR <= grp_tau_rand_int_fu_42_m_axi_state_AWADDR;
    m_axi_state_AWBURST <= grp_tau_rand_int_fu_42_m_axi_state_AWBURST;
    m_axi_state_AWCACHE <= grp_tau_rand_int_fu_42_m_axi_state_AWCACHE;
    m_axi_state_AWID <= grp_tau_rand_int_fu_42_m_axi_state_AWID;
    m_axi_state_AWLEN <= grp_tau_rand_int_fu_42_m_axi_state_AWLEN;
    m_axi_state_AWLOCK <= grp_tau_rand_int_fu_42_m_axi_state_AWLOCK;
    m_axi_state_AWPROT <= grp_tau_rand_int_fu_42_m_axi_state_AWPROT;
    m_axi_state_AWQOS <= grp_tau_rand_int_fu_42_m_axi_state_AWQOS;
    m_axi_state_AWREGION <= grp_tau_rand_int_fu_42_m_axi_state_AWREGION;
    m_axi_state_AWSIZE <= grp_tau_rand_int_fu_42_m_axi_state_AWSIZE;
    m_axi_state_AWUSER <= grp_tau_rand_int_fu_42_m_axi_state_AWUSER;

    m_axi_state_AWVALID_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, grp_tau_rand_int_fu_42_m_axi_state_AWVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_state_AWVALID <= grp_tau_rand_int_fu_42_m_axi_state_AWVALID;
        else 
            m_axi_state_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_state_BREADY_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, grp_tau_rand_int_fu_42_m_axi_state_BREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_state_BREADY <= grp_tau_rand_int_fu_42_m_axi_state_BREADY;
        else 
            m_axi_state_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_state_RREADY_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, grp_tau_rand_int_fu_42_m_axi_state_RREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_state_RREADY <= grp_tau_rand_int_fu_42_m_axi_state_RREADY;
        else 
            m_axi_state_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_state_WDATA <= grp_tau_rand_int_fu_42_m_axi_state_WDATA;
    m_axi_state_WID <= grp_tau_rand_int_fu_42_m_axi_state_WID;
    m_axi_state_WLAST <= grp_tau_rand_int_fu_42_m_axi_state_WLAST;
    m_axi_state_WSTRB <= grp_tau_rand_int_fu_42_m_axi_state_WSTRB;
    m_axi_state_WUSER <= grp_tau_rand_int_fu_42_m_axi_state_WUSER;

    m_axi_state_WVALID_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, grp_tau_rand_int_fu_42_m_axi_state_WVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_state_WVALID <= grp_tau_rand_int_fu_42_m_axi_state_WVALID;
        else 
            m_axi_state_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    neg_mul_fu_76_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_reg_110));
    tmp_11_fu_81_p3 <= neg_mul_fu_76_p2(63 downto 63);
end behav;
