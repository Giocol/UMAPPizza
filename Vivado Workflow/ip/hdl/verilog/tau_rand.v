// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tau_rand (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_state_AWVALID,
        m_axi_state_AWREADY,
        m_axi_state_AWADDR,
        m_axi_state_AWID,
        m_axi_state_AWLEN,
        m_axi_state_AWSIZE,
        m_axi_state_AWBURST,
        m_axi_state_AWLOCK,
        m_axi_state_AWCACHE,
        m_axi_state_AWPROT,
        m_axi_state_AWQOS,
        m_axi_state_AWREGION,
        m_axi_state_AWUSER,
        m_axi_state_WVALID,
        m_axi_state_WREADY,
        m_axi_state_WDATA,
        m_axi_state_WSTRB,
        m_axi_state_WLAST,
        m_axi_state_WID,
        m_axi_state_WUSER,
        m_axi_state_ARVALID,
        m_axi_state_ARREADY,
        m_axi_state_ARADDR,
        m_axi_state_ARID,
        m_axi_state_ARLEN,
        m_axi_state_ARSIZE,
        m_axi_state_ARBURST,
        m_axi_state_ARLOCK,
        m_axi_state_ARCACHE,
        m_axi_state_ARPROT,
        m_axi_state_ARQOS,
        m_axi_state_ARREGION,
        m_axi_state_ARUSER,
        m_axi_state_RVALID,
        m_axi_state_RREADY,
        m_axi_state_RDATA,
        m_axi_state_RLAST,
        m_axi_state_RID,
        m_axi_state_RUSER,
        m_axi_state_RRESP,
        m_axi_state_BVALID,
        m_axi_state_BREADY,
        m_axi_state_BRESP,
        m_axi_state_BID,
        m_axi_state_BUSER,
        rng_state3,
        ap_return
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_state_AWVALID;
input   m_axi_state_AWREADY;
output  [31:0] m_axi_state_AWADDR;
output  [0:0] m_axi_state_AWID;
output  [31:0] m_axi_state_AWLEN;
output  [2:0] m_axi_state_AWSIZE;
output  [1:0] m_axi_state_AWBURST;
output  [1:0] m_axi_state_AWLOCK;
output  [3:0] m_axi_state_AWCACHE;
output  [2:0] m_axi_state_AWPROT;
output  [3:0] m_axi_state_AWQOS;
output  [3:0] m_axi_state_AWREGION;
output  [0:0] m_axi_state_AWUSER;
output   m_axi_state_WVALID;
input   m_axi_state_WREADY;
output  [31:0] m_axi_state_WDATA;
output  [3:0] m_axi_state_WSTRB;
output   m_axi_state_WLAST;
output  [0:0] m_axi_state_WID;
output  [0:0] m_axi_state_WUSER;
output   m_axi_state_ARVALID;
input   m_axi_state_ARREADY;
output  [31:0] m_axi_state_ARADDR;
output  [0:0] m_axi_state_ARID;
output  [31:0] m_axi_state_ARLEN;
output  [2:0] m_axi_state_ARSIZE;
output  [1:0] m_axi_state_ARBURST;
output  [1:0] m_axi_state_ARLOCK;
output  [3:0] m_axi_state_ARCACHE;
output  [2:0] m_axi_state_ARPROT;
output  [3:0] m_axi_state_ARQOS;
output  [3:0] m_axi_state_ARREGION;
output  [0:0] m_axi_state_ARUSER;
input   m_axi_state_RVALID;
output   m_axi_state_RREADY;
input  [31:0] m_axi_state_RDATA;
input   m_axi_state_RLAST;
input  [0:0] m_axi_state_RID;
input  [0:0] m_axi_state_RUSER;
input  [1:0] m_axi_state_RRESP;
input   m_axi_state_BVALID;
output   m_axi_state_BREADY;
input  [1:0] m_axi_state_BRESP;
input  [0:0] m_axi_state_BID;
input  [0:0] m_axi_state_BUSER;
input  [29:0] rng_state3;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_state_AWVALID;
reg m_axi_state_WVALID;
reg m_axi_state_ARVALID;
reg m_axi_state_RREADY;
reg m_axi_state_BREADY;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire    grp_tau_rand_int_fu_42_ap_done;
reg   [0:0] tmp_reg_105;
wire   [64:0] grp_fu_54_p2;
reg   [64:0] mul_reg_110;
wire    ap_CS_fsm_state3;
reg   [0:0] tmp_12_reg_115;
wire    grp_tau_rand_int_fu_42_ap_start;
wire    grp_tau_rand_int_fu_42_ap_idle;
wire    grp_tau_rand_int_fu_42_ap_ready;
wire    grp_tau_rand_int_fu_42_m_axi_state_AWVALID;
wire   [31:0] grp_tau_rand_int_fu_42_m_axi_state_AWADDR;
wire   [0:0] grp_tau_rand_int_fu_42_m_axi_state_AWID;
wire   [31:0] grp_tau_rand_int_fu_42_m_axi_state_AWLEN;
wire   [2:0] grp_tau_rand_int_fu_42_m_axi_state_AWSIZE;
wire   [1:0] grp_tau_rand_int_fu_42_m_axi_state_AWBURST;
wire   [1:0] grp_tau_rand_int_fu_42_m_axi_state_AWLOCK;
wire   [3:0] grp_tau_rand_int_fu_42_m_axi_state_AWCACHE;
wire   [2:0] grp_tau_rand_int_fu_42_m_axi_state_AWPROT;
wire   [3:0] grp_tau_rand_int_fu_42_m_axi_state_AWQOS;
wire   [3:0] grp_tau_rand_int_fu_42_m_axi_state_AWREGION;
wire   [0:0] grp_tau_rand_int_fu_42_m_axi_state_AWUSER;
wire    grp_tau_rand_int_fu_42_m_axi_state_WVALID;
wire   [31:0] grp_tau_rand_int_fu_42_m_axi_state_WDATA;
wire   [3:0] grp_tau_rand_int_fu_42_m_axi_state_WSTRB;
wire    grp_tau_rand_int_fu_42_m_axi_state_WLAST;
wire   [0:0] grp_tau_rand_int_fu_42_m_axi_state_WID;
wire   [0:0] grp_tau_rand_int_fu_42_m_axi_state_WUSER;
wire    grp_tau_rand_int_fu_42_m_axi_state_ARVALID;
wire   [31:0] grp_tau_rand_int_fu_42_m_axi_state_ARADDR;
wire   [0:0] grp_tau_rand_int_fu_42_m_axi_state_ARID;
wire   [31:0] grp_tau_rand_int_fu_42_m_axi_state_ARLEN;
wire   [2:0] grp_tau_rand_int_fu_42_m_axi_state_ARSIZE;
wire   [1:0] grp_tau_rand_int_fu_42_m_axi_state_ARBURST;
wire   [1:0] grp_tau_rand_int_fu_42_m_axi_state_ARLOCK;
wire   [3:0] grp_tau_rand_int_fu_42_m_axi_state_ARCACHE;
wire   [2:0] grp_tau_rand_int_fu_42_m_axi_state_ARPROT;
wire   [3:0] grp_tau_rand_int_fu_42_m_axi_state_ARQOS;
wire   [3:0] grp_tau_rand_int_fu_42_m_axi_state_ARREGION;
wire   [0:0] grp_tau_rand_int_fu_42_m_axi_state_ARUSER;
wire    grp_tau_rand_int_fu_42_m_axi_state_RREADY;
wire    grp_tau_rand_int_fu_42_m_axi_state_BREADY;
wire  signed [31:0] grp_tau_rand_int_fu_42_ap_return;
reg    ap_reg_grp_tau_rand_int_fu_42_ap_start;
wire   [33:0] grp_fu_54_p1;
wire    ap_CS_fsm_state4;
wire   [64:0] neg_mul_fu_76_p2;
wire   [0:0] tmp_11_fu_81_p3;
reg    grp_fu_54_ce;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_reg_grp_tau_rand_int_fu_42_ap_start = 1'b0;
end

tau_rand_int grp_tau_rand_int_fu_42(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_tau_rand_int_fu_42_ap_start),
    .ap_done(grp_tau_rand_int_fu_42_ap_done),
    .ap_idle(grp_tau_rand_int_fu_42_ap_idle),
    .ap_ready(grp_tau_rand_int_fu_42_ap_ready),
    .m_axi_state_AWVALID(grp_tau_rand_int_fu_42_m_axi_state_AWVALID),
    .m_axi_state_AWREADY(m_axi_state_AWREADY),
    .m_axi_state_AWADDR(grp_tau_rand_int_fu_42_m_axi_state_AWADDR),
    .m_axi_state_AWID(grp_tau_rand_int_fu_42_m_axi_state_AWID),
    .m_axi_state_AWLEN(grp_tau_rand_int_fu_42_m_axi_state_AWLEN),
    .m_axi_state_AWSIZE(grp_tau_rand_int_fu_42_m_axi_state_AWSIZE),
    .m_axi_state_AWBURST(grp_tau_rand_int_fu_42_m_axi_state_AWBURST),
    .m_axi_state_AWLOCK(grp_tau_rand_int_fu_42_m_axi_state_AWLOCK),
    .m_axi_state_AWCACHE(grp_tau_rand_int_fu_42_m_axi_state_AWCACHE),
    .m_axi_state_AWPROT(grp_tau_rand_int_fu_42_m_axi_state_AWPROT),
    .m_axi_state_AWQOS(grp_tau_rand_int_fu_42_m_axi_state_AWQOS),
    .m_axi_state_AWREGION(grp_tau_rand_int_fu_42_m_axi_state_AWREGION),
    .m_axi_state_AWUSER(grp_tau_rand_int_fu_42_m_axi_state_AWUSER),
    .m_axi_state_WVALID(grp_tau_rand_int_fu_42_m_axi_state_WVALID),
    .m_axi_state_WREADY(m_axi_state_WREADY),
    .m_axi_state_WDATA(grp_tau_rand_int_fu_42_m_axi_state_WDATA),
    .m_axi_state_WSTRB(grp_tau_rand_int_fu_42_m_axi_state_WSTRB),
    .m_axi_state_WLAST(grp_tau_rand_int_fu_42_m_axi_state_WLAST),
    .m_axi_state_WID(grp_tau_rand_int_fu_42_m_axi_state_WID),
    .m_axi_state_WUSER(grp_tau_rand_int_fu_42_m_axi_state_WUSER),
    .m_axi_state_ARVALID(grp_tau_rand_int_fu_42_m_axi_state_ARVALID),
    .m_axi_state_ARREADY(m_axi_state_ARREADY),
    .m_axi_state_ARADDR(grp_tau_rand_int_fu_42_m_axi_state_ARADDR),
    .m_axi_state_ARID(grp_tau_rand_int_fu_42_m_axi_state_ARID),
    .m_axi_state_ARLEN(grp_tau_rand_int_fu_42_m_axi_state_ARLEN),
    .m_axi_state_ARSIZE(grp_tau_rand_int_fu_42_m_axi_state_ARSIZE),
    .m_axi_state_ARBURST(grp_tau_rand_int_fu_42_m_axi_state_ARBURST),
    .m_axi_state_ARLOCK(grp_tau_rand_int_fu_42_m_axi_state_ARLOCK),
    .m_axi_state_ARCACHE(grp_tau_rand_int_fu_42_m_axi_state_ARCACHE),
    .m_axi_state_ARPROT(grp_tau_rand_int_fu_42_m_axi_state_ARPROT),
    .m_axi_state_ARQOS(grp_tau_rand_int_fu_42_m_axi_state_ARQOS),
    .m_axi_state_ARREGION(grp_tau_rand_int_fu_42_m_axi_state_ARREGION),
    .m_axi_state_ARUSER(grp_tau_rand_int_fu_42_m_axi_state_ARUSER),
    .m_axi_state_RVALID(m_axi_state_RVALID),
    .m_axi_state_RREADY(grp_tau_rand_int_fu_42_m_axi_state_RREADY),
    .m_axi_state_RDATA(m_axi_state_RDATA),
    .m_axi_state_RLAST(m_axi_state_RLAST),
    .m_axi_state_RID(m_axi_state_RID),
    .m_axi_state_RUSER(m_axi_state_RUSER),
    .m_axi_state_RRESP(m_axi_state_RRESP),
    .m_axi_state_BVALID(m_axi_state_BVALID),
    .m_axi_state_BREADY(grp_tau_rand_int_fu_42_m_axi_state_BREADY),
    .m_axi_state_BRESP(m_axi_state_BRESP),
    .m_axi_state_BID(m_axi_state_BID),
    .m_axi_state_BUSER(m_axi_state_BUSER),
    .rng_state3(rng_state3),
    .ap_return(grp_tau_rand_int_fu_42_ap_return)
);

nn_descent_mul_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 34 ),
    .dout_WIDTH( 65 ))
nn_descent_mul_32cud_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_tau_rand_int_fu_42_ap_return),
    .din1(grp_fu_54_p1),
    .ce(grp_fu_54_ce),
    .dout(grp_fu_54_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_tau_rand_int_fu_42_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_reg_grp_tau_rand_int_fu_42_ap_start <= 1'b1;
        end else if ((1'b1 == grp_tau_rand_int_fu_42_ap_ready)) begin
            ap_reg_grp_tau_rand_int_fu_42_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mul_reg_110 <= grp_fu_54_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_reg_105 == 1'd0))) begin
        tmp_12_reg_115 <= grp_fu_54_p2[32'd63];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_tau_rand_int_fu_42_ap_done == 1'b1))) begin
        tmp_reg_105 <= grp_tau_rand_int_fu_42_ap_return[32'd31];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (grp_tau_rand_int_fu_42_ap_done == 1'b1)) | (1'b1 == ap_CS_fsm_state3))) begin
        grp_fu_54_ce = 1'b1;
    end else begin
        grp_fu_54_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_state_ARVALID = grp_tau_rand_int_fu_42_m_axi_state_ARVALID;
    end else begin
        m_axi_state_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_state_AWVALID = grp_tau_rand_int_fu_42_m_axi_state_AWVALID;
    end else begin
        m_axi_state_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_state_BREADY = grp_tau_rand_int_fu_42_m_axi_state_BREADY;
    end else begin
        m_axi_state_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_state_RREADY = grp_tau_rand_int_fu_42_m_axi_state_RREADY;
    end else begin
        m_axi_state_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_state_WVALID = grp_tau_rand_int_fu_42_m_axi_state_WVALID;
    end else begin
        m_axi_state_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_tau_rand_int_fu_42_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_return = ((tmp_reg_105[0:0] === 1'b1) ? tmp_11_fu_81_p3 : tmp_12_reg_115);

assign grp_fu_54_p1 = 65'd4294967299;

assign grp_tau_rand_int_fu_42_ap_start = ap_reg_grp_tau_rand_int_fu_42_ap_start;

assign m_axi_state_ARADDR = grp_tau_rand_int_fu_42_m_axi_state_ARADDR;

assign m_axi_state_ARBURST = grp_tau_rand_int_fu_42_m_axi_state_ARBURST;

assign m_axi_state_ARCACHE = grp_tau_rand_int_fu_42_m_axi_state_ARCACHE;

assign m_axi_state_ARID = grp_tau_rand_int_fu_42_m_axi_state_ARID;

assign m_axi_state_ARLEN = grp_tau_rand_int_fu_42_m_axi_state_ARLEN;

assign m_axi_state_ARLOCK = grp_tau_rand_int_fu_42_m_axi_state_ARLOCK;

assign m_axi_state_ARPROT = grp_tau_rand_int_fu_42_m_axi_state_ARPROT;

assign m_axi_state_ARQOS = grp_tau_rand_int_fu_42_m_axi_state_ARQOS;

assign m_axi_state_ARREGION = grp_tau_rand_int_fu_42_m_axi_state_ARREGION;

assign m_axi_state_ARSIZE = grp_tau_rand_int_fu_42_m_axi_state_ARSIZE;

assign m_axi_state_ARUSER = grp_tau_rand_int_fu_42_m_axi_state_ARUSER;

assign m_axi_state_AWADDR = grp_tau_rand_int_fu_42_m_axi_state_AWADDR;

assign m_axi_state_AWBURST = grp_tau_rand_int_fu_42_m_axi_state_AWBURST;

assign m_axi_state_AWCACHE = grp_tau_rand_int_fu_42_m_axi_state_AWCACHE;

assign m_axi_state_AWID = grp_tau_rand_int_fu_42_m_axi_state_AWID;

assign m_axi_state_AWLEN = grp_tau_rand_int_fu_42_m_axi_state_AWLEN;

assign m_axi_state_AWLOCK = grp_tau_rand_int_fu_42_m_axi_state_AWLOCK;

assign m_axi_state_AWPROT = grp_tau_rand_int_fu_42_m_axi_state_AWPROT;

assign m_axi_state_AWQOS = grp_tau_rand_int_fu_42_m_axi_state_AWQOS;

assign m_axi_state_AWREGION = grp_tau_rand_int_fu_42_m_axi_state_AWREGION;

assign m_axi_state_AWSIZE = grp_tau_rand_int_fu_42_m_axi_state_AWSIZE;

assign m_axi_state_AWUSER = grp_tau_rand_int_fu_42_m_axi_state_AWUSER;

assign m_axi_state_WDATA = grp_tau_rand_int_fu_42_m_axi_state_WDATA;

assign m_axi_state_WID = grp_tau_rand_int_fu_42_m_axi_state_WID;

assign m_axi_state_WLAST = grp_tau_rand_int_fu_42_m_axi_state_WLAST;

assign m_axi_state_WSTRB = grp_tau_rand_int_fu_42_m_axi_state_WSTRB;

assign m_axi_state_WUSER = grp_tau_rand_int_fu_42_m_axi_state_WUSER;

assign neg_mul_fu_76_p2 = (65'd0 - mul_reg_110);

assign tmp_11_fu_81_p3 = neg_mul_fu_76_p2[32'd63];

endmodule //tau_rand
