// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rejection_sample (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_rng_state_AWVALID,
        m_axi_rng_state_AWREADY,
        m_axi_rng_state_AWADDR,
        m_axi_rng_state_AWID,
        m_axi_rng_state_AWLEN,
        m_axi_rng_state_AWSIZE,
        m_axi_rng_state_AWBURST,
        m_axi_rng_state_AWLOCK,
        m_axi_rng_state_AWCACHE,
        m_axi_rng_state_AWPROT,
        m_axi_rng_state_AWQOS,
        m_axi_rng_state_AWREGION,
        m_axi_rng_state_AWUSER,
        m_axi_rng_state_WVALID,
        m_axi_rng_state_WREADY,
        m_axi_rng_state_WDATA,
        m_axi_rng_state_WSTRB,
        m_axi_rng_state_WLAST,
        m_axi_rng_state_WID,
        m_axi_rng_state_WUSER,
        m_axi_rng_state_ARVALID,
        m_axi_rng_state_ARREADY,
        m_axi_rng_state_ARADDR,
        m_axi_rng_state_ARID,
        m_axi_rng_state_ARLEN,
        m_axi_rng_state_ARSIZE,
        m_axi_rng_state_ARBURST,
        m_axi_rng_state_ARLOCK,
        m_axi_rng_state_ARCACHE,
        m_axi_rng_state_ARPROT,
        m_axi_rng_state_ARQOS,
        m_axi_rng_state_ARREGION,
        m_axi_rng_state_ARUSER,
        m_axi_rng_state_RVALID,
        m_axi_rng_state_RREADY,
        m_axi_rng_state_RDATA,
        m_axi_rng_state_RLAST,
        m_axi_rng_state_RID,
        m_axi_rng_state_RUSER,
        m_axi_rng_state_RRESP,
        m_axi_rng_state_BVALID,
        m_axi_rng_state_BREADY,
        m_axi_rng_state_BRESP,
        m_axi_rng_state_BID,
        m_axi_rng_state_BUSER,
        rng_state3,
        result_address0,
        result_ce0,
        result_we0,
        result_d0,
        result_q0
);

parameter    ap_ST_fsm_state1 = 43'd1;
parameter    ap_ST_fsm_state2 = 43'd2;
parameter    ap_ST_fsm_state3 = 43'd4;
parameter    ap_ST_fsm_state4 = 43'd8;
parameter    ap_ST_fsm_state5 = 43'd16;
parameter    ap_ST_fsm_state6 = 43'd32;
parameter    ap_ST_fsm_state7 = 43'd64;
parameter    ap_ST_fsm_state8 = 43'd128;
parameter    ap_ST_fsm_state9 = 43'd256;
parameter    ap_ST_fsm_state10 = 43'd512;
parameter    ap_ST_fsm_state11 = 43'd1024;
parameter    ap_ST_fsm_state12 = 43'd2048;
parameter    ap_ST_fsm_state13 = 43'd4096;
parameter    ap_ST_fsm_state14 = 43'd8192;
parameter    ap_ST_fsm_state15 = 43'd16384;
parameter    ap_ST_fsm_state16 = 43'd32768;
parameter    ap_ST_fsm_state17 = 43'd65536;
parameter    ap_ST_fsm_state18 = 43'd131072;
parameter    ap_ST_fsm_state19 = 43'd262144;
parameter    ap_ST_fsm_state20 = 43'd524288;
parameter    ap_ST_fsm_state21 = 43'd1048576;
parameter    ap_ST_fsm_state22 = 43'd2097152;
parameter    ap_ST_fsm_state23 = 43'd4194304;
parameter    ap_ST_fsm_state24 = 43'd8388608;
parameter    ap_ST_fsm_state25 = 43'd16777216;
parameter    ap_ST_fsm_state26 = 43'd33554432;
parameter    ap_ST_fsm_state27 = 43'd67108864;
parameter    ap_ST_fsm_state28 = 43'd134217728;
parameter    ap_ST_fsm_state29 = 43'd268435456;
parameter    ap_ST_fsm_state30 = 43'd536870912;
parameter    ap_ST_fsm_state31 = 43'd1073741824;
parameter    ap_ST_fsm_state32 = 43'd2147483648;
parameter    ap_ST_fsm_state33 = 43'd4294967296;
parameter    ap_ST_fsm_state34 = 43'd8589934592;
parameter    ap_ST_fsm_state35 = 43'd17179869184;
parameter    ap_ST_fsm_state36 = 43'd34359738368;
parameter    ap_ST_fsm_state37 = 43'd68719476736;
parameter    ap_ST_fsm_state38 = 43'd137438953472;
parameter    ap_ST_fsm_state39 = 43'd274877906944;
parameter    ap_ST_fsm_state40 = 43'd549755813888;
parameter    ap_ST_fsm_state41 = 43'd1099511627776;
parameter    ap_ST_fsm_state42 = 43'd2199023255552;
parameter    ap_ST_fsm_state43 = 43'd4398046511104;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_rng_state_AWVALID;
input   m_axi_rng_state_AWREADY;
output  [31:0] m_axi_rng_state_AWADDR;
output  [0:0] m_axi_rng_state_AWID;
output  [31:0] m_axi_rng_state_AWLEN;
output  [2:0] m_axi_rng_state_AWSIZE;
output  [1:0] m_axi_rng_state_AWBURST;
output  [1:0] m_axi_rng_state_AWLOCK;
output  [3:0] m_axi_rng_state_AWCACHE;
output  [2:0] m_axi_rng_state_AWPROT;
output  [3:0] m_axi_rng_state_AWQOS;
output  [3:0] m_axi_rng_state_AWREGION;
output  [0:0] m_axi_rng_state_AWUSER;
output   m_axi_rng_state_WVALID;
input   m_axi_rng_state_WREADY;
output  [31:0] m_axi_rng_state_WDATA;
output  [3:0] m_axi_rng_state_WSTRB;
output   m_axi_rng_state_WLAST;
output  [0:0] m_axi_rng_state_WID;
output  [0:0] m_axi_rng_state_WUSER;
output   m_axi_rng_state_ARVALID;
input   m_axi_rng_state_ARREADY;
output  [31:0] m_axi_rng_state_ARADDR;
output  [0:0] m_axi_rng_state_ARID;
output  [31:0] m_axi_rng_state_ARLEN;
output  [2:0] m_axi_rng_state_ARSIZE;
output  [1:0] m_axi_rng_state_ARBURST;
output  [1:0] m_axi_rng_state_ARLOCK;
output  [3:0] m_axi_rng_state_ARCACHE;
output  [2:0] m_axi_rng_state_ARPROT;
output  [3:0] m_axi_rng_state_ARQOS;
output  [3:0] m_axi_rng_state_ARREGION;
output  [0:0] m_axi_rng_state_ARUSER;
input   m_axi_rng_state_RVALID;
output   m_axi_rng_state_RREADY;
input  [31:0] m_axi_rng_state_RDATA;
input   m_axi_rng_state_RLAST;
input  [0:0] m_axi_rng_state_RID;
input  [0:0] m_axi_rng_state_RUSER;
input  [1:0] m_axi_rng_state_RRESP;
input   m_axi_rng_state_BVALID;
output   m_axi_rng_state_BREADY;
input  [1:0] m_axi_rng_state_BRESP;
input  [0:0] m_axi_rng_state_BID;
input  [0:0] m_axi_rng_state_BUSER;
input  [29:0] rng_state3;
output  [3:0] result_address0;
output   result_ce0;
output   result_we0;
output  [7:0] result_d0;
input  [7:0] result_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_rng_state_AWVALID;
reg m_axi_rng_state_WVALID;
reg m_axi_rng_state_ARVALID;
reg m_axi_rng_state_RREADY;
reg m_axi_rng_state_BREADY;
reg[3:0] result_address0;
reg result_ce0;
reg result_we0;

(* fsm_encoding = "none" *) reg   [42:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] i_1_fu_119_p2;
reg   [3:0] i_1_reg_191;
wire    ap_CS_fsm_state2;
reg   [3:0] result_addr_reg_196;
wire   [0:0] exitcond_fu_113_p2;
wire   [31:0] x_assign_3_fu_144_p3;
reg   [31:0] x_assign_3_reg_201;
wire    ap_CS_fsm_state4;
wire    grp_tau_rand_int_fu_101_ap_done;
wire   [7:0] tmp_15_fu_157_p1;
reg   [7:0] tmp_15_reg_206;
wire    ap_CS_fsm_state40;
wire   [0:0] tmp_16_fu_161_p2;
reg   [0:0] tmp_16_reg_212;
wire    ap_CS_fsm_state41;
wire   [3:0] k_1_fu_167_p2;
reg   [3:0] k_1_reg_216;
wire    ap_CS_fsm_state42;
wire   [0:0] grp_fu_108_p2;
wire    grp_tau_rand_int_fu_101_ap_start;
wire    grp_tau_rand_int_fu_101_ap_idle;
wire    grp_tau_rand_int_fu_101_ap_ready;
wire    grp_tau_rand_int_fu_101_m_axi_state_AWVALID;
wire   [31:0] grp_tau_rand_int_fu_101_m_axi_state_AWADDR;
wire   [0:0] grp_tau_rand_int_fu_101_m_axi_state_AWID;
wire   [31:0] grp_tau_rand_int_fu_101_m_axi_state_AWLEN;
wire   [2:0] grp_tau_rand_int_fu_101_m_axi_state_AWSIZE;
wire   [1:0] grp_tau_rand_int_fu_101_m_axi_state_AWBURST;
wire   [1:0] grp_tau_rand_int_fu_101_m_axi_state_AWLOCK;
wire   [3:0] grp_tau_rand_int_fu_101_m_axi_state_AWCACHE;
wire   [2:0] grp_tau_rand_int_fu_101_m_axi_state_AWPROT;
wire   [3:0] grp_tau_rand_int_fu_101_m_axi_state_AWQOS;
wire   [3:0] grp_tau_rand_int_fu_101_m_axi_state_AWREGION;
wire   [0:0] grp_tau_rand_int_fu_101_m_axi_state_AWUSER;
wire    grp_tau_rand_int_fu_101_m_axi_state_WVALID;
wire   [31:0] grp_tau_rand_int_fu_101_m_axi_state_WDATA;
wire   [3:0] grp_tau_rand_int_fu_101_m_axi_state_WSTRB;
wire    grp_tau_rand_int_fu_101_m_axi_state_WLAST;
wire   [0:0] grp_tau_rand_int_fu_101_m_axi_state_WID;
wire   [0:0] grp_tau_rand_int_fu_101_m_axi_state_WUSER;
wire    grp_tau_rand_int_fu_101_m_axi_state_ARVALID;
wire   [31:0] grp_tau_rand_int_fu_101_m_axi_state_ARADDR;
wire   [0:0] grp_tau_rand_int_fu_101_m_axi_state_ARID;
wire   [31:0] grp_tau_rand_int_fu_101_m_axi_state_ARLEN;
wire   [2:0] grp_tau_rand_int_fu_101_m_axi_state_ARSIZE;
wire   [1:0] grp_tau_rand_int_fu_101_m_axi_state_ARBURST;
wire   [1:0] grp_tau_rand_int_fu_101_m_axi_state_ARLOCK;
wire   [3:0] grp_tau_rand_int_fu_101_m_axi_state_ARCACHE;
wire   [2:0] grp_tau_rand_int_fu_101_m_axi_state_ARPROT;
wire   [3:0] grp_tau_rand_int_fu_101_m_axi_state_ARQOS;
wire   [3:0] grp_tau_rand_int_fu_101_m_axi_state_ARREGION;
wire   [0:0] grp_tau_rand_int_fu_101_m_axi_state_ARUSER;
wire    grp_tau_rand_int_fu_101_m_axi_state_RREADY;
wire    grp_tau_rand_int_fu_101_m_axi_state_BREADY;
wire   [31:0] grp_tau_rand_int_fu_101_ap_return;
reg   [3:0] i_reg_77;
wire    ap_CS_fsm_state43;
reg   [3:0] k_reg_89;
reg    ap_reg_grp_tau_rand_int_fu_101_ap_start;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_s_fu_125_p1;
wire   [63:0] tmp_17_fu_173_p1;
wire   [63:0] tmp_19_fu_178_p1;
wire   [0:0] tmp_14_fu_130_p3;
wire   [31:0] tmp_i_fu_138_p2;
wire   [7:0] grp_fu_152_p1;
wire    ap_CS_fsm_state5;
wire   [7:0] grp_fu_152_p2;
reg    grp_fu_152_ap_start;
wire    grp_fu_152_ap_done;
reg   [42:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 43'd1;
#0 ap_reg_grp_tau_rand_int_fu_101_ap_start = 1'b0;
end

tau_rand_int grp_tau_rand_int_fu_101(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_tau_rand_int_fu_101_ap_start),
    .ap_done(grp_tau_rand_int_fu_101_ap_done),
    .ap_idle(grp_tau_rand_int_fu_101_ap_idle),
    .ap_ready(grp_tau_rand_int_fu_101_ap_ready),
    .m_axi_state_AWVALID(grp_tau_rand_int_fu_101_m_axi_state_AWVALID),
    .m_axi_state_AWREADY(m_axi_rng_state_AWREADY),
    .m_axi_state_AWADDR(grp_tau_rand_int_fu_101_m_axi_state_AWADDR),
    .m_axi_state_AWID(grp_tau_rand_int_fu_101_m_axi_state_AWID),
    .m_axi_state_AWLEN(grp_tau_rand_int_fu_101_m_axi_state_AWLEN),
    .m_axi_state_AWSIZE(grp_tau_rand_int_fu_101_m_axi_state_AWSIZE),
    .m_axi_state_AWBURST(grp_tau_rand_int_fu_101_m_axi_state_AWBURST),
    .m_axi_state_AWLOCK(grp_tau_rand_int_fu_101_m_axi_state_AWLOCK),
    .m_axi_state_AWCACHE(grp_tau_rand_int_fu_101_m_axi_state_AWCACHE),
    .m_axi_state_AWPROT(grp_tau_rand_int_fu_101_m_axi_state_AWPROT),
    .m_axi_state_AWQOS(grp_tau_rand_int_fu_101_m_axi_state_AWQOS),
    .m_axi_state_AWREGION(grp_tau_rand_int_fu_101_m_axi_state_AWREGION),
    .m_axi_state_AWUSER(grp_tau_rand_int_fu_101_m_axi_state_AWUSER),
    .m_axi_state_WVALID(grp_tau_rand_int_fu_101_m_axi_state_WVALID),
    .m_axi_state_WREADY(m_axi_rng_state_WREADY),
    .m_axi_state_WDATA(grp_tau_rand_int_fu_101_m_axi_state_WDATA),
    .m_axi_state_WSTRB(grp_tau_rand_int_fu_101_m_axi_state_WSTRB),
    .m_axi_state_WLAST(grp_tau_rand_int_fu_101_m_axi_state_WLAST),
    .m_axi_state_WID(grp_tau_rand_int_fu_101_m_axi_state_WID),
    .m_axi_state_WUSER(grp_tau_rand_int_fu_101_m_axi_state_WUSER),
    .m_axi_state_ARVALID(grp_tau_rand_int_fu_101_m_axi_state_ARVALID),
    .m_axi_state_ARREADY(m_axi_rng_state_ARREADY),
    .m_axi_state_ARADDR(grp_tau_rand_int_fu_101_m_axi_state_ARADDR),
    .m_axi_state_ARID(grp_tau_rand_int_fu_101_m_axi_state_ARID),
    .m_axi_state_ARLEN(grp_tau_rand_int_fu_101_m_axi_state_ARLEN),
    .m_axi_state_ARSIZE(grp_tau_rand_int_fu_101_m_axi_state_ARSIZE),
    .m_axi_state_ARBURST(grp_tau_rand_int_fu_101_m_axi_state_ARBURST),
    .m_axi_state_ARLOCK(grp_tau_rand_int_fu_101_m_axi_state_ARLOCK),
    .m_axi_state_ARCACHE(grp_tau_rand_int_fu_101_m_axi_state_ARCACHE),
    .m_axi_state_ARPROT(grp_tau_rand_int_fu_101_m_axi_state_ARPROT),
    .m_axi_state_ARQOS(grp_tau_rand_int_fu_101_m_axi_state_ARQOS),
    .m_axi_state_ARREGION(grp_tau_rand_int_fu_101_m_axi_state_ARREGION),
    .m_axi_state_ARUSER(grp_tau_rand_int_fu_101_m_axi_state_ARUSER),
    .m_axi_state_RVALID(m_axi_rng_state_RVALID),
    .m_axi_state_RREADY(grp_tau_rand_int_fu_101_m_axi_state_RREADY),
    .m_axi_state_RDATA(m_axi_rng_state_RDATA),
    .m_axi_state_RLAST(m_axi_rng_state_RLAST),
    .m_axi_state_RID(m_axi_rng_state_RID),
    .m_axi_state_RUSER(m_axi_rng_state_RUSER),
    .m_axi_state_RRESP(m_axi_rng_state_RRESP),
    .m_axi_state_BVALID(m_axi_rng_state_BVALID),
    .m_axi_state_BREADY(grp_tau_rand_int_fu_101_m_axi_state_BREADY),
    .m_axi_state_BRESP(m_axi_rng_state_BRESP),
    .m_axi_state_BID(m_axi_rng_state_BID),
    .m_axi_state_BUSER(m_axi_rng_state_BUSER),
    .rng_state3(rng_state3),
    .ap_return(grp_tau_rand_int_fu_101_ap_return)
);

nn_descent_srem_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
nn_descent_srem_3bkb_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_152_ap_start),
    .done(grp_fu_152_ap_done),
    .din0(x_assign_3_reg_201),
    .din1(grp_fu_152_p1),
    .ce(1'b1),
    .dout(grp_fu_152_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_tau_rand_int_fu_101_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_reg_grp_tau_rand_int_fu_101_ap_start <= 1'b1;
        end else if ((1'b1 == grp_tau_rand_int_fu_101_ap_ready)) begin
            ap_reg_grp_tau_rand_int_fu_101_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) & (1'd0 == grp_fu_108_p2))) begin
        i_reg_77 <= i_1_reg_191;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_77 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) & (1'd0 == grp_fu_108_p2) & (tmp_16_reg_212 == 1'd1))) begin
        k_reg_89 <= k_1_reg_216;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        k_reg_89 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_191 <= i_1_fu_119_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        k_1_reg_216 <= k_1_fu_167_p2;
        tmp_16_reg_212 <= tmp_16_fu_161_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_113_p2 == 1'd0))) begin
        result_addr_reg_196 <= tmp_s_fu_125_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        tmp_15_reg_206 <= tmp_15_fu_157_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (grp_tau_rand_int_fu_101_ap_done == 1'b1))) begin
        x_assign_3_reg_201 <= x_assign_3_fu_144_p3;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_113_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_113_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_152_ap_start = 1'b1;
    end else begin
        grp_fu_152_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_rng_state_ARVALID = grp_tau_rand_int_fu_101_m_axi_state_ARVALID;
    end else begin
        m_axi_rng_state_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_rng_state_AWVALID = grp_tau_rand_int_fu_101_m_axi_state_AWVALID;
    end else begin
        m_axi_rng_state_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_rng_state_BREADY = grp_tau_rand_int_fu_101_m_axi_state_BREADY;
    end else begin
        m_axi_rng_state_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_rng_state_RREADY = grp_tau_rand_int_fu_101_m_axi_state_RREADY;
    end else begin
        m_axi_rng_state_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_rng_state_WVALID = grp_tau_rand_int_fu_101_m_axi_state_WVALID;
    end else begin
        m_axi_rng_state_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        result_address0 = result_addr_reg_196;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        result_address0 = tmp_19_fu_178_p1;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        result_address0 = tmp_17_fu_173_p1;
    end else begin
        result_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state43))) begin
        result_ce0 = 1'b1;
    end else begin
        result_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        result_we0 = 1'b1;
    end else begin
        result_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_113_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_tau_rand_int_fu_101_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            if (((1'b1 == ap_CS_fsm_state42) & ((1'd0 == tmp_16_reg_212) | (1'd1 == grp_fu_108_p2)))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state43 : begin
            if (((1'b1 == ap_CS_fsm_state43) & (1'd0 == grp_fu_108_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign exitcond_fu_113_p2 = ((i_reg_77 == 4'd10) ? 1'b1 : 1'b0);

assign grp_fu_108_p2 = ((tmp_15_reg_206 == result_q0) ? 1'b1 : 1'b0);

assign grp_fu_152_p1 = 32'd100;

assign grp_tau_rand_int_fu_101_ap_start = ap_reg_grp_tau_rand_int_fu_101_ap_start;

assign i_1_fu_119_p2 = (i_reg_77 + 4'd1);

assign k_1_fu_167_p2 = (k_reg_89 + 4'd1);

assign m_axi_rng_state_ARADDR = grp_tau_rand_int_fu_101_m_axi_state_ARADDR;

assign m_axi_rng_state_ARBURST = grp_tau_rand_int_fu_101_m_axi_state_ARBURST;

assign m_axi_rng_state_ARCACHE = grp_tau_rand_int_fu_101_m_axi_state_ARCACHE;

assign m_axi_rng_state_ARID = grp_tau_rand_int_fu_101_m_axi_state_ARID;

assign m_axi_rng_state_ARLEN = grp_tau_rand_int_fu_101_m_axi_state_ARLEN;

assign m_axi_rng_state_ARLOCK = grp_tau_rand_int_fu_101_m_axi_state_ARLOCK;

assign m_axi_rng_state_ARPROT = grp_tau_rand_int_fu_101_m_axi_state_ARPROT;

assign m_axi_rng_state_ARQOS = grp_tau_rand_int_fu_101_m_axi_state_ARQOS;

assign m_axi_rng_state_ARREGION = grp_tau_rand_int_fu_101_m_axi_state_ARREGION;

assign m_axi_rng_state_ARSIZE = grp_tau_rand_int_fu_101_m_axi_state_ARSIZE;

assign m_axi_rng_state_ARUSER = grp_tau_rand_int_fu_101_m_axi_state_ARUSER;

assign m_axi_rng_state_AWADDR = grp_tau_rand_int_fu_101_m_axi_state_AWADDR;

assign m_axi_rng_state_AWBURST = grp_tau_rand_int_fu_101_m_axi_state_AWBURST;

assign m_axi_rng_state_AWCACHE = grp_tau_rand_int_fu_101_m_axi_state_AWCACHE;

assign m_axi_rng_state_AWID = grp_tau_rand_int_fu_101_m_axi_state_AWID;

assign m_axi_rng_state_AWLEN = grp_tau_rand_int_fu_101_m_axi_state_AWLEN;

assign m_axi_rng_state_AWLOCK = grp_tau_rand_int_fu_101_m_axi_state_AWLOCK;

assign m_axi_rng_state_AWPROT = grp_tau_rand_int_fu_101_m_axi_state_AWPROT;

assign m_axi_rng_state_AWQOS = grp_tau_rand_int_fu_101_m_axi_state_AWQOS;

assign m_axi_rng_state_AWREGION = grp_tau_rand_int_fu_101_m_axi_state_AWREGION;

assign m_axi_rng_state_AWSIZE = grp_tau_rand_int_fu_101_m_axi_state_AWSIZE;

assign m_axi_rng_state_AWUSER = grp_tau_rand_int_fu_101_m_axi_state_AWUSER;

assign m_axi_rng_state_WDATA = grp_tau_rand_int_fu_101_m_axi_state_WDATA;

assign m_axi_rng_state_WID = grp_tau_rand_int_fu_101_m_axi_state_WID;

assign m_axi_rng_state_WLAST = grp_tau_rand_int_fu_101_m_axi_state_WLAST;

assign m_axi_rng_state_WSTRB = grp_tau_rand_int_fu_101_m_axi_state_WSTRB;

assign m_axi_rng_state_WUSER = grp_tau_rand_int_fu_101_m_axi_state_WUSER;

assign result_d0 = tmp_15_reg_206;

assign tmp_14_fu_130_p3 = grp_tau_rand_int_fu_101_ap_return[32'd31];

assign tmp_15_fu_157_p1 = grp_fu_152_p2[7:0];

assign tmp_16_fu_161_p2 = ((k_reg_89 < i_reg_77) ? 1'b1 : 1'b0);

assign tmp_17_fu_173_p1 = k_reg_89;

assign tmp_19_fu_178_p1 = k_reg_89;

assign tmp_i_fu_138_p2 = (32'd0 - grp_tau_rand_int_fu_101_ap_return);

assign tmp_s_fu_125_p1 = i_reg_77;

assign x_assign_3_fu_144_p3 = ((tmp_14_fu_130_p3[0:0] === 1'b1) ? tmp_i_fu_138_p2 : grp_tau_rand_int_fu_101_ap_return);

endmodule //rejection_sample
