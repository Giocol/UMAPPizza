// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module build_candidates (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        current_graph_index_address0,
        current_graph_index_ce0,
        current_graph_index_q0,
        current_graph_flag_address0,
        current_graph_flag_ce0,
        current_graph_flag_we0,
        current_graph_flag_d0,
        current_graph_flag_q0,
        m_axi_rng_state_AWVALID,
        m_axi_rng_state_AWREADY,
        m_axi_rng_state_AWADDR,
        m_axi_rng_state_AWID,
        m_axi_rng_state_AWLEN,
        m_axi_rng_state_AWSIZE,
        m_axi_rng_state_AWBURST,
        m_axi_rng_state_AWLOCK,
        m_axi_rng_state_AWCACHE,
        m_axi_rng_state_AWPROT,
        m_axi_rng_state_AWQOS,
        m_axi_rng_state_AWREGION,
        m_axi_rng_state_AWUSER,
        m_axi_rng_state_WVALID,
        m_axi_rng_state_WREADY,
        m_axi_rng_state_WDATA,
        m_axi_rng_state_WSTRB,
        m_axi_rng_state_WLAST,
        m_axi_rng_state_WID,
        m_axi_rng_state_WUSER,
        m_axi_rng_state_ARVALID,
        m_axi_rng_state_ARREADY,
        m_axi_rng_state_ARADDR,
        m_axi_rng_state_ARID,
        m_axi_rng_state_ARLEN,
        m_axi_rng_state_ARSIZE,
        m_axi_rng_state_ARBURST,
        m_axi_rng_state_ARLOCK,
        m_axi_rng_state_ARCACHE,
        m_axi_rng_state_ARPROT,
        m_axi_rng_state_ARQOS,
        m_axi_rng_state_ARREGION,
        m_axi_rng_state_ARUSER,
        m_axi_rng_state_RVALID,
        m_axi_rng_state_RREADY,
        m_axi_rng_state_RDATA,
        m_axi_rng_state_RLAST,
        m_axi_rng_state_RID,
        m_axi_rng_state_RUSER,
        m_axi_rng_state_RRESP,
        m_axi_rng_state_BVALID,
        m_axi_rng_state_BREADY,
        m_axi_rng_state_BRESP,
        m_axi_rng_state_BID,
        m_axi_rng_state_BUSER,
        rng_state3,
        candidate_neighbors_s_address0,
        candidate_neighbors_s_ce0,
        candidate_neighbors_s_we0,
        candidate_neighbors_s_d0,
        candidate_neighbors_s_q0,
        candidate_neighbors_13_address0,
        candidate_neighbors_13_ce0,
        candidate_neighbors_13_we0,
        candidate_neighbors_13_d0,
        candidate_neighbors_13_q0,
        candidate_neighbors_14_address0,
        candidate_neighbors_14_ce0,
        candidate_neighbors_14_we0,
        candidate_neighbors_14_d0,
        candidate_neighbors_14_q0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] current_graph_index_address0;
output   current_graph_index_ce0;
input  [31:0] current_graph_index_q0;
output  [9:0] current_graph_flag_address0;
output   current_graph_flag_ce0;
output   current_graph_flag_we0;
output  [31:0] current_graph_flag_d0;
input  [31:0] current_graph_flag_q0;
output   m_axi_rng_state_AWVALID;
input   m_axi_rng_state_AWREADY;
output  [31:0] m_axi_rng_state_AWADDR;
output  [0:0] m_axi_rng_state_AWID;
output  [31:0] m_axi_rng_state_AWLEN;
output  [2:0] m_axi_rng_state_AWSIZE;
output  [1:0] m_axi_rng_state_AWBURST;
output  [1:0] m_axi_rng_state_AWLOCK;
output  [3:0] m_axi_rng_state_AWCACHE;
output  [2:0] m_axi_rng_state_AWPROT;
output  [3:0] m_axi_rng_state_AWQOS;
output  [3:0] m_axi_rng_state_AWREGION;
output  [0:0] m_axi_rng_state_AWUSER;
output   m_axi_rng_state_WVALID;
input   m_axi_rng_state_WREADY;
output  [31:0] m_axi_rng_state_WDATA;
output  [3:0] m_axi_rng_state_WSTRB;
output   m_axi_rng_state_WLAST;
output  [0:0] m_axi_rng_state_WID;
output  [0:0] m_axi_rng_state_WUSER;
output   m_axi_rng_state_ARVALID;
input   m_axi_rng_state_ARREADY;
output  [31:0] m_axi_rng_state_ARADDR;
output  [0:0] m_axi_rng_state_ARID;
output  [31:0] m_axi_rng_state_ARLEN;
output  [2:0] m_axi_rng_state_ARSIZE;
output  [1:0] m_axi_rng_state_ARBURST;
output  [1:0] m_axi_rng_state_ARLOCK;
output  [3:0] m_axi_rng_state_ARCACHE;
output  [2:0] m_axi_rng_state_ARPROT;
output  [3:0] m_axi_rng_state_ARQOS;
output  [3:0] m_axi_rng_state_ARREGION;
output  [0:0] m_axi_rng_state_ARUSER;
input   m_axi_rng_state_RVALID;
output   m_axi_rng_state_RREADY;
input  [31:0] m_axi_rng_state_RDATA;
input   m_axi_rng_state_RLAST;
input  [0:0] m_axi_rng_state_RID;
input  [0:0] m_axi_rng_state_RUSER;
input  [1:0] m_axi_rng_state_RRESP;
input   m_axi_rng_state_BVALID;
output   m_axi_rng_state_BREADY;
input  [1:0] m_axi_rng_state_BRESP;
input  [0:0] m_axi_rng_state_BID;
input  [0:0] m_axi_rng_state_BUSER;
input  [29:0] rng_state3;
output  [10:0] candidate_neighbors_s_address0;
output   candidate_neighbors_s_ce0;
output   candidate_neighbors_s_we0;
output  [31:0] candidate_neighbors_s_d0;
input  [31:0] candidate_neighbors_s_q0;
output  [10:0] candidate_neighbors_13_address0;
output   candidate_neighbors_13_ce0;
output   candidate_neighbors_13_we0;
output  [31:0] candidate_neighbors_13_d0;
input  [31:0] candidate_neighbors_13_q0;
output  [10:0] candidate_neighbors_14_address0;
output   candidate_neighbors_14_ce0;
output   candidate_neighbors_14_we0;
output  [31:0] candidate_neighbors_14_d0;
input  [31:0] candidate_neighbors_14_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg current_graph_index_ce0;
reg current_graph_flag_ce0;
reg current_graph_flag_we0;
reg m_axi_rng_state_AWVALID;
reg m_axi_rng_state_WVALID;
reg m_axi_rng_state_ARVALID;
reg m_axi_rng_state_RREADY;
reg m_axi_rng_state_BREADY;
reg candidate_neighbors_s_ce0;
reg candidate_neighbors_s_we0;
reg candidate_neighbors_13_ce0;
reg candidate_neighbors_13_we0;
reg candidate_neighbors_14_ce0;
reg candidate_neighbors_14_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] i_cast4_fu_142_p1;
reg   [31:0] i_cast4_reg_222;
wire    ap_CS_fsm_state2;
wire   [6:0] i_7_fu_152_p2;
reg   [6:0] i_7_reg_231;
wire   [9:0] p_shl_fu_158_p3;
reg   [9:0] p_shl_reg_236;
wire   [0:0] exitcond1_fu_146_p2;
wire   [7:0] p_shl9_fu_166_p3;
reg   [7:0] p_shl9_reg_241;
wire   [3:0] j_3_fu_184_p2;
reg   [3:0] j_3_reg_249;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_95_fu_204_p1;
reg   [63:0] tmp_95_reg_254;
wire   [0:0] exitcond_fu_178_p2;
reg   [31:0] idx_reg_264;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_28_fu_209_p3;
reg   [0:0] tmp_28_reg_270;
reg   [9:0] current_graph_flag_a_reg_274;
wire   [0:0] grp_tau_rand_fu_135_ap_return;
reg   [0:0] tmp_reg_279;
wire    ap_CS_fsm_state5;
wire    grp_tau_rand_fu_135_ap_done;
reg   [31:0] isn_reg_284;
wire    ap_CS_fsm_state6;
wire    grp_heap_push_candidate_fu_120_ap_start;
wire    grp_heap_push_candidate_fu_120_ap_done;
wire    grp_heap_push_candidate_fu_120_ap_idle;
wire    grp_heap_push_candidate_fu_120_ap_ready;
wire   [10:0] grp_heap_push_candidate_fu_120_current_graph_index_address0;
wire    grp_heap_push_candidate_fu_120_current_graph_index_ce0;
wire    grp_heap_push_candidate_fu_120_current_graph_index_we0;
wire   [31:0] grp_heap_push_candidate_fu_120_current_graph_index_d0;
wire   [10:0] grp_heap_push_candidate_fu_120_current_graph_dist_address0;
wire    grp_heap_push_candidate_fu_120_current_graph_dist_ce0;
wire    grp_heap_push_candidate_fu_120_current_graph_dist_we0;
wire   [31:0] grp_heap_push_candidate_fu_120_current_graph_dist_d0;
wire   [10:0] grp_heap_push_candidate_fu_120_current_graph_flag_address0;
wire    grp_heap_push_candidate_fu_120_current_graph_flag_ce0;
wire    grp_heap_push_candidate_fu_120_current_graph_flag_we0;
wire   [31:0] grp_heap_push_candidate_fu_120_current_graph_flag_d0;
reg   [31:0] grp_heap_push_candidate_fu_120_row;
reg   [31:0] grp_heap_push_candidate_fu_120_index;
wire    grp_tau_rand_fu_135_ap_start;
wire    grp_tau_rand_fu_135_ap_idle;
wire    grp_tau_rand_fu_135_ap_ready;
wire    grp_tau_rand_fu_135_m_axi_state_AWVALID;
wire   [31:0] grp_tau_rand_fu_135_m_axi_state_AWADDR;
wire   [0:0] grp_tau_rand_fu_135_m_axi_state_AWID;
wire   [31:0] grp_tau_rand_fu_135_m_axi_state_AWLEN;
wire   [2:0] grp_tau_rand_fu_135_m_axi_state_AWSIZE;
wire   [1:0] grp_tau_rand_fu_135_m_axi_state_AWBURST;
wire   [1:0] grp_tau_rand_fu_135_m_axi_state_AWLOCK;
wire   [3:0] grp_tau_rand_fu_135_m_axi_state_AWCACHE;
wire   [2:0] grp_tau_rand_fu_135_m_axi_state_AWPROT;
wire   [3:0] grp_tau_rand_fu_135_m_axi_state_AWQOS;
wire   [3:0] grp_tau_rand_fu_135_m_axi_state_AWREGION;
wire   [0:0] grp_tau_rand_fu_135_m_axi_state_AWUSER;
wire    grp_tau_rand_fu_135_m_axi_state_WVALID;
wire   [31:0] grp_tau_rand_fu_135_m_axi_state_WDATA;
wire   [3:0] grp_tau_rand_fu_135_m_axi_state_WSTRB;
wire    grp_tau_rand_fu_135_m_axi_state_WLAST;
wire   [0:0] grp_tau_rand_fu_135_m_axi_state_WID;
wire   [0:0] grp_tau_rand_fu_135_m_axi_state_WUSER;
wire    grp_tau_rand_fu_135_m_axi_state_ARVALID;
wire   [31:0] grp_tau_rand_fu_135_m_axi_state_ARADDR;
wire   [0:0] grp_tau_rand_fu_135_m_axi_state_ARID;
wire   [31:0] grp_tau_rand_fu_135_m_axi_state_ARLEN;
wire   [2:0] grp_tau_rand_fu_135_m_axi_state_ARSIZE;
wire   [1:0] grp_tau_rand_fu_135_m_axi_state_ARBURST;
wire   [1:0] grp_tau_rand_fu_135_m_axi_state_ARLOCK;
wire   [3:0] grp_tau_rand_fu_135_m_axi_state_ARCACHE;
wire   [2:0] grp_tau_rand_fu_135_m_axi_state_ARPROT;
wire   [3:0] grp_tau_rand_fu_135_m_axi_state_ARQOS;
wire   [3:0] grp_tau_rand_fu_135_m_axi_state_ARREGION;
wire   [0:0] grp_tau_rand_fu_135_m_axi_state_ARUSER;
wire    grp_tau_rand_fu_135_m_axi_state_RREADY;
wire    grp_tau_rand_fu_135_m_axi_state_BREADY;
reg   [6:0] i_reg_98;
reg   [3:0] j_reg_109;
wire    ap_CS_fsm_state9;
reg    ap_block_state9_on_subcall_done;
reg    ap_reg_grp_heap_push_candidate_fu_120_ap_start;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state7;
reg    ap_reg_grp_tau_rand_fu_135_ap_start;
wire   [7:0] j_cast2_fu_174_p1;
wire   [7:0] tmp1_fu_190_p2;
wire   [9:0] tmp1_cast_fu_195_p1;
wire   [9:0] tmp_s_fu_199_p2;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_reg_grp_heap_push_candidate_fu_120_ap_start = 1'b0;
#0 ap_reg_grp_tau_rand_fu_135_ap_start = 1'b0;
end

heap_push_candidate grp_heap_push_candidate_fu_120(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_heap_push_candidate_fu_120_ap_start),
    .ap_done(grp_heap_push_candidate_fu_120_ap_done),
    .ap_idle(grp_heap_push_candidate_fu_120_ap_idle),
    .ap_ready(grp_heap_push_candidate_fu_120_ap_ready),
    .current_graph_index_address0(grp_heap_push_candidate_fu_120_current_graph_index_address0),
    .current_graph_index_ce0(grp_heap_push_candidate_fu_120_current_graph_index_ce0),
    .current_graph_index_we0(grp_heap_push_candidate_fu_120_current_graph_index_we0),
    .current_graph_index_d0(grp_heap_push_candidate_fu_120_current_graph_index_d0),
    .current_graph_index_q0(candidate_neighbors_s_q0),
    .current_graph_dist_address0(grp_heap_push_candidate_fu_120_current_graph_dist_address0),
    .current_graph_dist_ce0(grp_heap_push_candidate_fu_120_current_graph_dist_ce0),
    .current_graph_dist_we0(grp_heap_push_candidate_fu_120_current_graph_dist_we0),
    .current_graph_dist_d0(grp_heap_push_candidate_fu_120_current_graph_dist_d0),
    .current_graph_dist_q0(candidate_neighbors_13_q0),
    .current_graph_flag_address0(grp_heap_push_candidate_fu_120_current_graph_flag_address0),
    .current_graph_flag_ce0(grp_heap_push_candidate_fu_120_current_graph_flag_ce0),
    .current_graph_flag_we0(grp_heap_push_candidate_fu_120_current_graph_flag_we0),
    .current_graph_flag_d0(grp_heap_push_candidate_fu_120_current_graph_flag_d0),
    .current_graph_flag_q0(candidate_neighbors_14_q0),
    .row(grp_heap_push_candidate_fu_120_row),
    .weight(tmp_reg_279),
    .index(grp_heap_push_candidate_fu_120_index),
    .flag(isn_reg_284)
);

tau_rand grp_tau_rand_fu_135(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_tau_rand_fu_135_ap_start),
    .ap_done(grp_tau_rand_fu_135_ap_done),
    .ap_idle(grp_tau_rand_fu_135_ap_idle),
    .ap_ready(grp_tau_rand_fu_135_ap_ready),
    .m_axi_state_AWVALID(grp_tau_rand_fu_135_m_axi_state_AWVALID),
    .m_axi_state_AWREADY(m_axi_rng_state_AWREADY),
    .m_axi_state_AWADDR(grp_tau_rand_fu_135_m_axi_state_AWADDR),
    .m_axi_state_AWID(grp_tau_rand_fu_135_m_axi_state_AWID),
    .m_axi_state_AWLEN(grp_tau_rand_fu_135_m_axi_state_AWLEN),
    .m_axi_state_AWSIZE(grp_tau_rand_fu_135_m_axi_state_AWSIZE),
    .m_axi_state_AWBURST(grp_tau_rand_fu_135_m_axi_state_AWBURST),
    .m_axi_state_AWLOCK(grp_tau_rand_fu_135_m_axi_state_AWLOCK),
    .m_axi_state_AWCACHE(grp_tau_rand_fu_135_m_axi_state_AWCACHE),
    .m_axi_state_AWPROT(grp_tau_rand_fu_135_m_axi_state_AWPROT),
    .m_axi_state_AWQOS(grp_tau_rand_fu_135_m_axi_state_AWQOS),
    .m_axi_state_AWREGION(grp_tau_rand_fu_135_m_axi_state_AWREGION),
    .m_axi_state_AWUSER(grp_tau_rand_fu_135_m_axi_state_AWUSER),
    .m_axi_state_WVALID(grp_tau_rand_fu_135_m_axi_state_WVALID),
    .m_axi_state_WREADY(m_axi_rng_state_WREADY),
    .m_axi_state_WDATA(grp_tau_rand_fu_135_m_axi_state_WDATA),
    .m_axi_state_WSTRB(grp_tau_rand_fu_135_m_axi_state_WSTRB),
    .m_axi_state_WLAST(grp_tau_rand_fu_135_m_axi_state_WLAST),
    .m_axi_state_WID(grp_tau_rand_fu_135_m_axi_state_WID),
    .m_axi_state_WUSER(grp_tau_rand_fu_135_m_axi_state_WUSER),
    .m_axi_state_ARVALID(grp_tau_rand_fu_135_m_axi_state_ARVALID),
    .m_axi_state_ARREADY(m_axi_rng_state_ARREADY),
    .m_axi_state_ARADDR(grp_tau_rand_fu_135_m_axi_state_ARADDR),
    .m_axi_state_ARID(grp_tau_rand_fu_135_m_axi_state_ARID),
    .m_axi_state_ARLEN(grp_tau_rand_fu_135_m_axi_state_ARLEN),
    .m_axi_state_ARSIZE(grp_tau_rand_fu_135_m_axi_state_ARSIZE),
    .m_axi_state_ARBURST(grp_tau_rand_fu_135_m_axi_state_ARBURST),
    .m_axi_state_ARLOCK(grp_tau_rand_fu_135_m_axi_state_ARLOCK),
    .m_axi_state_ARCACHE(grp_tau_rand_fu_135_m_axi_state_ARCACHE),
    .m_axi_state_ARPROT(grp_tau_rand_fu_135_m_axi_state_ARPROT),
    .m_axi_state_ARQOS(grp_tau_rand_fu_135_m_axi_state_ARQOS),
    .m_axi_state_ARREGION(grp_tau_rand_fu_135_m_axi_state_ARREGION),
    .m_axi_state_ARUSER(grp_tau_rand_fu_135_m_axi_state_ARUSER),
    .m_axi_state_RVALID(m_axi_rng_state_RVALID),
    .m_axi_state_RREADY(grp_tau_rand_fu_135_m_axi_state_RREADY),
    .m_axi_state_RDATA(m_axi_rng_state_RDATA),
    .m_axi_state_RLAST(m_axi_rng_state_RLAST),
    .m_axi_state_RID(m_axi_rng_state_RID),
    .m_axi_state_RUSER(m_axi_rng_state_RUSER),
    .m_axi_state_RRESP(m_axi_rng_state_RRESP),
    .m_axi_state_BVALID(m_axi_rng_state_BVALID),
    .m_axi_state_BREADY(grp_tau_rand_fu_135_m_axi_state_BREADY),
    .m_axi_state_BRESP(m_axi_rng_state_BRESP),
    .m_axi_state_BID(m_axi_rng_state_BID),
    .m_axi_state_BUSER(m_axi_rng_state_BUSER),
    .rng_state3(rng_state3),
    .ap_return(grp_tau_rand_fu_135_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_heap_push_candidate_fu_120_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8))) begin
            ap_reg_grp_heap_push_candidate_fu_120_ap_start <= 1'b1;
        end else if ((1'b1 == grp_heap_push_candidate_fu_120_ap_ready)) begin
            ap_reg_grp_heap_push_candidate_fu_120_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_tau_rand_fu_135_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == tmp_28_fu_209_p3))) begin
            ap_reg_grp_tau_rand_fu_135_ap_start <= 1'b1;
        end else if ((1'b1 == grp_tau_rand_fu_135_ap_ready)) begin
            ap_reg_grp_tau_rand_fu_135_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_178_p2 == 1'd1))) begin
        i_reg_98 <= i_7_reg_231;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_98 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_146_p2 == 1'd0))) begin
        j_reg_109 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (ap_block_state9_on_subcall_done == 1'b0))) begin
        j_reg_109 <= j_3_reg_249;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == tmp_28_fu_209_p3))) begin
        current_graph_flag_a_reg_274 <= tmp_95_reg_254;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_7_reg_231 <= i_7_fu_152_p2;
        i_cast4_reg_222[6 : 0] <= i_cast4_fu_142_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        idx_reg_264 <= current_graph_index_q0;
        tmp_28_reg_270 <= current_graph_index_q0[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        isn_reg_284 <= current_graph_flag_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_3_reg_249 <= j_3_fu_184_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_146_p2 == 1'd0))) begin
        p_shl9_reg_241[7 : 1] <= p_shl9_fu_166_p3[7 : 1];
        p_shl_reg_236[9 : 3] <= p_shl_fu_158_p3[9 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond_fu_178_p2))) begin
        tmp_95_reg_254[9 : 0] <= tmp_95_fu_204_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (grp_tau_rand_fu_135_ap_done == 1'b1))) begin
        tmp_reg_279 <= grp_tau_rand_fu_135_ap_return;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_146_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_146_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_28_reg_270)))) begin
        candidate_neighbors_13_ce0 = grp_heap_push_candidate_fu_120_current_graph_dist_ce0;
    end else begin
        candidate_neighbors_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_28_reg_270)))) begin
        candidate_neighbors_13_we0 = grp_heap_push_candidate_fu_120_current_graph_dist_we0;
    end else begin
        candidate_neighbors_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_28_reg_270)))) begin
        candidate_neighbors_14_ce0 = grp_heap_push_candidate_fu_120_current_graph_flag_ce0;
    end else begin
        candidate_neighbors_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_28_reg_270)))) begin
        candidate_neighbors_14_we0 = grp_heap_push_candidate_fu_120_current_graph_flag_we0;
    end else begin
        candidate_neighbors_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_28_reg_270)))) begin
        candidate_neighbors_s_ce0 = grp_heap_push_candidate_fu_120_current_graph_index_ce0;
    end else begin
        candidate_neighbors_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_28_reg_270)))) begin
        candidate_neighbors_s_we0 = grp_heap_push_candidate_fu_120_current_graph_index_we0;
    end else begin
        candidate_neighbors_s_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (grp_tau_rand_fu_135_ap_done == 1'b1)) | (1'b1 == ap_CS_fsm_state6))) begin
        current_graph_flag_ce0 = 1'b1;
    end else begin
        current_graph_flag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        current_graph_flag_we0 = 1'b1;
    end else begin
        current_graph_flag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        current_graph_index_ce0 = 1'b1;
    end else begin
        current_graph_index_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_28_reg_270))) begin
        grp_heap_push_candidate_fu_120_index = i_cast4_reg_222;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_heap_push_candidate_fu_120_index = idx_reg_264;
    end else begin
        grp_heap_push_candidate_fu_120_index = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_28_reg_270))) begin
        grp_heap_push_candidate_fu_120_row = idx_reg_264;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_heap_push_candidate_fu_120_row = i_cast4_reg_222;
    end else begin
        grp_heap_push_candidate_fu_120_row = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'd0 == tmp_28_fu_209_p3)) | (1'b1 == ap_CS_fsm_state5))) begin
        m_axi_rng_state_ARVALID = grp_tau_rand_fu_135_m_axi_state_ARVALID;
    end else begin
        m_axi_rng_state_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'd0 == tmp_28_fu_209_p3)) | (1'b1 == ap_CS_fsm_state5))) begin
        m_axi_rng_state_AWVALID = grp_tau_rand_fu_135_m_axi_state_AWVALID;
    end else begin
        m_axi_rng_state_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'd0 == tmp_28_fu_209_p3)) | (1'b1 == ap_CS_fsm_state5))) begin
        m_axi_rng_state_BREADY = grp_tau_rand_fu_135_m_axi_state_BREADY;
    end else begin
        m_axi_rng_state_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'd0 == tmp_28_fu_209_p3)) | (1'b1 == ap_CS_fsm_state5))) begin
        m_axi_rng_state_RREADY = grp_tau_rand_fu_135_m_axi_state_RREADY;
    end else begin
        m_axi_rng_state_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'd0 == tmp_28_fu_209_p3)) | (1'b1 == ap_CS_fsm_state5))) begin
        m_axi_rng_state_WVALID = grp_tau_rand_fu_135_m_axi_state_WVALID;
    end else begin
        m_axi_rng_state_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_146_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_178_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (tmp_28_fu_209_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (grp_tau_rand_fu_135_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (grp_heap_push_candidate_fu_120_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (ap_block_state9_on_subcall_done == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state9_on_subcall_done = ((1'b0 == grp_heap_push_candidate_fu_120_ap_done) & (1'd0 == tmp_28_reg_270));
end

assign candidate_neighbors_13_address0 = grp_heap_push_candidate_fu_120_current_graph_dist_address0;

assign candidate_neighbors_13_d0 = grp_heap_push_candidate_fu_120_current_graph_dist_d0;

assign candidate_neighbors_14_address0 = grp_heap_push_candidate_fu_120_current_graph_flag_address0;

assign candidate_neighbors_14_d0 = grp_heap_push_candidate_fu_120_current_graph_flag_d0;

assign candidate_neighbors_s_address0 = grp_heap_push_candidate_fu_120_current_graph_index_address0;

assign candidate_neighbors_s_d0 = grp_heap_push_candidate_fu_120_current_graph_index_d0;

assign current_graph_flag_address0 = current_graph_flag_a_reg_274;

assign current_graph_flag_d0 = 32'd0;

assign current_graph_index_address0 = tmp_95_fu_204_p1;

assign exitcond1_fu_146_p2 = ((i_reg_98 == 7'd100) ? 1'b1 : 1'b0);

assign exitcond_fu_178_p2 = ((j_reg_109 == 4'd10) ? 1'b1 : 1'b0);

assign grp_heap_push_candidate_fu_120_ap_start = ap_reg_grp_heap_push_candidate_fu_120_ap_start;

assign grp_tau_rand_fu_135_ap_start = ap_reg_grp_tau_rand_fu_135_ap_start;

assign i_7_fu_152_p2 = (i_reg_98 + 7'd1);

assign i_cast4_fu_142_p1 = i_reg_98;

assign j_3_fu_184_p2 = (j_reg_109 + 4'd1);

assign j_cast2_fu_174_p1 = j_reg_109;

assign m_axi_rng_state_ARADDR = grp_tau_rand_fu_135_m_axi_state_ARADDR;

assign m_axi_rng_state_ARBURST = grp_tau_rand_fu_135_m_axi_state_ARBURST;

assign m_axi_rng_state_ARCACHE = grp_tau_rand_fu_135_m_axi_state_ARCACHE;

assign m_axi_rng_state_ARID = grp_tau_rand_fu_135_m_axi_state_ARID;

assign m_axi_rng_state_ARLEN = grp_tau_rand_fu_135_m_axi_state_ARLEN;

assign m_axi_rng_state_ARLOCK = grp_tau_rand_fu_135_m_axi_state_ARLOCK;

assign m_axi_rng_state_ARPROT = grp_tau_rand_fu_135_m_axi_state_ARPROT;

assign m_axi_rng_state_ARQOS = grp_tau_rand_fu_135_m_axi_state_ARQOS;

assign m_axi_rng_state_ARREGION = grp_tau_rand_fu_135_m_axi_state_ARREGION;

assign m_axi_rng_state_ARSIZE = grp_tau_rand_fu_135_m_axi_state_ARSIZE;

assign m_axi_rng_state_ARUSER = grp_tau_rand_fu_135_m_axi_state_ARUSER;

assign m_axi_rng_state_AWADDR = grp_tau_rand_fu_135_m_axi_state_AWADDR;

assign m_axi_rng_state_AWBURST = grp_tau_rand_fu_135_m_axi_state_AWBURST;

assign m_axi_rng_state_AWCACHE = grp_tau_rand_fu_135_m_axi_state_AWCACHE;

assign m_axi_rng_state_AWID = grp_tau_rand_fu_135_m_axi_state_AWID;

assign m_axi_rng_state_AWLEN = grp_tau_rand_fu_135_m_axi_state_AWLEN;

assign m_axi_rng_state_AWLOCK = grp_tau_rand_fu_135_m_axi_state_AWLOCK;

assign m_axi_rng_state_AWPROT = grp_tau_rand_fu_135_m_axi_state_AWPROT;

assign m_axi_rng_state_AWQOS = grp_tau_rand_fu_135_m_axi_state_AWQOS;

assign m_axi_rng_state_AWREGION = grp_tau_rand_fu_135_m_axi_state_AWREGION;

assign m_axi_rng_state_AWSIZE = grp_tau_rand_fu_135_m_axi_state_AWSIZE;

assign m_axi_rng_state_AWUSER = grp_tau_rand_fu_135_m_axi_state_AWUSER;

assign m_axi_rng_state_WDATA = grp_tau_rand_fu_135_m_axi_state_WDATA;

assign m_axi_rng_state_WID = grp_tau_rand_fu_135_m_axi_state_WID;

assign m_axi_rng_state_WLAST = grp_tau_rand_fu_135_m_axi_state_WLAST;

assign m_axi_rng_state_WSTRB = grp_tau_rand_fu_135_m_axi_state_WSTRB;

assign m_axi_rng_state_WUSER = grp_tau_rand_fu_135_m_axi_state_WUSER;

assign p_shl9_fu_166_p3 = {{i_reg_98}, {1'd0}};

assign p_shl_fu_158_p3 = {{i_reg_98}, {3'd0}};

assign tmp1_cast_fu_195_p1 = tmp1_fu_190_p2;

assign tmp1_fu_190_p2 = (p_shl9_reg_241 + j_cast2_fu_174_p1);

assign tmp_28_fu_209_p3 = current_graph_index_q0[32'd31];

assign tmp_95_fu_204_p1 = tmp_s_fu_199_p2;

assign tmp_s_fu_199_p2 = (tmp1_cast_fu_195_p1 + p_shl_reg_236);

always @ (posedge ap_clk) begin
    i_cast4_reg_222[31:7] <= 25'b0000000000000000000000000;
    p_shl_reg_236[2:0] <= 3'b000;
    p_shl9_reg_241[0] <= 1'b0;
    tmp_95_reg_254[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
end

endmodule //build_candidates
