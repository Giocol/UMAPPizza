// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tau_rand_int (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_state_AWVALID,
        m_axi_state_AWREADY,
        m_axi_state_AWADDR,
        m_axi_state_AWID,
        m_axi_state_AWLEN,
        m_axi_state_AWSIZE,
        m_axi_state_AWBURST,
        m_axi_state_AWLOCK,
        m_axi_state_AWCACHE,
        m_axi_state_AWPROT,
        m_axi_state_AWQOS,
        m_axi_state_AWREGION,
        m_axi_state_AWUSER,
        m_axi_state_WVALID,
        m_axi_state_WREADY,
        m_axi_state_WDATA,
        m_axi_state_WSTRB,
        m_axi_state_WLAST,
        m_axi_state_WID,
        m_axi_state_WUSER,
        m_axi_state_ARVALID,
        m_axi_state_ARREADY,
        m_axi_state_ARADDR,
        m_axi_state_ARID,
        m_axi_state_ARLEN,
        m_axi_state_ARSIZE,
        m_axi_state_ARBURST,
        m_axi_state_ARLOCK,
        m_axi_state_ARCACHE,
        m_axi_state_ARPROT,
        m_axi_state_ARQOS,
        m_axi_state_ARREGION,
        m_axi_state_ARUSER,
        m_axi_state_RVALID,
        m_axi_state_RREADY,
        m_axi_state_RDATA,
        m_axi_state_RLAST,
        m_axi_state_RID,
        m_axi_state_RUSER,
        m_axi_state_RRESP,
        m_axi_state_BVALID,
        m_axi_state_BREADY,
        m_axi_state_BRESP,
        m_axi_state_BID,
        m_axi_state_BUSER,
        rng_state3,
        ap_return
);

parameter    ap_ST_fsm_state1 = 45'd1;
parameter    ap_ST_fsm_state2 = 45'd2;
parameter    ap_ST_fsm_state3 = 45'd4;
parameter    ap_ST_fsm_state4 = 45'd8;
parameter    ap_ST_fsm_state5 = 45'd16;
parameter    ap_ST_fsm_state6 = 45'd32;
parameter    ap_ST_fsm_state7 = 45'd64;
parameter    ap_ST_fsm_state8 = 45'd128;
parameter    ap_ST_fsm_state9 = 45'd256;
parameter    ap_ST_fsm_state10 = 45'd512;
parameter    ap_ST_fsm_state11 = 45'd1024;
parameter    ap_ST_fsm_state12 = 45'd2048;
parameter    ap_ST_fsm_state13 = 45'd4096;
parameter    ap_ST_fsm_state14 = 45'd8192;
parameter    ap_ST_fsm_state15 = 45'd16384;
parameter    ap_ST_fsm_state16 = 45'd32768;
parameter    ap_ST_fsm_state17 = 45'd65536;
parameter    ap_ST_fsm_state18 = 45'd131072;
parameter    ap_ST_fsm_state19 = 45'd262144;
parameter    ap_ST_fsm_state20 = 45'd524288;
parameter    ap_ST_fsm_state21 = 45'd1048576;
parameter    ap_ST_fsm_state22 = 45'd2097152;
parameter    ap_ST_fsm_state23 = 45'd4194304;
parameter    ap_ST_fsm_state24 = 45'd8388608;
parameter    ap_ST_fsm_state25 = 45'd16777216;
parameter    ap_ST_fsm_state26 = 45'd33554432;
parameter    ap_ST_fsm_state27 = 45'd67108864;
parameter    ap_ST_fsm_state28 = 45'd134217728;
parameter    ap_ST_fsm_state29 = 45'd268435456;
parameter    ap_ST_fsm_state30 = 45'd536870912;
parameter    ap_ST_fsm_state31 = 45'd1073741824;
parameter    ap_ST_fsm_state32 = 45'd2147483648;
parameter    ap_ST_fsm_state33 = 45'd4294967296;
parameter    ap_ST_fsm_state34 = 45'd8589934592;
parameter    ap_ST_fsm_state35 = 45'd17179869184;
parameter    ap_ST_fsm_state36 = 45'd34359738368;
parameter    ap_ST_fsm_state37 = 45'd68719476736;
parameter    ap_ST_fsm_state38 = 45'd137438953472;
parameter    ap_ST_fsm_state39 = 45'd274877906944;
parameter    ap_ST_fsm_state40 = 45'd549755813888;
parameter    ap_ST_fsm_state41 = 45'd1099511627776;
parameter    ap_ST_fsm_state42 = 45'd2199023255552;
parameter    ap_ST_fsm_state43 = 45'd4398046511104;
parameter    ap_ST_fsm_state44 = 45'd8796093022208;
parameter    ap_ST_fsm_state45 = 45'd17592186044416;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_state_AWVALID;
input   m_axi_state_AWREADY;
output  [31:0] m_axi_state_AWADDR;
output  [0:0] m_axi_state_AWID;
output  [31:0] m_axi_state_AWLEN;
output  [2:0] m_axi_state_AWSIZE;
output  [1:0] m_axi_state_AWBURST;
output  [1:0] m_axi_state_AWLOCK;
output  [3:0] m_axi_state_AWCACHE;
output  [2:0] m_axi_state_AWPROT;
output  [3:0] m_axi_state_AWQOS;
output  [3:0] m_axi_state_AWREGION;
output  [0:0] m_axi_state_AWUSER;
output   m_axi_state_WVALID;
input   m_axi_state_WREADY;
output  [31:0] m_axi_state_WDATA;
output  [3:0] m_axi_state_WSTRB;
output   m_axi_state_WLAST;
output  [0:0] m_axi_state_WID;
output  [0:0] m_axi_state_WUSER;
output   m_axi_state_ARVALID;
input   m_axi_state_ARREADY;
output  [31:0] m_axi_state_ARADDR;
output  [0:0] m_axi_state_ARID;
output  [31:0] m_axi_state_ARLEN;
output  [2:0] m_axi_state_ARSIZE;
output  [1:0] m_axi_state_ARBURST;
output  [1:0] m_axi_state_ARLOCK;
output  [3:0] m_axi_state_ARCACHE;
output  [2:0] m_axi_state_ARPROT;
output  [3:0] m_axi_state_ARQOS;
output  [3:0] m_axi_state_ARREGION;
output  [0:0] m_axi_state_ARUSER;
input   m_axi_state_RVALID;
output   m_axi_state_RREADY;
input  [31:0] m_axi_state_RDATA;
input   m_axi_state_RLAST;
input  [0:0] m_axi_state_RID;
input  [0:0] m_axi_state_RUSER;
input  [1:0] m_axi_state_RRESP;
input   m_axi_state_BVALID;
output   m_axi_state_BREADY;
input  [1:0] m_axi_state_BRESP;
input  [0:0] m_axi_state_BID;
input  [0:0] m_axi_state_BUSER;
input  [29:0] rng_state3;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_state_AWVALID;
reg[31:0] m_axi_state_AWADDR;
reg m_axi_state_WVALID;
reg[31:0] m_axi_state_WDATA;
reg m_axi_state_ARVALID;
reg[31:0] m_axi_state_ARADDR;
reg m_axi_state_RREADY;
reg m_axi_state_BREADY;

(* fsm_encoding = "none" *) reg   [44:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    state_blk_n_AR;
reg    state_blk_n_R;
wire    ap_CS_fsm_state8;
reg    state_blk_n_AW;
wire    ap_CS_fsm_state9;
reg    state_blk_n_W;
wire    ap_CS_fsm_state10;
reg    state_blk_n_B;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state45;
reg   [31:0] reg_101;
reg    ap_sig_ioackin_m_axi_state_ARREADY;
reg   [31:0] state_addr_reg_282;
reg   [18:0] tmp_reg_288;
reg   [12:0] tmp_4_reg_293;
reg    ap_sig_ioackin_m_axi_state_AWREADY;
wire   [31:0] tmp_5_fu_148_p3;
reg   [31:0] tmp_5_reg_298;
reg    ap_sig_ioackin_m_axi_state_WREADY;
wire   [30:0] sext_cast_fu_155_p1;
reg   [30:0] sext_cast_reg_303;
wire   [30:0] sum2_fu_158_p2;
reg   [30:0] sum2_reg_308;
reg   [31:0] state_addr_1_reg_313;
reg   [24:0] tmp_6_reg_319;
reg   [6:0] tmp_s_reg_324;
wire   [31:0] tmp_7_fu_206_p3;
reg   [31:0] tmp_7_reg_329;
wire   [30:0] sum4_fu_213_p2;
reg   [30:0] sum4_reg_334;
reg   [31:0] state_addr_2_reg_339;
reg   [10:0] tmp_8_reg_345;
wire   [31:0] tmp_13_fu_260_p3;
reg   [31:0] tmp_13_reg_350;
wire   [31:0] tmp_14_fu_272_p2;
reg   [31:0] tmp_14_reg_355;
wire   [63:0] sext_fu_105_p1;
wire   [63:0] sum2_cast_fu_164_p1;
wire   [63:0] sum4_cast_fu_218_p1;
reg    ap_reg_ioackin_m_axi_state_ARREADY;
reg    ap_reg_ioackin_m_axi_state_AWREADY;
reg    ap_reg_ioackin_m_axi_state_WREADY;
wire   [31:0] tmp_1_fu_126_p2;
wire   [31:0] tmp_3_fu_132_p2;
wire   [31:0] tmp_2_fu_184_p2;
wire   [31:0] tmp_9_fu_190_p2;
wire   [31:0] tmp_10_fu_238_p2;
wire   [31:0] tmp_11_fu_244_p2;
wire   [20:0] tmp_12_fu_250_p4;
wire   [31:0] tmp1_fu_267_p2;
reg   [44:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 45'd1;
#0 ap_reg_ioackin_m_axi_state_ARREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_state_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_state_WREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_state_ARREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == ap_sig_ioackin_m_axi_state_ARREADY))) | ((1'b1 == ap_CS_fsm_state16) & (ap_sig_ioackin_m_axi_state_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state31) & (ap_sig_ioackin_m_axi_state_ARREADY == 1'b1)))) begin
            ap_reg_ioackin_m_axi_state_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (1'b1 == m_axi_state_ARREADY)) | ((1'b1 == ap_CS_fsm_state16) & (1'b1 == m_axi_state_ARREADY)) | ((1'b1 == ap_CS_fsm_state31) & (1'b1 == m_axi_state_ARREADY)))) begin
            ap_reg_ioackin_m_axi_state_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_state_AWREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state9) & (ap_sig_ioackin_m_axi_state_AWREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state24) & (ap_sig_ioackin_m_axi_state_AWREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state39) & (ap_sig_ioackin_m_axi_state_AWREADY == 1'b1)))) begin
            ap_reg_ioackin_m_axi_state_AWREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state9) & (1'b1 == m_axi_state_AWREADY)) | ((1'b1 == ap_CS_fsm_state24) & (1'b1 == m_axi_state_AWREADY)) | ((1'b1 == ap_CS_fsm_state39) & (1'b1 == m_axi_state_AWREADY)))) begin
            ap_reg_ioackin_m_axi_state_AWREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_state_WREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state10) & (ap_sig_ioackin_m_axi_state_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state25) & (ap_sig_ioackin_m_axi_state_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state40) & (ap_sig_ioackin_m_axi_state_WREADY == 1'b1)))) begin
            ap_reg_ioackin_m_axi_state_WREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state10) & (1'b1 == m_axi_state_WREADY)) | ((1'b1 == ap_CS_fsm_state25) & (1'b1 == m_axi_state_WREADY)) | ((1'b1 == ap_CS_fsm_state40) & (1'b1 == m_axi_state_WREADY)))) begin
            ap_reg_ioackin_m_axi_state_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state8) & (m_axi_state_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state23) & (m_axi_state_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state38) & (m_axi_state_RVALID == 1'b1)))) begin
        reg_101 <= m_axi_state_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (m_axi_state_BVALID == 1'b1))) begin
        sext_cast_reg_303[29 : 0] <= sext_cast_fu_155_p1[29 : 0];
        sum2_reg_308 <= sum2_fu_158_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (ap_sig_ioackin_m_axi_state_ARREADY == 1'b1))) begin
        state_addr_1_reg_313[30 : 0] <= sum2_cast_fu_164_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) & (ap_sig_ioackin_m_axi_state_ARREADY == 1'b1))) begin
        state_addr_2_reg_339[30 : 0] <= sum4_cast_fu_218_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == ap_sig_ioackin_m_axi_state_ARREADY)))) begin
        state_addr_reg_282[29 : 0] <= sext_fu_105_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) & (m_axi_state_BVALID == 1'b1))) begin
        sum4_reg_334 <= sum4_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state39) & (ap_sig_ioackin_m_axi_state_AWREADY == 1'b1))) begin
        tmp_13_reg_350 <= tmp_13_fu_260_p3;
        tmp_14_reg_355 <= tmp_14_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (ap_sig_ioackin_m_axi_state_AWREADY == 1'b1))) begin
        tmp_4_reg_293 <= {{tmp_3_fu_132_p2[31:19]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (ap_sig_ioackin_m_axi_state_WREADY == 1'b1))) begin
        tmp_5_reg_298 <= tmp_5_fu_148_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & (m_axi_state_RVALID == 1'b1))) begin
        tmp_6_reg_319 <= {{m_axi_state_RDATA[27:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & (ap_sig_ioackin_m_axi_state_WREADY == 1'b1))) begin
        tmp_7_reg_329 <= tmp_7_fu_206_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state38) & (m_axi_state_RVALID == 1'b1))) begin
        tmp_8_reg_345 <= {{m_axi_state_RDATA[14:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (m_axi_state_RVALID == 1'b1))) begin
        tmp_reg_288 <= {{m_axi_state_RDATA[19:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (ap_sig_ioackin_m_axi_state_AWREADY == 1'b1))) begin
        tmp_s_reg_324 <= {{tmp_9_fu_190_p2[31:25]}};
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state45) & (m_axi_state_BVALID == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) & (m_axi_state_BVALID == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_state_ARREADY)) begin
        ap_sig_ioackin_m_axi_state_ARREADY = m_axi_state_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_state_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_state_AWREADY)) begin
        ap_sig_ioackin_m_axi_state_AWREADY = m_axi_state_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_state_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_state_WREADY)) begin
        ap_sig_ioackin_m_axi_state_WREADY = m_axi_state_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_state_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_state_ARREADY)) begin
        if ((1'b1 == ap_CS_fsm_state31)) begin
            m_axi_state_ARADDR = sum4_cast_fu_218_p1;
        end else if ((1'b1 == ap_CS_fsm_state16)) begin
            m_axi_state_ARADDR = sum2_cast_fu_164_p1;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            m_axi_state_ARADDR = sext_fu_105_p1;
        end else begin
            m_axi_state_ARADDR = 'bx;
        end
    end else begin
        m_axi_state_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (1'b0 == ap_reg_ioackin_m_axi_state_ARREADY)) | ((1'b1 == ap_CS_fsm_state16) & (1'b0 == ap_reg_ioackin_m_axi_state_ARREADY)) | ((1'b1 == ap_CS_fsm_state31) & (1'b0 == ap_reg_ioackin_m_axi_state_ARREADY)))) begin
        m_axi_state_ARVALID = 1'b1;
    end else begin
        m_axi_state_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_state_AWREADY)) begin
        if ((1'b1 == ap_CS_fsm_state39)) begin
            m_axi_state_AWADDR = state_addr_2_reg_339;
        end else if ((1'b1 == ap_CS_fsm_state24)) begin
            m_axi_state_AWADDR = state_addr_1_reg_313;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            m_axi_state_AWADDR = state_addr_reg_282;
        end else begin
            m_axi_state_AWADDR = 'bx;
        end
    end else begin
        m_axi_state_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_reg_ioackin_m_axi_state_AWREADY)) | ((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_reg_ioackin_m_axi_state_AWREADY)) | ((1'b1 == ap_CS_fsm_state39) & (1'b0 == ap_reg_ioackin_m_axi_state_AWREADY)))) begin
        m_axi_state_AWVALID = 1'b1;
    end else begin
        m_axi_state_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state15) & (m_axi_state_BVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state30) & (m_axi_state_BVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state45) & (m_axi_state_BVALID == 1'b1)))) begin
        m_axi_state_BREADY = 1'b1;
    end else begin
        m_axi_state_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state8) & (m_axi_state_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state23) & (m_axi_state_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state38) & (m_axi_state_RVALID == 1'b1)))) begin
        m_axi_state_RREADY = 1'b1;
    end else begin
        m_axi_state_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_state_WREADY)) begin
        if ((1'b1 == ap_CS_fsm_state40)) begin
            m_axi_state_WDATA = tmp_13_reg_350;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            m_axi_state_WDATA = tmp_7_fu_206_p3;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            m_axi_state_WDATA = tmp_5_fu_148_p3;
        end else begin
            m_axi_state_WDATA = 'bx;
        end
    end else begin
        m_axi_state_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state10) & (1'b0 == ap_reg_ioackin_m_axi_state_WREADY)) | ((1'b1 == ap_CS_fsm_state25) & (1'b0 == ap_reg_ioackin_m_axi_state_WREADY)) | ((1'b1 == ap_CS_fsm_state40) & (1'b0 == ap_reg_ioackin_m_axi_state_WREADY)))) begin
        m_axi_state_WVALID = 1'b1;
    end else begin
        m_axi_state_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state31))) begin
        state_blk_n_AR = m_axi_state_ARREADY;
    end else begin
        state_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state39))) begin
        state_blk_n_AW = m_axi_state_AWREADY;
    end else begin
        state_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state45))) begin
        state_blk_n_B = m_axi_state_BVALID;
    end else begin
        state_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state38))) begin
        state_blk_n_R = m_axi_state_RVALID;
    end else begin
        state_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state40))) begin
        state_blk_n_W = m_axi_state_WREADY;
    end else begin
        state_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == ap_sig_ioackin_m_axi_state_ARREADY)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (m_axi_state_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (ap_sig_ioackin_m_axi_state_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (ap_sig_ioackin_m_axi_state_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (m_axi_state_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (ap_sig_ioackin_m_axi_state_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (m_axi_state_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (ap_sig_ioackin_m_axi_state_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & (ap_sig_ioackin_m_axi_state_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (m_axi_state_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & (ap_sig_ioackin_m_axi_state_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            if (((1'b1 == ap_CS_fsm_state38) & (m_axi_state_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            if (((1'b1 == ap_CS_fsm_state39) & (ap_sig_ioackin_m_axi_state_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            if (((1'b1 == ap_CS_fsm_state40) & (ap_sig_ioackin_m_axi_state_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            if (((1'b1 == ap_CS_fsm_state45) & (m_axi_state_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = tmp_14_reg_355;

assign m_axi_state_ARBURST = 2'd0;

assign m_axi_state_ARCACHE = 4'd0;

assign m_axi_state_ARID = 1'd0;

assign m_axi_state_ARLEN = 32'd1;

assign m_axi_state_ARLOCK = 2'd0;

assign m_axi_state_ARPROT = 3'd0;

assign m_axi_state_ARQOS = 4'd0;

assign m_axi_state_ARREGION = 4'd0;

assign m_axi_state_ARSIZE = 3'd0;

assign m_axi_state_ARUSER = 1'd0;

assign m_axi_state_AWBURST = 2'd0;

assign m_axi_state_AWCACHE = 4'd0;

assign m_axi_state_AWID = 1'd0;

assign m_axi_state_AWLEN = 32'd1;

assign m_axi_state_AWLOCK = 2'd0;

assign m_axi_state_AWPROT = 3'd0;

assign m_axi_state_AWQOS = 4'd0;

assign m_axi_state_AWREGION = 4'd0;

assign m_axi_state_AWSIZE = 3'd0;

assign m_axi_state_AWUSER = 1'd0;

assign m_axi_state_WID = 1'd0;

assign m_axi_state_WLAST = 1'b0;

assign m_axi_state_WSTRB = 4'd15;

assign m_axi_state_WUSER = 1'd0;

assign sext_cast_fu_155_p1 = rng_state3;

assign sext_fu_105_p1 = rng_state3;

assign sum2_cast_fu_164_p1 = sum2_reg_308;

assign sum2_fu_158_p2 = (31'd1 + sext_cast_fu_155_p1);

assign sum4_cast_fu_218_p1 = sum4_reg_334;

assign sum4_fu_213_p2 = (31'd2 + sext_cast_reg_303);

assign tmp1_fu_267_p2 = (tmp_5_reg_298 ^ tmp_13_fu_260_p3);

assign tmp_10_fu_238_p2 = reg_101 << 32'd3;

assign tmp_11_fu_244_p2 = (reg_101 ^ tmp_10_fu_238_p2);

assign tmp_12_fu_250_p4 = {{tmp_11_fu_244_p2[31:11]}};

assign tmp_13_fu_260_p3 = {{tmp_8_reg_345}, {tmp_12_fu_250_p4}};

assign tmp_14_fu_272_p2 = (tmp1_fu_267_p2 ^ tmp_7_reg_329);

assign tmp_1_fu_126_p2 = reg_101 << 32'd13;

assign tmp_2_fu_184_p2 = reg_101 << 32'd2;

assign tmp_3_fu_132_p2 = (reg_101 ^ tmp_1_fu_126_p2);

assign tmp_5_fu_148_p3 = {{tmp_reg_288}, {tmp_4_reg_293}};

assign tmp_7_fu_206_p3 = {{tmp_6_reg_319}, {tmp_s_reg_324}};

assign tmp_9_fu_190_p2 = (reg_101 ^ tmp_2_fu_184_p2);

always @ (posedge ap_clk) begin
    state_addr_reg_282[31:30] <= 2'b00;
    sext_cast_reg_303[30] <= 1'b0;
    state_addr_1_reg_313[31] <= 1'b0;
    state_addr_2_reg_339[31] <= 1'b0;
end

endmodule //tau_rand_int
