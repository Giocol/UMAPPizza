Team number: 267
Project name: UmapPizza
Date: 2019-07-01
Version of uploaded archive: 1

University name: Politecnico di Milano
Supervisor name: Marco Domenico Santambrogio
Supervisor e-mail: marco.santambrogio@polimi.it

Participant: Luca Carminati 
Email: luca5.carminati@mail.polimi.it

Participant: Aaron Cettolin
Email: aaron.cettolin@mail.polimi.it

Participant: Giorgio Colomban
Email: giorgio.coloman@mail.polimi.it

Brief Description of the Project: Nowadays Machine Learning techniques have encountered a great obstacle in the so-called Curse of Dimensionality. Our goal is to accelerate UMAP, a novel dimensionality reduction algorithm, using an heterogeneous architecture 

Two different Workflows are provided:
Vivado Workflow
    Board used: xc7z020clg400-1
    Vivado Version: 2018.2

    Description of archive: C sources are contained in "src/", sdk code to execute nn_descent on fpga is in "Vivado Workflow/sdk/"
    Instructions to build and test project
    Step 1: insert the desired defines in main.py
    Step 2: launch "python3 main.py" in order to generate the correct code automatically
    Step 3: start an hls project, importing all the .c .h files in src folder. main.c ancd signals.h have to be imported as test sources
    Step 4: launch synthesis and export the ip
    Step 5: create a new block design in Vivado. Add the Zynq processing system, load the Vivavo Workflow/pynq_revC.tcl preset, enable ports (AXI non secure) GP0,HP0,HP1,HP2,HP3
    Step 6: add the core previously generated, execute autoconnect. Connect memory port adequately
    Step 7: generate the bitstream file and launch Sdk (from Vivado menu)
    Step 8: import helloworld.c and the correct signals.h file. Enlarge the stack and heap size to 0x100000. Run
    
    Oss: more detailed instruction are present in README.md in Vivado Workflow folder.

SDAccel workflow
    Board used: xilinx:adm-pcie-ku3:2ddr-xpr:4.0-0
    SDAccel version: 2017.2

    Description of archive: C sources are contained in "src/", resources useful for host generation are contained in "SDAccel Workflow/Host Generation"
    Instruction to build and test project
    Step 1: insert the desired defines in main.py
    Step 2: launch "python3 main.py" in order to generate the correct code automatically
    Step 3: import the code in an SDAccel new Xilinx Sdx project, set the build to System and set nn_descent as main function
    Step 4: modify nn_descent.c, adding the direct inclusion of heap_utils.c and utils.c (i.e. add #include "heap_utils.c", #include "utils.c")
    Step 5: optimize the data types in headers.h in order to optimize memory usage
    Step 6: run the synthesis and copy the file .xclbin produced
    Step 7: copy the header files generated by main.py in src folder in Host generation folder.
    Step 8: source the correct xbinst/setup.sh file
    Step 9: make the host using the makefile provided with the command "make host TARGET=build". In order to do this step, you have to export a XILINX_SDX bash variable pointing to the correct SDx folder (for example: "export XILINX_SDX=/opt/Xilinx/SDx/2017.2/"). This will generate the host.exe file
    Step 10: rename the .xclbin file generated previously to kernel_ku3, put the host.exe and the .xclbin file in the same folder. Execute the host.

Tests done during project development are included in each workflow's folder

Link to YouTube Video: https://www.youtube.com/watch?v=ccHPjFOC2PM
